{"ast":null,"code":"import { intToBigInt } from '@stacks/common';\nimport { ClarityType } from '../constants';\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff');\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff');\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728');\nconst intCV = value => {\n  const bigInt = intToBigInt(value, true);\n  if (bigInt > MAX_I128) {\n    throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128}`);\n  } else if (bigInt < MIN_I128) {\n    throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128}`);\n  }\n  return {\n    type: ClarityType.Int,\n    value: bigInt\n  };\n};\nconst uintCV = value => {\n  const bigInt = intToBigInt(value, false);\n  if (bigInt < MIN_U128) {\n    throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n  } else if (bigInt > MAX_U128) {\n    throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128}`);\n  }\n  return {\n    type: ClarityType.UInt,\n    value: bigInt\n  };\n};\nexport { intCV, uintCV };","map":{"version":3,"names":["intToBigInt","ClarityType","MAX_U128","BigInt","MIN_U128","MAX_I128","MIN_I128","intCV","value","bigInt","RangeError","type","Int","uintCV","UInt"],"sources":["C:\\Users\\user\\Documents\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\transactions\\src\\clarity\\types\\intCV.ts"],"sourcesContent":["import { IntegerType, intToBigInt } from '@stacks/common';\r\nimport { ClarityType } from '../constants';\r\n\r\nconst MAX_U128 = BigInt('0xffffffffffffffffffffffffffffffff'); // (2 ** 128 - 1)\r\nconst MIN_U128 = BigInt(0);\r\nconst MAX_I128 = BigInt('0x7fffffffffffffffffffffffffffffff'); // (2 ** 127 - 1)\r\n// no signed (negative) hex support in bigint constructor\r\nconst MIN_I128 = BigInt('-170141183460469231731687303715884105728'); // (-2 ** 127)\r\n\r\ninterface IntCV {\r\n  readonly type: ClarityType.Int;\r\n  readonly value: bigint;\r\n}\r\n\r\n/**\r\n * Converts IntegerType in to IntCV clarity type\r\n *\r\n * @param {value} integer value to be converted to IntCV clarity type\r\n *\r\n * @returns {IntCV} returns instance of type IntCV\r\n *\r\n * @example\r\n * ```\r\n *  import { intCV } from '@stacks/transactions';\r\n *\r\n *  const value = intCV('100'); // parameter any of type: number | string | bigint | Uint8Array | BN\r\n *  // { type: 0, value: 100n }\r\n * ```\r\n *\r\n * @see\r\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\r\n */\r\nconst intCV = (value: IntegerType): IntCV => {\r\n  const bigInt = intToBigInt(value, true);\r\n  if (bigInt > MAX_I128) {\r\n    throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128}`);\r\n  } else if (bigInt < MIN_I128) {\r\n    throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128}`);\r\n  }\r\n  return { type: ClarityType.Int, value: bigInt };\r\n};\r\n\r\ninterface UIntCV {\r\n  readonly type: ClarityType.UInt;\r\n  readonly value: bigint;\r\n}\r\n\r\n/**\r\n * Converts IntegerType in to IntCV clarity type\r\n *\r\n * @param {value} integer value to be converted to UIntCV clarity type (Only unsigned integer is allowed otherwise throws exception)\r\n *\r\n * @returns {UIntCV} returns instance of type UIntCV\r\n *\r\n * @example\r\n * ```\r\n *  import { uintCV } from '@stacks/transactions';\r\n *\r\n *  const value = uintCV('100'); // parameter any of type: number | string | bigint | Uint8Array | BN\r\n *  // { type: 1, value: 100n }\r\n * ```\r\n *\r\n * @see\r\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\r\n */\r\nconst uintCV = (value: IntegerType): UIntCV => {\r\n  const bigInt = intToBigInt(value, false);\r\n  if (bigInt < MIN_U128) {\r\n    throw new RangeError('Cannot construct unsigned clarity integer from negative value');\r\n  } else if (bigInt > MAX_U128) {\r\n    throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128}`);\r\n  }\r\n  return { type: ClarityType.UInt, value: bigInt };\r\n};\r\n\r\nexport { IntCV, UIntCV, intCV, uintCV };\r\n"],"mappings":"AAAA,SAAsBA,WAAW,QAAQ,gBAAgB;AACzD,SAASC,WAAW,QAAQ,cAAc;AAE1C,MAAMC,QAAQ,GAAGC,MAAM,CAAC,oCAAoC,CAAC;AAC7D,MAAMC,QAAQ,GAAGD,MAAM,CAAC,CAAC,CAAC;AAC1B,MAAME,QAAQ,GAAGF,MAAM,CAAC,oCAAoC,CAAC;AAE7D,MAAMG,QAAQ,GAAGH,MAAM,CAAC,0CAA0C,CAAC;AAyBnE,MAAMI,KAAK,GAAIC,KAAkB,IAAW;EAC1C,MAAMC,MAAM,GAAGT,WAAW,CAACQ,KAAK,EAAE,IAAI,CAAC;EACvC,IAAIC,MAAM,GAAGJ,QAAQ,EAAE;IACrB,MAAM,IAAIK,UAAU,CAAC,4DAA4DL,QAAQ,EAAE,CAAC;GAC7F,MAAM,IAAII,MAAM,GAAGH,QAAQ,EAAE;IAC5B,MAAM,IAAII,UAAU,CAAC,yDAAyDJ,QAAQ,EAAE,CAAC;;EAE3F,OAAO;IAAEK,IAAI,EAAEV,WAAW,CAACW,GAAG;IAAEJ,KAAK,EAAEC;EAAM,CAAE;AACjD,CAAC;AAyBD,MAAMI,MAAM,GAAIL,KAAkB,IAAY;EAC5C,MAAMC,MAAM,GAAGT,WAAW,CAACQ,KAAK,EAAE,KAAK,CAAC;EACxC,IAAIC,MAAM,GAAGL,QAAQ,EAAE;IACrB,MAAM,IAAIM,UAAU,CAAC,+DAA+D,CAAC;GACtF,MAAM,IAAID,MAAM,GAAGP,QAAQ,EAAE;IAC5B,MAAM,IAAIQ,UAAU,CAAC,0DAA0DR,QAAQ,EAAE,CAAC;;EAE5F,OAAO;IAAES,IAAI,EAAEV,WAAW,CAACa,IAAI;IAAEN,KAAK,EAAEC;EAAM,CAAE;AAClD,CAAC;AAED,SAAwBF,KAAK,EAAEM,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}