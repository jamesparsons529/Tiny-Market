{"ast":null,"code":"export function getName(profile) {\n  if (!profile) {\n    return null;\n  }\n  let name = null;\n  if (profile.name) {\n    name = profile.name;\n  } else if (profile.givenName || profile.familyName) {\n    name = '';\n    if (profile.givenName) {\n      name = profile.givenName;\n    }\n    if (profile.familyName) {\n      name += ` ${profile.familyName}`;\n    }\n  }\n  return name;\n}\nexport function getGivenName(profile) {\n  if (!profile) {\n    return null;\n  }\n  let givenName = null;\n  if (profile.givenName) {\n    givenName = profile.givenName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    givenName = nameParts.slice(0, -1).join(' ');\n  }\n  return givenName;\n}\nexport function getFamilyName(profile) {\n  if (!profile) {\n    return null;\n  }\n  let familyName = null;\n  if (profile.familyName) {\n    familyName = profile.familyName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    familyName = nameParts.pop();\n  }\n  return familyName;\n}\nexport function getDescription(profile) {\n  if (!profile) {\n    return null;\n  }\n  let description = null;\n  if (profile.description) {\n    description = profile.description;\n  }\n  return description;\n}\nexport function getAvatarUrl(profile) {\n  if (!profile) {\n    return null;\n  }\n  let avatarContentUrl = null;\n  if (profile.image) {\n    profile.image.map(image => {\n      if (image.name === 'avatar') {\n        avatarContentUrl = image.contentUrl;\n        return avatarContentUrl;\n      } else {\n        return null;\n      }\n    });\n  }\n  return avatarContentUrl;\n}\nexport function getVerifiedAccounts(profile, verifications) {\n  if (!profile) {\n    return null;\n  }\n  const filteredAccounts = [];\n  if (profile.hasOwnProperty('account') && verifications) {\n    profile.account.map(account => {\n      let accountIsValid = false;\n      let proofUrl = null;\n      verifications.map(verification => {\n        if (verification.hasOwnProperty('proof_url')) {\n          verification.proofUrl = verification.proof_url;\n        }\n        if (verification.valid && verification.service === account.service && verification.identifier === account.identifier && verification.proofUrl) {\n          accountIsValid = true;\n          proofUrl = verification.proofUrl;\n          return true;\n        } else {\n          return false;\n        }\n      });\n      if (accountIsValid) {\n        account.proofUrl = proofUrl;\n        filteredAccounts.push(account);\n        return account;\n      } else {\n        return null;\n      }\n    });\n  }\n  return filteredAccounts;\n}\nexport function getOrganizations(profile) {\n  if (!profile) {\n    return null;\n  }\n  const organizations = [];\n  if (profile.hasOwnProperty('worksFor')) {\n    return profile.worksFor;\n  }\n  return organizations;\n}\nexport function getConnections(profile) {\n  if (!profile) {\n    return null;\n  }\n  let connections = [];\n  if (profile.hasOwnProperty('knows')) {\n    connections = profile.knows;\n  }\n  return connections;\n}\nexport function getAddress(profile) {\n  if (!profile) {\n    return null;\n  }\n  let addressString = null;\n  if (profile.hasOwnProperty('address')) {\n    const addressParts = [];\n    if (profile.address.hasOwnProperty('streetAddress')) {\n      addressParts.push(profile.address.streetAddress);\n    }\n    if (profile.address.hasOwnProperty('addressLocality')) {\n      addressParts.push(profile.address.addressLocality);\n    }\n    if (profile.address.hasOwnProperty('postalCode')) {\n      addressParts.push(profile.address.postalCode);\n    }\n    if (profile.address.hasOwnProperty('addressCountry')) {\n      addressParts.push(profile.address.addressCountry);\n    }\n    if (addressParts.length) {\n      addressString = addressParts.join(', ');\n    }\n  }\n  return addressString;\n}\nexport function getBirthDate(profile) {\n  if (!profile) {\n    return null;\n  }\n  const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  let birthDateString = null;\n  if (profile.hasOwnProperty('birthDate')) {\n    const date = new Date(profile.birthDate);\n    birthDateString = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n  }\n  return birthDateString;\n}","map":{"version":3,"names":["getName","profile","name","givenName","familyName","getGivenName","nameParts","split","slice","join","getFamilyName","pop","getDescription","description","getAvatarUrl","avatarContentUrl","image","map","contentUrl","getVerifiedAccounts","verifications","filteredAccounts","hasOwnProperty","account","accountIsValid","proofUrl","verification","proof_url","valid","service","identifier","push","getOrganizations","organizations","worksFor","getConnections","connections","knows","getAddress","addressString","addressParts","address","streetAddress","addressLocality","postalCode","addressCountry","length","getBirthDate","monthNames","birthDateString","date","Date","birthDate","getMonth","getDate","getFullYear"],"sources":["C:\\Users\\user\\Documents\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\profile\\src\\profileSchemas\\personUtils.ts"],"sourcesContent":["export function getName(profile: any) {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  let name = null;\r\n  if (profile.name) {\r\n    name = profile.name;\r\n  } else if (profile.givenName || profile.familyName) {\r\n    name = '';\r\n    if (profile.givenName) {\r\n      name = profile.givenName;\r\n    }\r\n    if (profile.familyName) {\r\n      name += ` ${profile.familyName}`;\r\n    }\r\n  }\r\n  return name;\r\n}\r\n\r\n/**\r\n *\r\n * @ignore\r\n */\r\nexport function getGivenName(profile: any) {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  let givenName = null;\r\n  if (profile.givenName) {\r\n    givenName = profile.givenName;\r\n  } else if (profile.name) {\r\n    const nameParts = profile.name.split(' ');\r\n    givenName = nameParts.slice(0, -1).join(' ');\r\n  }\r\n  return givenName;\r\n}\r\n\r\n/**\r\n *\r\n * @ignore\r\n */\r\nexport function getFamilyName(profile: any) {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  let familyName = null;\r\n  if (profile.familyName) {\r\n    familyName = profile.familyName;\r\n  } else if (profile.name) {\r\n    const nameParts = profile.name.split(' ');\r\n    familyName = nameParts.pop();\r\n  }\r\n  return familyName;\r\n}\r\n\r\n/**\r\n *\r\n * @ignore\r\n */\r\nexport function getDescription(profile: any) {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  let description = null;\r\n  if (profile.description) {\r\n    description = profile.description;\r\n  }\r\n  return description;\r\n}\r\n\r\n/**\r\n *\r\n * @ignore\r\n */\r\nexport function getAvatarUrl(profile: any) {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  let avatarContentUrl: string | null = null;\r\n  if (profile.image) {\r\n    profile.image.map((image: any) => {\r\n      if (image.name === 'avatar') {\r\n        avatarContentUrl = image.contentUrl;\r\n        return avatarContentUrl;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  }\r\n  return avatarContentUrl;\r\n}\r\n\r\n/**\r\n *\r\n * @ignore\r\n */\r\nexport function getVerifiedAccounts(profile: any, verifications?: any[]) {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  const filteredAccounts: any[] = [];\r\n  if (profile.hasOwnProperty('account') && verifications) {\r\n    profile.account.map((account: any) => {\r\n      let accountIsValid = false;\r\n      let proofUrl = null;\r\n\r\n      verifications.map(verification => {\r\n        if (verification.hasOwnProperty('proof_url')) {\r\n          verification.proofUrl = verification.proof_url;\r\n        }\r\n        if (\r\n          verification.valid &&\r\n          verification.service === account.service &&\r\n          verification.identifier === account.identifier &&\r\n          verification.proofUrl\r\n        ) {\r\n          accountIsValid = true;\r\n          proofUrl = verification.proofUrl;\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n\r\n      if (accountIsValid) {\r\n        account.proofUrl = proofUrl;\r\n        filteredAccounts.push(account);\r\n        return account;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  }\r\n  return filteredAccounts;\r\n}\r\n\r\n/**\r\n *\r\n * @ignore\r\n */\r\nexport function getOrganizations(profile: any) {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  const organizations: any[] = [];\r\n\r\n  if (profile.hasOwnProperty('worksFor')) {\r\n    return profile.worksFor;\r\n  }\r\n\r\n  return organizations;\r\n}\r\n\r\n/**\r\n *\r\n * @ignore\r\n */\r\nexport function getConnections(profile: any) {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  let connections = [];\r\n\r\n  if (profile.hasOwnProperty('knows')) {\r\n    connections = profile.knows;\r\n  }\r\n\r\n  return connections;\r\n}\r\n\r\n/**\r\n *\r\n * @ignore\r\n */\r\nexport function getAddress(profile: any) {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  let addressString = null;\r\n\r\n  if (profile.hasOwnProperty('address')) {\r\n    const addressParts = [];\r\n\r\n    if (profile.address.hasOwnProperty('streetAddress')) {\r\n      addressParts.push(profile.address.streetAddress);\r\n    }\r\n    if (profile.address.hasOwnProperty('addressLocality')) {\r\n      addressParts.push(profile.address.addressLocality);\r\n    }\r\n    if (profile.address.hasOwnProperty('postalCode')) {\r\n      addressParts.push(profile.address.postalCode);\r\n    }\r\n    if (profile.address.hasOwnProperty('addressCountry')) {\r\n      addressParts.push(profile.address.addressCountry);\r\n    }\r\n\r\n    if (addressParts.length) {\r\n      addressString = addressParts.join(', ');\r\n    }\r\n  }\r\n\r\n  return addressString;\r\n}\r\n\r\n/**\r\n *\r\n * @ignore\r\n */\r\nexport function getBirthDate(profile: any) {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  const monthNames = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n  ];\r\n\r\n  let birthDateString = null;\r\n\r\n  if (profile.hasOwnProperty('birthDate')) {\r\n    const date = new Date(profile.birthDate);\r\n    birthDateString = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\r\n  }\r\n\r\n  return birthDateString;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}