{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\TestNetNFTSList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { UserSession } from \"@stacks/connect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const userSession = new UserSession();\nfunction TestNetNFTSList() {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Retrieve the STX address from the user session\n  const stxAddress = userSession.loadUserData().profile.stxAddress.testnet; // Change to Testnet address\n\n  // Fetch NFTs for the user's Stacks address\n  useEffect(() => {\n    async function fetchNFTs() {\n      try {\n        setLoading(true);\n\n        // Fetch NFTs from the Hiro Stacks Testnet API\n        const response = await fetch(`https://stacks-node-api.testnet.stacks.co/extended/v1/tokens/nft/holdings?principal=${stxAddress}` // Change to Testnet endpoint\n        );\n\n        const data = await response.json();\n        console.log(data);\n\n        // Check if data exists and set it to state\n        if (data.results && data.results.length > 0) {\n          setNfts(data.results);\n        } else {\n          console.log('No NFTs found for this address.');\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setLoading(false);\n      }\n    }\n    fetchNFTs();\n  }, [stxAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"home-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"NFTCard\",\n        children: /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"browse-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nft-grid\",\n            children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading NFTs...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this) : nfts.length > 0 ? nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"nft-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: nft.value.repr.replace('u', ''),\n                alt: nft.asset_identifier\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: nft.asset_identifier\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"NFT Contract: \", nft.contract_address]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Token ID: \", nft.value.repr.replace('u', '')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"nft-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"buy-now\",\n                  children: \"Buy Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"swap\",\n                  children: \"Swap\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No NFTs found for this address.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(TestNetNFTSList, \"Xu7ThsH35mRfDOV8Y1kg1IE53o0=\");\n_c = TestNetNFTSList;\nexport default TestNetNFTSList;\nvar _c;\n$RefreshReg$(_c, \"TestNetNFTSList\");","map":{"version":3,"names":["React","useState","useEffect","UserSession","jsxDEV","_jsxDEV","userSession","TestNetNFTSList","_s","nfts","setNfts","loading","setLoading","stxAddress","loadUserData","profile","testnet","fetchNFTs","response","fetch","data","json","console","log","results","length","error","children","id","className","fileName","_jsxFileName","lineNumber","columnNumber","map","nft","index","src","value","repr","replace","alt","asset_identifier","contract_address","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/TestNetNFTSList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { UserSession } from \"@stacks/connect\"; \r\n\r\nexport const userSession = new UserSession();\r\n\r\nfunction TestNetNFTSList() {\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Retrieve the STX address from the user session\r\n  const stxAddress = userSession.loadUserData().profile.stxAddress.testnet; // Change to Testnet address\r\n\r\n  // Fetch NFTs for the user's Stacks address\r\n  useEffect(() => {\r\n    async function fetchNFTs() {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Fetch NFTs from the Hiro Stacks Testnet API\r\n        const response = await fetch(\r\n          `https://stacks-node-api.testnet.stacks.co/extended/v1/tokens/nft/holdings?principal=${stxAddress}` // Change to Testnet endpoint\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n        \r\n        // Check if data exists and set it to state\r\n        if (data.results && data.results.length > 0) {\r\n          setNfts(data.results);\r\n        } else {\r\n          console.log('No NFTs found for this address.');\r\n        }\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching NFTs:', error);\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchNFTs();\r\n  }, [stxAddress]); \r\n\r\n  return (\r\n    <div>\r\n      <main id=\"home-container\">\r\n        <div className=\"NFTCard\">\r\n          <main className=\"browse-container\">\r\n            <div className=\"nft-grid\">\r\n              {loading ? (\r\n                <p>Loading NFTs...</p>\r\n              ) : nfts.length > 0 ? (\r\n                nfts.map((nft, index) => (\r\n                  <div className=\"nft-item\" key={index}>\r\n                    <img src={nft.value.repr.replace('u', '')} alt={nft.asset_identifier} />\r\n                    <h2>{nft.asset_identifier}</h2>\r\n                    <p>NFT Contract: {nft.contract_address}</p>\r\n                    <p>Token ID: {nft.value.repr.replace('u', '')}</p>\r\n                    <div className=\"nft-buttons\">\r\n                      <button className=\"buy-now\">Buy Now</button>\r\n                      <button className=\"swap\">Swap</button>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <p>No NFTs found for this address.</p>\r\n              )}\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestNetNFTSList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}