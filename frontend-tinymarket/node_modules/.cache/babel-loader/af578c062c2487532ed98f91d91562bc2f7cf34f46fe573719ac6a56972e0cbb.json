{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\totalNFTButton.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useConnect } from \"@stacks/connect-react\";\nimport { StacksMocknet } from \"@stacks/network\";\nimport { callReadOnlyFunction, uintCV, getCVType, deserializeCV } from \"@stacks/transactions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetLastTokenIdButton = () => {\n  _s();\n  const {\n    doContractCall\n  } = useConnect();\n  const handleButtonClick = async () => {\n    try {\n      // Call the 'get-last-token-id' function from the sip009-nft contract\n      const response = await callReadOnlyFunction({\n        contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\n        contractName: \"sip009-nft\",\n        // Contract name\n        functionName: \"get-last-token-id\",\n        functionArgs: [],\n        network: new StacksMocknet()\n      });\n\n      // Deserialize the response\n      const decodedValue = deserializeCV(response.result);\n\n      // Print the last token ID\n      console.log(\"Number of NFTs minted (last token ID):\", decodedValue.value);\n    } catch (error) {\n      console.error(\"Error calling contract:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleButtonClick,\n    children: \"Get Last Token ID\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(GetLastTokenIdButton, \"P3HkHp98suz6H5U4Rb98FIRDOug=\", false, function () {\n  return [useConnect];\n});\n_c = GetLastTokenIdButton;\nexport default GetLastTokenIdButton;\nvar _c;\n$RefreshReg$(_c, \"GetLastTokenIdButton\");","map":{"version":3,"names":["React","useConnect","StacksMocknet","callReadOnlyFunction","uintCV","getCVType","deserializeCV","jsxDEV","_jsxDEV","GetLastTokenIdButton","_s","doContractCall","handleButtonClick","response","contractAddress","contractName","functionName","functionArgs","network","decodedValue","result","console","log","value","error","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/totalNFTButton.js"],"sourcesContent":["import React from 'react';\r\nimport { useConnect } from \"@stacks/connect-react\";\r\nimport { StacksMocknet } from \"@stacks/network\";\r\nimport { callReadOnlyFunction, uintCV, getCVType, deserializeCV } from \"@stacks/transactions\";\r\n\r\nconst GetLastTokenIdButton = () => {\r\n  const { doContractCall } = useConnect();\r\n\r\n  const handleButtonClick = async () => {\r\n    try {\r\n      // Call the 'get-last-token-id' function from the sip009-nft contract\r\n      const response = await callReadOnlyFunction({\r\n        contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\r\n        contractName: \"sip009-nft\", // Contract name\r\n        functionName: \"get-last-token-id\",\r\n        functionArgs: [],\r\n        network: new StacksMocknet(),\r\n      });\r\n\r\n      // Deserialize the response\r\n      const decodedValue = deserializeCV(response.result);\r\n\r\n      // Print the last token ID\r\n      console.log(\"Number of NFTs minted (last token ID):\", decodedValue.value);\r\n\r\n    } catch (error) {\r\n      console.error(\"Error calling contract:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button onClick={handleButtonClick}>\r\n      Get Last Token ID\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default GetLastTokenIdButton;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,oBAAoB,EAAEC,MAAM,EAAEC,SAAS,EAAEC,aAAa,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9F,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAM;IAAEC;EAAe,CAAC,GAAGV,UAAU,CAAC,CAAC;EAEvC,MAAMW,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMV,oBAAoB,CAAC;QAC1CW,eAAe,EAAE,2CAA2C;QAC5DC,YAAY,EAAE,YAAY;QAAE;QAC5BC,YAAY,EAAE,mBAAmB;QACjCC,YAAY,EAAE,EAAE;QAChBC,OAAO,EAAE,IAAIhB,aAAa,CAAC;MAC7B,CAAC,CAAC;;MAEF;MACA,MAAMiB,YAAY,GAAGb,aAAa,CAACO,QAAQ,CAACO,MAAM,CAAC;;MAEnD;MACAC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEH,YAAY,CAACI,KAAK,CAAC;IAE3E,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,oBACEhB,OAAA;IAAQiB,OAAO,EAAEb,iBAAkB;IAAAc,QAAA,EAAC;EAEpC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb,CAAC;AAACpB,EAAA,CA9BID,oBAAoB;EAAA,QACGR,UAAU;AAAA;AAAA8B,EAAA,GADjCtB,oBAAoB;AAgC1B,eAAeA,oBAAoB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}