{"ast":null,"code":"import { Signature, verify } from '@noble/secp256k1';\nexport { Signature, verify as verifySignature };\nexport function getAesCbcOutputLength(inputByteLength) {\n  const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n  return cipherTextLength;\n}\nexport function getBase64OutputLength(inputByteLength) {\n  const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n  return encodedLength;\n}\nexport function hashCode(string) {\n  let hash = 0;\n  if (string.length === 0) return hash;\n  for (let i = 0; i < string.length; i++) {\n    const character = string.charCodeAt(i);\n    hash = (hash << 5) - hash + character;\n    hash &= hash;\n  }\n  return hash & 0x7fffffff;\n}","map":{"version":3,"names":["Signature","verify","verifySignature","getAesCbcOutputLength","inputByteLength","cipherTextLength","Math","floor","getBase64OutputLength","encodedLength","ceil","hashCode","string","hash","length","i","character","charCodeAt"],"sources":["C:\\Users\\Elliott\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\encryption\\src\\utils.ts"],"sourcesContent":["import { Signature, verify } from '@noble/secp256k1';\r\n\r\nexport { Signature, verify as verifySignature };\r\n\r\n/**\r\n * Calculate the AES-CBC ciphertext output byte length a given input length.\r\n * AES has a fixed block size of 16-bytes regardless key size.\r\n * @ignore\r\n */\r\nexport function getAesCbcOutputLength(inputByteLength: number) {\r\n  // AES-CBC block mode rounds up to the next block size.\r\n  const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\r\n  return cipherTextLength;\r\n}\r\n\r\n/**\r\n * Calculate the base64 encoded string length for a given input length.\r\n * This is equivalent to the byte length when the string is ASCII or UTF8-8\r\n * encoded.\r\n * @param number\r\n */\r\nexport function getBase64OutputLength(inputByteLength: number) {\r\n  const encodedLength = Math.ceil(inputByteLength / 3) * 4;\r\n  return encodedLength;\r\n}\r\n\r\n/**\r\n *\r\n * @ignore\r\n */\r\nexport function hashCode(string: string) {\r\n  let hash = 0;\r\n  if (string.length === 0) return hash;\r\n  for (let i = 0; i < string.length; i++) {\r\n    const character = string.charCodeAt(i);\r\n    hash = (hash << 5) - hash + character;\r\n    hash &= hash;\r\n  }\r\n  return hash & 0x7fffffff;\r\n}\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,kBAAkB;AAEpD,SAASD,SAAS,EAAEC,MAAM,IAAIC,eAAe;AAO7C,OAAM,SAAUC,qBAAqBA,CAACC,eAAuB;EAE3D,MAAMC,gBAAgB,GAAG,CAACC,IAAI,CAACC,KAAK,CAACH,eAAe,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE;EACpE,OAAOC,gBAAgB;AACzB;AAQA,OAAM,SAAUG,qBAAqBA,CAACJ,eAAuB;EAC3D,MAAMK,aAAa,GAAGH,IAAI,CAACI,IAAI,CAACN,eAAe,GAAG,CAAC,CAAC,GAAG,CAAC;EACxD,OAAOK,aAAa;AACtB;AAMA,OAAM,SAAUE,QAAQA,CAACC,MAAc;EACrC,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAID,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE,OAAOD,IAAI;EACpC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtC,MAAMC,SAAS,GAAGJ,MAAM,CAACK,UAAU,CAACF,CAAC,CAAC;IACtCF,IAAI,GAAG,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAGG,SAAS;IACrCH,IAAI,IAAIA,IAAI;;EAEd,OAAOA,IAAI,GAAG,UAAU;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}