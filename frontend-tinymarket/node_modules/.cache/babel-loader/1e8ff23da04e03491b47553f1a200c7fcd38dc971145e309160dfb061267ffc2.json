{"ast":null,"code":"import { SessionData } from './sessionData';\nimport { LOCALSTORAGE_SESSION_KEY } from './constants';\nimport { NoSessionDataError } from '@stacks/common';\nexport class SessionDataStore {\n  constructor(sessionOptions) {\n    if (sessionOptions) {\n      const newSessionData = new SessionData(sessionOptions);\n      this.setSessionData(newSessionData);\n    }\n  }\n  getSessionData() {\n    throw new Error('Abstract class');\n  }\n  setSessionData(_session) {\n    throw new Error('Abstract class');\n  }\n  deleteSessionData() {\n    throw new Error('Abstract class');\n  }\n}\nexport class InstanceDataStore extends SessionDataStore {\n  constructor(sessionOptions) {\n    super(sessionOptions);\n    if (!this.sessionData) {\n      this.setSessionData(new SessionData({}));\n    }\n  }\n  getSessionData() {\n    if (!this.sessionData) {\n      throw new NoSessionDataError('No session data was found.');\n    }\n    return this.sessionData;\n  }\n  setSessionData(session) {\n    this.sessionData = session;\n    return true;\n  }\n  deleteSessionData() {\n    this.setSessionData(new SessionData({}));\n    return true;\n  }\n}\nexport class LocalStorageStore extends SessionDataStore {\n  constructor(sessionOptions) {\n    super(sessionOptions);\n    if (sessionOptions && sessionOptions.storeOptions && sessionOptions.storeOptions.localStorageKey && typeof sessionOptions.storeOptions.localStorageKey === 'string') {\n      this.key = sessionOptions.storeOptions.localStorageKey;\n    } else {\n      this.key = LOCALSTORAGE_SESSION_KEY;\n    }\n    const data = localStorage.getItem(this.key);\n    if (!data) {\n      const sessionData = new SessionData({});\n      this.setSessionData(sessionData);\n    }\n  }\n  getSessionData() {\n    const data = localStorage.getItem(this.key);\n    if (!data) {\n      throw new NoSessionDataError('No session data was found in localStorage');\n    }\n    const dataJSON = JSON.parse(data);\n    return SessionData.fromJSON(dataJSON);\n  }\n  setSessionData(session) {\n    localStorage.setItem(this.key, session.toString());\n    return true;\n  }\n  deleteSessionData() {\n    localStorage.removeItem(this.key);\n    this.setSessionData(new SessionData({}));\n    return true;\n  }\n}","map":{"version":3,"names":["SessionData","LOCALSTORAGE_SESSION_KEY","NoSessionDataError","SessionDataStore","constructor","sessionOptions","newSessionData","setSessionData","getSessionData","Error","_session","deleteSessionData","InstanceDataStore","sessionData","session","LocalStorageStore","storeOptions","localStorageKey","key","data","localStorage","getItem","dataJSON","JSON","parse","fromJSON","setItem","toString","removeItem"],"sources":["C:\\Users\\user\\Documents\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\auth\\src\\sessionStore.ts"],"sourcesContent":["import { SessionData, SessionOptions } from './sessionData';\r\nimport { LOCALSTORAGE_SESSION_KEY } from './constants';\r\nimport { NoSessionDataError } from '@stacks/common';\r\n\r\n/**\r\n * An abstract class representing the SessionDataStore interface.\r\n\r\n */\r\nexport class SessionDataStore {\r\n  constructor(sessionOptions?: SessionOptions) {\r\n    if (sessionOptions) {\r\n      const newSessionData = new SessionData(sessionOptions);\r\n      this.setSessionData(newSessionData);\r\n    }\r\n  }\r\n\r\n  getSessionData(): SessionData {\r\n    throw new Error('Abstract class');\r\n  }\r\n\r\n  // TODO: fix, not used?\r\n  setSessionData(_session: SessionData): boolean {\r\n    throw new Error('Abstract class');\r\n  }\r\n\r\n  deleteSessionData(): boolean {\r\n    throw new Error('Abstract class');\r\n  }\r\n}\r\n\r\n/**\r\n * Stores session data in the instance of this class.\r\n * @ignore\r\n */\r\nexport class InstanceDataStore extends SessionDataStore {\r\n  sessionData?: SessionData;\r\n\r\n  constructor(sessionOptions?: SessionOptions) {\r\n    super(sessionOptions);\r\n    if (!this.sessionData) {\r\n      this.setSessionData(new SessionData({}));\r\n    }\r\n  }\r\n\r\n  getSessionData(): SessionData {\r\n    if (!this.sessionData) {\r\n      throw new NoSessionDataError('No session data was found.');\r\n    }\r\n    return this.sessionData;\r\n  }\r\n\r\n  setSessionData(session: SessionData): boolean {\r\n    this.sessionData = session;\r\n    return true;\r\n  }\r\n\r\n  deleteSessionData(): boolean {\r\n    this.setSessionData(new SessionData({}));\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Stores session data in browser a localStorage entry.\r\n * @ignore\r\n */\r\nexport class LocalStorageStore extends SessionDataStore {\r\n  key: string;\r\n\r\n  constructor(sessionOptions?: SessionOptions) {\r\n    super(sessionOptions);\r\n    if (\r\n      sessionOptions &&\r\n      sessionOptions.storeOptions &&\r\n      sessionOptions.storeOptions.localStorageKey &&\r\n      typeof sessionOptions.storeOptions.localStorageKey === 'string'\r\n    ) {\r\n      this.key = sessionOptions.storeOptions.localStorageKey;\r\n    } else {\r\n      this.key = LOCALSTORAGE_SESSION_KEY;\r\n    }\r\n\r\n    const data = localStorage.getItem(this.key);\r\n    if (!data) {\r\n      const sessionData = new SessionData({});\r\n      this.setSessionData(sessionData);\r\n    }\r\n  }\r\n\r\n  getSessionData(): SessionData {\r\n    const data = localStorage.getItem(this.key);\r\n    if (!data) {\r\n      throw new NoSessionDataError('No session data was found in localStorage');\r\n    }\r\n    const dataJSON = JSON.parse(data);\r\n    return SessionData.fromJSON(dataJSON);\r\n  }\r\n\r\n  setSessionData(session: SessionData): boolean {\r\n    localStorage.setItem(this.key, session.toString());\r\n    return true;\r\n  }\r\n\r\n  deleteSessionData(): boolean {\r\n    localStorage.removeItem(this.key);\r\n    this.setSessionData(new SessionData({}));\r\n    return true;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAwB,eAAe;AAC3D,SAASC,wBAAwB,QAAQ,aAAa;AACtD,SAASC,kBAAkB,QAAQ,gBAAgB;AAMnD,OAAM,MAAOC,gBAAgB;EAC3BC,YAAYC,cAA+B;IACzC,IAAIA,cAAc,EAAE;MAClB,MAAMC,cAAc,GAAG,IAAIN,WAAW,CAACK,cAAc,CAAC;MACtD,IAAI,CAACE,cAAc,CAACD,cAAc,CAAC;;EAEvC;EAEAE,cAAcA,CAAA;IACZ,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;EACnC;EAGAF,cAAcA,CAACG,QAAqB;IAClC,MAAM,IAAID,KAAK,CAAC,gBAAgB,CAAC;EACnC;EAEAE,iBAAiBA,CAAA;IACf,MAAM,IAAIF,KAAK,CAAC,gBAAgB,CAAC;EACnC;;AAOF,OAAM,MAAOG,iBAAkB,SAAQT,gBAAgB;EAGrDC,YAAYC,cAA+B;IACzC,KAAK,CAACA,cAAc,CAAC;IACrB,IAAI,CAAC,IAAI,CAACQ,WAAW,EAAE;MACrB,IAAI,CAACN,cAAc,CAAC,IAAIP,WAAW,CAAC,EAAE,CAAC,CAAC;;EAE5C;EAEAQ,cAAcA,CAAA;IACZ,IAAI,CAAC,IAAI,CAACK,WAAW,EAAE;MACrB,MAAM,IAAIX,kBAAkB,CAAC,4BAA4B,CAAC;;IAE5D,OAAO,IAAI,CAACW,WAAW;EACzB;EAEAN,cAAcA,CAACO,OAAoB;IACjC,IAAI,CAACD,WAAW,GAAGC,OAAO;IAC1B,OAAO,IAAI;EACb;EAEAH,iBAAiBA,CAAA;IACf,IAAI,CAACJ,cAAc,CAAC,IAAIP,WAAW,CAAC,EAAE,CAAC,CAAC;IACxC,OAAO,IAAI;EACb;;AAOF,OAAM,MAAOe,iBAAkB,SAAQZ,gBAAgB;EAGrDC,YAAYC,cAA+B;IACzC,KAAK,CAACA,cAAc,CAAC;IACrB,IACEA,cAAc,IACdA,cAAc,CAACW,YAAY,IAC3BX,cAAc,CAACW,YAAY,CAACC,eAAe,IAC3C,OAAOZ,cAAc,CAACW,YAAY,CAACC,eAAe,KAAK,QAAQ,EAC/D;MACA,IAAI,CAACC,GAAG,GAAGb,cAAc,CAACW,YAAY,CAACC,eAAe;KACvD,MAAM;MACL,IAAI,CAACC,GAAG,GAAGjB,wBAAwB;;IAGrC,MAAMkB,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,GAAG,CAAC;IAC3C,IAAI,CAACC,IAAI,EAAE;MACT,MAAMN,WAAW,GAAG,IAAIb,WAAW,CAAC,EAAE,CAAC;MACvC,IAAI,CAACO,cAAc,CAACM,WAAW,CAAC;;EAEpC;EAEAL,cAAcA,CAAA;IACZ,MAAMW,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACH,GAAG,CAAC;IAC3C,IAAI,CAACC,IAAI,EAAE;MACT,MAAM,IAAIjB,kBAAkB,CAAC,2CAA2C,CAAC;;IAE3E,MAAMoB,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC;IACjC,OAAOnB,WAAW,CAACyB,QAAQ,CAACH,QAAQ,CAAC;EACvC;EAEAf,cAAcA,CAACO,OAAoB;IACjCM,YAAY,CAACM,OAAO,CAAC,IAAI,CAACR,GAAG,EAAEJ,OAAO,CAACa,QAAQ,EAAE,CAAC;IAClD,OAAO,IAAI;EACb;EAEAhB,iBAAiBA,CAAA;IACfS,YAAY,CAACQ,UAAU,CAAC,IAAI,CAACV,GAAG,CAAC;IACjC,IAAI,CAACX,cAAc,CAAC,IAAIP,WAAW,CAAC,EAAE,CAAC,CAAC;IACxC,OAAO,IAAI;EACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}