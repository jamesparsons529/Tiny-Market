{"ast":null,"code":"import { makeContractFungiblePostCondition, makeContractNonFungiblePostCondition, makeContractSTXPostCondition, makeStandardFungiblePostCondition, makeStandardNonFungiblePostCondition, makeStandardSTXPostCondition } from './builders';\nimport { FungibleConditionCode, NonFungibleConditionCode } from './constants';\nimport { createAssetInfo } from './postcondition-types';\nexport function principal(principal) {\n  if (isContractIdString(principal)) {\n    const [address, name] = parseContractId(principal);\n    return new PartialPcWithPrincipal(address, name);\n  }\n  return new PartialPcWithPrincipal(principal, undefined);\n}\nclass PartialPcWithPrincipal {\n  constructor(address, contractName) {\n    this.address = address;\n    this.contractName = contractName;\n  }\n  willSendEq(amount) {\n    return new PartialPcFtWithCode(this.address, amount, FungibleConditionCode.Equal, this.contractName);\n  }\n  willSendLte(amount) {\n    return new PartialPcFtWithCode(this.address, amount, FungibleConditionCode.LessEqual, this.contractName);\n  }\n  willSendLt(amount) {\n    return new PartialPcFtWithCode(this.address, amount, FungibleConditionCode.Less, this.contractName);\n  }\n  willSendGte(amount) {\n    return new PartialPcFtWithCode(this.address, amount, FungibleConditionCode.GreaterEqual, this.contractName);\n  }\n  willSendGt(amount) {\n    return new PartialPcFtWithCode(this.address, amount, FungibleConditionCode.Greater, this.contractName);\n  }\n  willSendAsset() {\n    return new PartialPcNftWithCode(this.address, NonFungibleConditionCode.Sends, this.contractName);\n  }\n  willNotSendAsset() {\n    return new PartialPcNftWithCode(this.address, NonFungibleConditionCode.DoesNotSend, this.contractName);\n  }\n}\nclass PartialPcFtWithCode {\n  constructor(address, amount, code, contractName) {\n    this.address = address;\n    this.amount = amount;\n    this.code = code;\n    this.contractName = contractName;\n  }\n  ustx() {\n    if (this.contractName) {\n      return makeContractSTXPostCondition(this.address, this.contractName, this.code, this.amount);\n    }\n    return makeStandardSTXPostCondition(this.address, this.code, this.amount);\n  }\n  ft(contractId, tokenName) {\n    const [address, name] = parseContractId(contractId);\n    if (this.contractName) {\n      return makeContractFungiblePostCondition(this.address, this.contractName, this.code, this.amount, createAssetInfo(address, name, tokenName));\n    }\n    return makeStandardFungiblePostCondition(this.address, this.code, this.amount, createAssetInfo(address, name, tokenName));\n  }\n}\nclass PartialPcNftWithCode {\n  constructor(principal, code, contractName) {\n    this.principal = principal;\n    this.code = code;\n    this.contractName = contractName;\n  }\n  nft(...args) {\n    const {\n      contractAddress,\n      contractName,\n      tokenName,\n      assetId\n    } = getNftArgs(...args);\n    if (this.contractName) {\n      return makeContractNonFungiblePostCondition(this.principal, this.contractName, this.code, createAssetInfo(contractAddress, contractName, tokenName), assetId);\n    }\n    return makeStandardNonFungiblePostCondition(this.principal, this.code, createAssetInfo(contractAddress, contractName, tokenName), assetId);\n  }\n}\nfunction parseContractId(contractId) {\n  const [address, name] = contractId.split('.');\n  if (!address || !name) throw new Error(`Invalid contract identifier: ${contractId}`);\n  return [address, name];\n}\nfunction parseNft(nftAssetName) {\n  const [principal, tokenName] = nftAssetName.split('::');\n  if (!principal || !tokenName) throw new Error(`Invalid fully-qualified nft asset name: ${nftAssetName}`);\n  const [address, name] = parseContractId(principal);\n  return {\n    contractAddress: address,\n    contractName: name,\n    tokenName\n  };\n}\nfunction isContractIdString(value) {\n  return value.includes('.');\n}\nfunction getNftArgs(...args) {\n  if (args.length === 2) {\n    const [assetName, assetId] = args;\n    return {\n      ...parseNft(assetName),\n      assetId\n    };\n  }\n  const [contractId, tokenName, assetId] = args;\n  const [address, name] = parseContractId(contractId);\n  return {\n    contractAddress: address,\n    contractName: name,\n    tokenName,\n    assetId\n  };\n}","map":{"version":3,"names":["makeContractFungiblePostCondition","makeContractNonFungiblePostCondition","makeContractSTXPostCondition","makeStandardFungiblePostCondition","makeStandardNonFungiblePostCondition","makeStandardSTXPostCondition","FungibleConditionCode","NonFungibleConditionCode","createAssetInfo","principal","isContractIdString","address","name","parseContractId","PartialPcWithPrincipal","undefined","constructor","contractName","willSendEq","amount","PartialPcFtWithCode","Equal","willSendLte","LessEqual","willSendLt","Less","willSendGte","GreaterEqual","willSendGt","Greater","willSendAsset","PartialPcNftWithCode","Sends","willNotSendAsset","DoesNotSend","code","ustx","ft","contractId","tokenName","nft","args","contractAddress","assetId","getNftArgs","split","Error","parseNft","nftAssetName","value","includes","length","assetName"],"sources":["C:\\Users\\Elliott\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\transactions\\src\\pc.ts"],"sourcesContent":["import { IntegerType } from '@stacks/common';\r\nimport {\r\n  makeContractFungiblePostCondition,\r\n  makeContractNonFungiblePostCondition,\r\n  makeContractSTXPostCondition,\r\n  makeStandardFungiblePostCondition,\r\n  makeStandardNonFungiblePostCondition,\r\n  makeStandardSTXPostCondition,\r\n} from './builders';\r\nimport { ClarityValue } from './clarity';\r\nimport { FungibleConditionCode, NonFungibleConditionCode } from './constants';\r\nimport { createAssetInfo, NonFungiblePostCondition } from './postcondition-types';\r\n\r\n/// `Pc.` Post Condition Builder\r\n//\r\n// This is a behavioral helper interface for constructing post conditions.\r\n//\r\n// The general pattern is:\r\n//   PRINCIPAL -> [AMOUNT] -> CODE -> ASSET\r\n//\r\n\r\n/**\r\n * An address string encoded as c32check\r\n */\r\ntype AddressString = string;\r\n\r\n/**\r\n * A contract identifier string given as `<address>.<contract-name>`\r\n */\r\ntype ContractIdString = `${string}.${string}`;\r\n\r\n/**\r\n * An asset identifier string given as `<contract-id>::<token-name>` aka `<contract-address>.<contract-name>::<token-name>`\r\n */\r\ntype NftString = `${ContractIdString}::${string}`;\r\n\r\n/**\r\n * ### `Pc.` Post Condition Builder\r\n * @beta Interface may be subject to change in future releases.\r\n * @param {AddressString | ContractIdString} principal The principal to check, which should/should-not be sending assets. A string in the format \"address\" or \"address.contractId\".\r\n * @returns A partial post condition builder, which can be chained into a final post condition.\r\n * @example\r\n * ```\r\n * import { Pc } from '@stacks/transactions';\r\n * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendEq(10000).ustx();\r\n * ```\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\r\nexport function principal(principal: AddressString | ContractIdString) {\r\n  if (isContractIdString(principal)) {\r\n    // `principal` is a ContractIdString here\r\n    const [address, name] = parseContractId(principal);\r\n    return new PartialPcWithPrincipal(address, name);\r\n  }\r\n\r\n  return new PartialPcWithPrincipal(principal, undefined);\r\n}\r\n\r\n/**\r\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\r\n */\r\nclass PartialPcWithPrincipal {\r\n  constructor(\r\n    private address: string,\r\n    private contractName?: string\r\n  ) {}\r\n\r\n  // todo: split FT and STX into separate methods? e.g. `willSendSTXEq` and `willSendFtEq`\r\n\r\n  /**\r\n   * ### Fungible Token Post Condition\r\n   * A post-condition sending tokens `FungibleConditionCode.Equal` (equal to) the given amount of uSTX or fungible-tokens.\r\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\r\n   * @example\r\n   * ```\r\n   * import { Pc } from '@stacks/transactions';\r\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendEq(100).stx();\r\n   * ```\r\n   */\r\n  willSendEq(amount: IntegerType) {\r\n    return new PartialPcFtWithCode(\r\n      this.address,\r\n      amount,\r\n      FungibleConditionCode.Equal,\r\n      this.contractName\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ### Fungible Token Post Condition\r\n   * A post-condition sending tokens `FungibleConditionCode.LessEqual` (less-than or equal to) the given amount of uSTX or fungible-tokens.\r\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\r\n   * @example\r\n   * ```\r\n   * import { Pc } from '@stacks/transactions';\r\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendLte(100).stx();\r\n   * ```\r\n   */\r\n  willSendLte(amount: IntegerType) {\r\n    return new PartialPcFtWithCode(\r\n      this.address,\r\n      amount,\r\n      FungibleConditionCode.LessEqual,\r\n      this.contractName\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ### Fungible Token Post Condition\r\n   * A post-condition sending tokens `FungibleConditionCode.Less` (less-than) the given amount of uSTX or fungible-tokens.\r\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\r\n   * @example\r\n   * ```\r\n   * import { Pc } from '@stacks/transactions';\r\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendLt(100).stx();\r\n   * ```\r\n   */\r\n  willSendLt(amount: IntegerType) {\r\n    return new PartialPcFtWithCode(\r\n      this.address,\r\n      amount,\r\n      FungibleConditionCode.Less,\r\n      this.contractName\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ### Fungible Token Post Condition\r\n   * A post-condition sending tokens `FungibleConditionCode.GreaterEqual` (greater-than or equal to) the given amount of uSTX or fungible-tokens.\r\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\r\n   * @example\r\n   * ```\r\n   * import { Pc } from '@stacks/transactions';\r\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendGte(100).stx();\r\n   * ```\r\n   */\r\n  willSendGte(amount: IntegerType) {\r\n    return new PartialPcFtWithCode(\r\n      this.address,\r\n      amount,\r\n      FungibleConditionCode.GreaterEqual,\r\n      this.contractName\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ### Fungible Token Post Condition\r\n   * A post-condition sending tokens `FungibleConditionCode.Greater` (greater-than) the given amount of uSTX or fungible-tokens.\r\n   * Finalize with the chained `.ustx()` or `.ft(…)` method.\r\n   * @example\r\n   * ```\r\n   * import { Pc } from '@stacks/transactions';\r\n   * Pc.principal('STB44HYPYAT2BB2QE513NSP81HTMYWBJP02HPGK6').willSendGt(100).stx();\r\n   * ```\r\n   */\r\n  willSendGt(amount: IntegerType) {\r\n    return new PartialPcFtWithCode(\r\n      this.address,\r\n      amount,\r\n      FungibleConditionCode.Greater,\r\n      this.contractName\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ### NFT Post Condition\r\n   * A post-condition which `NonFungibleConditionCode.Sends` an NFT.\r\n   * Finalize with the chained `.nft(…)` method.\r\n   * @example\r\n   * ```\r\n   * import { Pc } from '@stacks/transactions';\r\n   * Pc.principal('STB4…K6.nft-contract').willSendAsset().nft('STB4…K6.super-nft::super', uintCV(1));\r\n   * ```\r\n   */\r\n  willSendAsset() {\r\n    return new PartialPcNftWithCode(\r\n      this.address,\r\n      NonFungibleConditionCode.Sends,\r\n      this.contractName\r\n    );\r\n  }\r\n\r\n  /**\r\n   * ### NFT Post Condition\r\n   * A post-condition which `NonFungibleConditionCode.DoesNotSend` an NFT.\r\n   * Finalize with the chained `.nft(…)` method.\r\n   * @example\r\n   * ```\r\n   * import { Pc } from '@stacks/transactions';\r\n   * Pc.principal('STB4…K6.nft-contract').willNotSendAsset().nft('STB4…K6.super-nft::super', uintCV(1));\r\n   * ```\r\n   */\r\n  willNotSendAsset() {\r\n    return new PartialPcNftWithCode(\r\n      this.address,\r\n      NonFungibleConditionCode.DoesNotSend,\r\n      this.contractName\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\r\n */\r\nclass PartialPcFtWithCode {\r\n  constructor(\r\n    private address: string,\r\n    private amount: IntegerType,\r\n    private code: FungibleConditionCode,\r\n    private contractName?: string\r\n  ) {}\r\n\r\n  /**\r\n   * ### STX Post Condition\r\n   * ⚠ Amount of STX is denoted in uSTX (micro-STX)\r\n   */\r\n  ustx() {\r\n    // todo: rename to `uSTX`?\r\n    if (this.contractName) {\r\n      return makeContractSTXPostCondition(this.address, this.contractName, this.code, this.amount);\r\n    }\r\n    return makeStandardSTXPostCondition(this.address, this.code, this.amount);\r\n  }\r\n\r\n  /**\r\n   * ### Fungible Token Post Condition\r\n   * ⚠ Amount of fungible tokens is denoted in the smallest unit of the token\r\n   */\r\n  ft(contractId: ContractIdString, tokenName: string) {\r\n    const [address, name] = parseContractId(contractId);\r\n    if (this.contractName) {\r\n      return makeContractFungiblePostCondition(\r\n        this.address,\r\n        this.contractName,\r\n        this.code,\r\n        this.amount,\r\n        createAssetInfo(address, name, tokenName)\r\n      );\r\n    }\r\n    return makeStandardFungiblePostCondition(\r\n      this.address,\r\n      this.code,\r\n      this.amount,\r\n      createAssetInfo(address, name, tokenName)\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Not meant to be used directly. Start from `Pc.principal(…)` instead.\r\n */\r\nclass PartialPcNftWithCode {\r\n  constructor(\r\n    private principal: string,\r\n    private code: NonFungibleConditionCode,\r\n    private contractName?: string\r\n  ) {}\r\n\r\n  /**\r\n   * ### Non-Fungible Token Post Condition\r\n   * @param assetName - The name of the NFT asset. Formatted as `<contract-address>.<contract-name>::<token-name>`.\r\n   * @param assetId - The asset identifier of the NFT. A Clarity value defining the single NFT instance.\r\n   */\r\n  nft(assetName: NftString, assetId: ClarityValue): NonFungiblePostCondition;\r\n  /**\r\n   * ### Non-Fungible Token Post Condition\r\n   * @param contractId - The contract identifier of the NFT. Formatted as `<contract-address>.<contract-name>`.\r\n   * @param tokenName - The name of the NFT asset.\r\n   * @param assetId - The asset identifier of the NFT. A Clarity value defining the single NFT instance.\r\n   */\r\n  nft(\r\n    contractId: ContractIdString,\r\n    tokenName: string,\r\n    assetId: ClarityValue\r\n  ): NonFungiblePostCondition;\r\n  nft(...args: [any, any] | [any, any, any]): NonFungiblePostCondition {\r\n    const { contractAddress, contractName, tokenName, assetId } = getNftArgs(\r\n      ...(args as [any, any, any])\r\n    );\r\n\r\n    if (this.contractName) {\r\n      return makeContractNonFungiblePostCondition(\r\n        this.principal,\r\n        this.contractName,\r\n        this.code,\r\n        createAssetInfo(contractAddress, contractName, tokenName),\r\n        assetId\r\n      );\r\n    }\r\n\r\n    return makeStandardNonFungiblePostCondition(\r\n      this.principal,\r\n      this.code,\r\n      createAssetInfo(contractAddress, contractName, tokenName),\r\n      assetId\r\n    );\r\n  }\r\n}\r\n\r\n/** @internal */\r\nfunction parseContractId(contractId: ContractIdString) {\r\n  const [address, name] = contractId.split('.');\r\n  if (!address || !name) throw new Error(`Invalid contract identifier: ${contractId}`);\r\n  return [address, name];\r\n}\r\n\r\n/** @internal */\r\nfunction parseNft(nftAssetName: NftString) {\r\n  const [principal, tokenName] = nftAssetName.split('::') as [ContractIdString, string];\r\n  if (!principal || !tokenName)\r\n    throw new Error(`Invalid fully-qualified nft asset name: ${nftAssetName}`);\r\n  const [address, name] = parseContractId(principal);\r\n  return { contractAddress: address, contractName: name, tokenName };\r\n}\r\n\r\n/** @internal */\r\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\r\nfunction isContractIdString(value: AddressString | ContractIdString): value is ContractIdString {\r\n  return value.includes('.');\r\n}\r\n\r\n/**\r\n * Helper method for `PartialPcNftWithCode.nft` to parse the arguments.\r\n * @internal\r\n */\r\nfunction getNftArgs(\r\n  assetName: NftString,\r\n  assetId: ClarityValue\r\n): { contractAddress: string; contractName: string; tokenName: string; assetId: ClarityValue };\r\nfunction getNftArgs(\r\n  contractId: ContractIdString,\r\n  tokenName: string,\r\n  assetId: ClarityValue\r\n): { contractAddress: string; contractName: string; tokenName: string; assetId: ClarityValue };\r\nfunction getNftArgs(...args: [any, any] | [any, any, any]): {\r\n  contractAddress: string;\r\n  contractName: string;\r\n  tokenName: string;\r\n  assetId: ClarityValue;\r\n} {\r\n  if (args.length === 2) {\r\n    const [assetName, assetId] = args;\r\n    return { ...parseNft(assetName), assetId };\r\n  }\r\n\r\n  // args.length === 3\r\n  const [contractId, tokenName, assetId] = args;\r\n  const [address, name] = parseContractId(contractId);\r\n  return { contractAddress: address, contractName: name, tokenName, assetId };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}