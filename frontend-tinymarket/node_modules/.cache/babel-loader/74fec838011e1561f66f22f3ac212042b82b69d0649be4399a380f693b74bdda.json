{"ast":null,"code":"import { ClarityType } from '../constants';\nimport { isClarityName } from '../../utils';\nfunction tupleCV(data) {\n  for (const key in data) {\n    if (!isClarityName(key)) {\n      throw new Error(`\"${key}\" is not a valid Clarity name`);\n    }\n  }\n  return {\n    type: ClarityType.Tuple,\n    data\n  };\n}\nexport { tupleCV };","map":{"version":3,"names":["ClarityType","isClarityName","tupleCV","data","key","Error","type","Tuple"],"sources":["C:\\Users\\user\\Documents\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\transactions\\src\\clarity\\types\\tupleCV.ts"],"sourcesContent":["import { ClarityValue } from '../clarityValue';\r\nimport { ClarityType } from '../constants';\r\nimport { isClarityName } from '../../utils';\r\n\r\ntype TupleData<T extends ClarityValue = ClarityValue> = { [key: string]: T };\r\n\r\ninterface TupleCV<T extends TupleData = TupleData> {\r\n  type: ClarityType.Tuple;\r\n  data: T;\r\n}\r\n\r\n/**\r\n * Create tuple of clarity values\r\n *\r\n * @param {tupleData} tuple value to be converted to tuple of clarity types\r\n *\r\n * @returns {TupleCV} returns instance of type clarity tuple\r\n *\r\n * @example\r\n * ```\r\n *  import { tupleCV, trueCV, falseCV } from '@stacks/transactions';\r\n *\r\n *  const tuple = tupleCV({\r\n *    c: trueCV(),\r\n *    b: falseCV(),\r\n *    a: trueCV(),\r\n *  });\r\n *  // { type: 12, data: { c: { type: 3 }, b: { type: 4 }, a: { type: 3 } } }\r\n * ```\r\n *\r\n * @see\r\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\r\n */\r\nfunction tupleCV<T extends ClarityValue = ClarityValue>(data: TupleData<T>): TupleCV<TupleData<T>> {\r\n  for (const key in data) {\r\n    if (!isClarityName(key)) {\r\n      throw new Error(`\"${key}\" is not a valid Clarity name`);\r\n    }\r\n  }\r\n\r\n  return { type: ClarityType.Tuple, data };\r\n}\r\n\r\nexport { TupleCV, tupleCV };\r\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAASC,aAAa,QAAQ,aAAa;AA+B3C,SAASC,OAAOA,CAAwCC,IAAkB;EACxE,KAAK,MAAMC,GAAG,IAAID,IAAI,EAAE;IACtB,IAAI,CAACF,aAAa,CAACG,GAAG,CAAC,EAAE;MACvB,MAAM,IAAIC,KAAK,CAAC,IAAID,GAAG,+BAA+B,CAAC;;;EAI3D,OAAO;IAAEE,IAAI,EAAEN,WAAW,CAACO,KAAK;IAAEJ;EAAI,CAAE;AAC1C;AAEA,SAAkBD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}