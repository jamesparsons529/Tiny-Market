{"ast":null,"code":"import { bytesToHex, readUInt16BE, readUInt32BE, readUInt8 } from '@stacks/common';\nfunction createEnumChecker(enumVariable) {\n  const enumValues = Object.values(enumVariable).filter(v => typeof v === 'number');\n  const enumValueSet = new Set(enumValues);\n  return value => enumValueSet.has(value);\n}\nconst enumCheckFunctions = new Map();\nexport function isEnum(enumVariable, value) {\n  const checker = enumCheckFunctions.get(enumVariable);\n  if (checker !== undefined) {\n    return checker(value);\n  }\n  const newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\nexport class BytesReader {\n  constructor(arr) {\n    this.consumed = 0;\n    this.source = arr;\n  }\n  readBytes(length) {\n    const view = this.source.subarray(this.consumed, this.consumed + length);\n    this.consumed += length;\n    return view;\n  }\n  readUInt32BE() {\n    return readUInt32BE(this.readBytes(4), 0);\n  }\n  readUInt8() {\n    return readUInt8(this.readBytes(1), 0);\n  }\n  readUInt16BE() {\n    return readUInt16BE(this.readBytes(2), 0);\n  }\n  readBigUIntLE(length) {\n    const bytes = this.readBytes(length).slice().reverse();\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n  readBigUIntBE(length) {\n    const bytes = this.readBytes(length);\n    const hex = bytesToHex(bytes);\n    return BigInt(`0x${hex}`);\n  }\n  get readOffset() {\n    return this.consumed;\n  }\n  set readOffset(val) {\n    this.consumed = val;\n  }\n  get internalBytes() {\n    return this.source;\n  }\n  readUInt8Enum(enumVariable, invalidEnumErrorFormatter) {\n    const num = this.readUInt8();\n    if (isEnum(enumVariable, num)) {\n      return num;\n    }\n    throw invalidEnumErrorFormatter(num);\n  }\n}","map":{"version":3,"names":["bytesToHex","readUInt16BE","readUInt32BE","readUInt8","createEnumChecker","enumVariable","enumValues","Object","values","filter","v","enumValueSet","Set","value","has","enumCheckFunctions","Map","isEnum","checker","get","undefined","newChecker","set","BytesReader","constructor","arr","consumed","source","readBytes","length","view","subarray","readBigUIntLE","bytes","slice","reverse","hex","BigInt","readBigUIntBE","readOffset","val","internalBytes","readUInt8Enum","invalidEnumErrorFormatter","num"],"sources":["C:\\Users\\Elliott\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\transactions\\src\\bytesReader.ts"],"sourcesContent":["import { bytesToHex, readUInt16BE, readUInt32BE, readUInt8 } from '@stacks/common';\r\n\r\nfunction createEnumChecker<T extends string, TEnumValue extends number>(enumVariable: {\r\n  [key in T]: TEnumValue;\r\n}): (value: number) => value is TEnumValue {\r\n  // Create a set of valid enum number values.\r\n  const enumValues = Object.values<number>(enumVariable).filter(v => typeof v === 'number');\r\n  const enumValueSet = new Set<number>(enumValues);\r\n  return (value: number): value is TEnumValue => enumValueSet.has(value);\r\n}\r\n\r\nconst enumCheckFunctions = new Map<object, (value: number) => boolean>();\r\n\r\n/**\r\n * Type guard to check if a given value is a valid enum value.\r\n * @param enumVariable - Literal `enum` type.\r\n * @param value - A value to check against the enum's values.\r\n * @example\r\n * ```ts\r\n * enum Color {\r\n *   Purple = 3,\r\n *   Orange = 5\r\n * }\r\n * const val: number = 3;\r\n * if (isEnum(Color, val)) {\r\n *   // `val` is known as enum type `Color`, e.g.:\r\n *   const colorVal: Color = val;\r\n * }\r\n * ```\r\n */\r\nexport function isEnum<T extends string, TEnumValue extends number>(\r\n  enumVariable: { [key in T]: TEnumValue },\r\n  value: number\r\n): value is TEnumValue {\r\n  const checker = enumCheckFunctions.get(enumVariable);\r\n  if (checker !== undefined) {\r\n    return checker(value);\r\n  }\r\n  const newChecker = createEnumChecker(enumVariable);\r\n  enumCheckFunctions.set(enumVariable, newChecker);\r\n  return isEnum(enumVariable, value);\r\n}\r\n\r\nexport class BytesReader {\r\n  source: Uint8Array;\r\n  consumed: number = 0;\r\n\r\n  constructor(arr: Uint8Array) {\r\n    this.source = arr;\r\n  }\r\n\r\n  readBytes(length: number): Uint8Array {\r\n    const view = this.source.subarray(this.consumed, this.consumed + length);\r\n    this.consumed += length;\r\n    return view;\r\n  }\r\n\r\n  readUInt32BE(): number {\r\n    return readUInt32BE(this.readBytes(4), 0);\r\n  }\r\n\r\n  readUInt8(): number {\r\n    return readUInt8(this.readBytes(1), 0);\r\n  }\r\n\r\n  readUInt16BE(): number {\r\n    return readUInt16BE(this.readBytes(2), 0);\r\n  }\r\n\r\n  readBigUIntLE(length: number): bigint {\r\n    const bytes = this.readBytes(length).slice().reverse();\r\n    const hex = bytesToHex(bytes);\r\n    return BigInt(`0x${hex}`);\r\n  }\r\n\r\n  readBigUIntBE(length: number): bigint {\r\n    const bytes = this.readBytes(length);\r\n    const hex = bytesToHex(bytes);\r\n    return BigInt(`0x${hex}`);\r\n  }\r\n\r\n  // todo: remove or implement with DataView?\r\n  // readBigUInt64BE(): bigint {\r\n  //   return this.source.readBigUInt64BE();\r\n  // }\r\n\r\n  get readOffset(): number {\r\n    return this.consumed;\r\n  }\r\n\r\n  set readOffset(val: number) {\r\n    this.consumed = val;\r\n  }\r\n\r\n  get internalBytes(): Uint8Array {\r\n    return this.source;\r\n  }\r\n\r\n  readUInt8Enum<T extends string, TEnumValue extends number>(\r\n    enumVariable: { [key in T]: TEnumValue },\r\n    invalidEnumErrorFormatter: (val: number) => Error\r\n  ): TEnumValue {\r\n    const num = this.readUInt8();\r\n    if (isEnum(enumVariable, num)) {\r\n      return num;\r\n    }\r\n    throw invalidEnumErrorFormatter(num);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,YAAY,EAAEC,YAAY,EAAEC,SAAS,QAAQ,gBAAgB;AAElF,SAASC,iBAAiBA,CAA8CC,YAEvE;EAEC,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAM,CAASH,YAAY,CAAC,CAACI,MAAM,CAACC,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,CAAC;EACzF,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAASN,UAAU,CAAC;EAChD,OAAQO,KAAa,IAA0BF,YAAY,CAACG,GAAG,CAACD,KAAK,CAAC;AACxE;AAEA,MAAME,kBAAkB,GAAG,IAAIC,GAAG,EAAsC;AAmBxE,OAAM,SAAUC,MAAMA,CACpBZ,YAAwC,EACxCQ,KAAa;EAEb,MAAMK,OAAO,GAAGH,kBAAkB,CAACI,GAAG,CAACd,YAAY,CAAC;EACpD,IAAIa,OAAO,KAAKE,SAAS,EAAE;IACzB,OAAOF,OAAO,CAACL,KAAK,CAAC;;EAEvB,MAAMQ,UAAU,GAAGjB,iBAAiB,CAACC,YAAY,CAAC;EAClDU,kBAAkB,CAACO,GAAG,CAACjB,YAAY,EAAEgB,UAAU,CAAC;EAChD,OAAOJ,MAAM,CAACZ,YAAY,EAAEQ,KAAK,CAAC;AACpC;AAEA,OAAM,MAAOU,WAAW;EAItBC,YAAYC,GAAe;IAF3B,KAAAC,QAAQ,GAAW,CAAC;IAGlB,IAAI,CAACC,MAAM,GAAGF,GAAG;EACnB;EAEAG,SAASA,CAACC,MAAc;IACtB,MAAMC,IAAI,GAAG,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,IAAI,CAACL,QAAQ,EAAE,IAAI,CAACA,QAAQ,GAAGG,MAAM,CAAC;IACxE,IAAI,CAACH,QAAQ,IAAIG,MAAM;IACvB,OAAOC,IAAI;EACb;EAEA5B,YAAYA,CAAA;IACV,OAAOA,YAAY,CAAC,IAAI,CAAC0B,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3C;EAEAzB,SAASA,CAAA;IACP,OAAOA,SAAS,CAAC,IAAI,CAACyB,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EACxC;EAEA3B,YAAYA,CAAA;IACV,OAAOA,YAAY,CAAC,IAAI,CAAC2B,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC3C;EAEAI,aAAaA,CAACH,MAAc;IAC1B,MAAMI,KAAK,GAAG,IAAI,CAACL,SAAS,CAACC,MAAM,CAAC,CAACK,KAAK,EAAE,CAACC,OAAO,EAAE;IACtD,MAAMC,GAAG,GAAGpC,UAAU,CAACiC,KAAK,CAAC;IAC7B,OAAOI,MAAM,CAAC,KAAKD,GAAG,EAAE,CAAC;EAC3B;EAEAE,aAAaA,CAACT,MAAc;IAC1B,MAAMI,KAAK,GAAG,IAAI,CAACL,SAAS,CAACC,MAAM,CAAC;IACpC,MAAMO,GAAG,GAAGpC,UAAU,CAACiC,KAAK,CAAC;IAC7B,OAAOI,MAAM,CAAC,KAAKD,GAAG,EAAE,CAAC;EAC3B;EAOA,IAAIG,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACb,QAAQ;EACtB;EAEA,IAAIa,UAAUA,CAACC,GAAW;IACxB,IAAI,CAACd,QAAQ,GAAGc,GAAG;EACrB;EAEA,IAAIC,aAAaA,CAAA;IACf,OAAO,IAAI,CAACd,MAAM;EACpB;EAEAe,aAAaA,CACXrC,YAAwC,EACxCsC,yBAAiD;IAEjD,MAAMC,GAAG,GAAG,IAAI,CAACzC,SAAS,EAAE;IAC5B,IAAIc,MAAM,CAACZ,YAAY,EAAEuC,GAAG,CAAC,EAAE;MAC7B,OAAOA,GAAG;;IAEZ,MAAMD,yBAAyB,CAACC,GAAG,CAAC;EACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}