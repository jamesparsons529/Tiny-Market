{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\MintNFT.js\",\n  _s = $RefreshSig$();\nimport { useConnect } from \"@stacks/connect-react\";\nimport { StacksMocknet } from \"@stacks/network\";\nimport { AnchorMode, PostConditionMode, stringUtf8CV, standardPrincipalCV } from \"@stacks/transactions\";\nimport { userSession } from \"./ConnectWallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MintNFT = () => {\n  _s();\n  const {\n    doContractCall\n  } = useConnect();\n  function vote(userSession) {\n    const userData = userSession.loadUserData();\n    const userAddress = userData.profile.stxAddress.testnet; // Use .mainnet if on mainnet\n\n    doContractCall({\n      network: new StacksMocknet(),\n      anchorMode: AnchorMode.Any,\n      contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\n      contractName: \"sip009-nft\",\n      functionName: \"mint\",\n      functionArgs: [standardPrincipalCV(userAddress)],\n      postConditionMode: PostConditionMode.Deny,\n      postConditions: [],\n      onFinish: data => {\n        console.log(\"onFinish:\", data);\n      },\n      onCancel: () => {\n        console.log(\"onCancel:\", \"MintNFT was canceled\");\n      }\n    });\n  }\n  if (!userSession.isUserSignedIn()) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"MintButton\",\n      onClick: () => vote(userSession),\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(MintNFT, \"P3HkHp98suz6H5U4Rb98FIRDOug=\", false, function () {\n  return [useConnect];\n});\n_c = MintNFT;\nexport default MintNFT;\nvar _c;\n$RefreshReg$(_c, \"MintNFT\");","map":{"version":3,"names":["useConnect","StacksMocknet","AnchorMode","PostConditionMode","stringUtf8CV","standardPrincipalCV","userSession","jsxDEV","_jsxDEV","MintNFT","_s","doContractCall","vote","userData","loadUserData","userAddress","profile","stxAddress","testnet","network","anchorMode","Any","contractAddress","contractName","functionName","functionArgs","postConditionMode","Deny","postConditions","onFinish","data","console","log","onCancel","isUserSignedIn","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/MintNFT.js"],"sourcesContent":["import { useConnect } from \"@stacks/connect-react\";\r\nimport { StacksMocknet } from \"@stacks/network\";\r\nimport {\r\n  AnchorMode,\r\n  PostConditionMode,\r\n  stringUtf8CV,\r\n  standardPrincipalCV,\r\n} from \"@stacks/transactions\";\r\nimport { userSession } from \"./ConnectWallet\";\r\n\r\nconst MintNFT = () => {\r\n  const { doContractCall } = useConnect();\r\n  \r\n  function vote(userSession) {\r\n    const userData = userSession.loadUserData();\r\n    const userAddress = userData.profile.stxAddress.testnet; // Use .mainnet if on mainnet\r\n\r\n    doContractCall({\r\n      network: new StacksMocknet(),\r\n      anchorMode: AnchorMode.Any,\r\n      contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\r\n      contractName: \"sip009-nft\",\r\n      functionName: \"mint\",\r\n      functionArgs: [standardPrincipalCV(userAddress)],\r\n      postConditionMode: PostConditionMode.Deny,\r\n      postConditions: [],\r\n      onFinish: (data) => {\r\n        console.log(\"onFinish:\", data);\r\n      },\r\n      onCancel: () => {\r\n        console.log(\"onCancel:\", \"MintNFT was canceled\");\r\n      },\r\n    });\r\n  }\r\n\r\n  if (!userSession.isUserSignedIn()) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"MintButton\" onClick={() => vote(userSession)}>\r\n        Mint NFT\r\n      </button>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MintNFT;\r\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,uBAAuB;AAClD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SACEC,UAAU,EACVC,iBAAiB,EACjBC,YAAY,EACZC,mBAAmB,QACd,sBAAsB;AAC7B,SAASC,WAAW,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAe,CAAC,GAAGX,UAAU,CAAC,CAAC;EAEvC,SAASY,IAAIA,CAACN,WAAW,EAAE;IACzB,MAAMO,QAAQ,GAAGP,WAAW,CAACQ,YAAY,CAAC,CAAC;IAC3C,MAAMC,WAAW,GAAGF,QAAQ,CAACG,OAAO,CAACC,UAAU,CAACC,OAAO,CAAC,CAAC;;IAEzDP,cAAc,CAAC;MACbQ,OAAO,EAAE,IAAIlB,aAAa,CAAC,CAAC;MAC5BmB,UAAU,EAAElB,UAAU,CAACmB,GAAG;MAC1BC,eAAe,EAAE,2CAA2C;MAC5DC,YAAY,EAAE,YAAY;MAC1BC,YAAY,EAAE,MAAM;MACpBC,YAAY,EAAE,CAACpB,mBAAmB,CAACU,WAAW,CAAC,CAAC;MAChDW,iBAAiB,EAAEvB,iBAAiB,CAACwB,IAAI;MACzCC,cAAc,EAAE,EAAE;MAClBC,QAAQ,EAAGC,IAAI,IAAK;QAClBC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,IAAI,CAAC;MAChC,CAAC;MACDG,QAAQ,EAAEA,CAAA,KAAM;QACdF,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,sBAAsB,CAAC;MAClD;IACF,CAAC,CAAC;EACJ;EAEA,IAAI,CAAC1B,WAAW,CAAC4B,cAAc,CAAC,CAAC,EAAE;IACjC,OAAO,IAAI;EACb;EAEA,oBACE1B,OAAA;IAAA2B,QAAA,eACE3B,OAAA;MAAQ4B,SAAS,EAAC,YAAY;MAACC,OAAO,EAAEA,CAAA,KAAMzB,IAAI,CAACN,WAAW,CAAE;MAAA6B,QAAA,EAAC;IAEjE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEN,CAAC;AAEV,CAAC;AAAC/B,EAAA,CArCID,OAAO;EAAA,QACgBT,UAAU;AAAA;AAAA0C,EAAA,GADjCjC,OAAO;AAuCb,eAAeA,OAAO;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}