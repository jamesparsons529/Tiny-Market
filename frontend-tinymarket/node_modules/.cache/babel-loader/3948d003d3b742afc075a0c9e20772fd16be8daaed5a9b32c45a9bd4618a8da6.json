{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\Mint.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useConnect } from \"@stacks/connect-react\";\nimport { StacksMocknet } from \"@stacks/network\";\nimport { AnchorMode, uintCV, callReadOnlyFunction, makeStandardSTXPostCondition, FungibleConditionCode } from \"@stacks/transactions\";\nimport { userSession } from \"./ConnectWallet\";\nimport fleekStorage from '@fleekhq/fleek-storage-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Mint = () => {\n  _s();\n  const {\n    doContractCall\n  } = useConnect();\n  const [minted, setMinted] = useState(false);\n  const [src, setSrc] = useState('');\n  function mint() {\n    const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;\n    const postConditionCode = FungibleConditionCode.LessEqual;\n    const postConditionAmount = 50 * 1000000;\n    doContractCall({\n      network: new StacksMocknet(),\n      anchorMode: AnchorMode.Any,\n      contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\n      contractName: \"sip009-nft\",\n      functionName: \"mint\",\n      functionArgs: [],\n      postConditions: [makeStandardSTXPostCondition(postConditionAddress, postConditionCode, postConditionAmount)],\n      onFinish: data => {\n        console.log(\"onFinish:\", data);\n        console.log(\"Explorer:\", `localhost:8000/txid/${data.txId}?chain=testnet`);\n        setMinted(true);\n      },\n      onCancel: () => {\n        console.log(\"onCancel:\", \"Transaction was canceled\");\n      }\n    });\n  }\n  const getNft = useCallback(async () => {\n    if (minted) {\n      const options = {\n        contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\n        contractName: \"another-ape\",\n        functionName: \"get-token-uri\",\n        network: new StacksMocknet(),\n        functionArgs: [uintCV(1)],\n        senderAddress: userSession.loadUserData().profile.stxAddress.testnet\n      };\n      const result = await callReadOnlyFunction(options);\n      console.log(result);\n      if (result.value) {\n        // using fetch to retrieve data\n        // fetch(`https://${result.value.value.data}`)\n        // .then(res => res.json())\n        // .then ((output) => {\n        //   console.log(\"Metadata:\", output)\n        //   setSrc(output.image);\n        // })\n\n        // using fleek helper to retrieve data\n        const myFile = await fleekStorage.getFileFromHash({\n          // hash can be passed in via get-token-uri as in fetch example\n          hash: 'bafkreignszpqznkmvr6aqgxilmrrq4wos7igeeex7iajfic3ic5dkocndi'\n        });\n        console.log(\"MY FILE\", myFile);\n        setSrc(myFile.image);\n      }\n    }\n  });\n  console.log(src);\n  useEffect(() => {\n    getNft();\n  }, [minted]);\n  if (!userSession.isUserSignedIn()) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"MintButton\",\n      onClick: () => mint(),\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(Mint, \"eQTkZKWoY+yUXt/uA0R5Ki+BBI0=\", false, function () {\n  return [useConnect];\n});\n_c = Mint;\nexport default Mint;\nvar _c;\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"names":["useCallback","useEffect","useState","useConnect","StacksMocknet","AnchorMode","uintCV","callReadOnlyFunction","makeStandardSTXPostCondition","FungibleConditionCode","userSession","fleekStorage","jsxDEV","_jsxDEV","Mint","_s","doContractCall","minted","setMinted","src","setSrc","mint","postConditionAddress","loadUserData","profile","stxAddress","testnet","postConditionCode","LessEqual","postConditionAmount","network","anchorMode","Any","contractAddress","contractName","functionName","functionArgs","postConditions","onFinish","data","console","log","txId","onCancel","getNft","options","senderAddress","result","value","myFile","getFileFromHash","hash","image","isUserSignedIn","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/Mint.js"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\nimport { useConnect } from \"@stacks/connect-react\";\r\nimport { StacksMocknet } from \"@stacks/network\";\r\nimport {\r\n  AnchorMode,\r\n  uintCV,\r\n  callReadOnlyFunction,\r\n  makeStandardSTXPostCondition,\r\n  FungibleConditionCode\r\n} from \"@stacks/transactions\";\r\nimport { userSession } from \"./ConnectWallet\";\r\nimport fleekStorage from '@fleekhq/fleek-storage-js';\r\n\r\nconst Mint = () => {\r\n  const { doContractCall } = useConnect();\r\n  const [minted, setMinted] = useState(false);\r\n  const [src, setSrc] = useState('');\r\n\r\n  function mint() {\r\n    const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;\r\n    const postConditionCode = FungibleConditionCode.LessEqual;\r\n    const postConditionAmount = 50 * 1000000;\r\n    \r\n    doContractCall({\r\n      network: new StacksMocknet(),\r\n      anchorMode: AnchorMode.Any,\r\n      contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\r\n      contractName: \"sip009-nft\",\r\n      functionName: \"mint\",\r\n      functionArgs: [],\r\n      postConditions: [\r\n        makeStandardSTXPostCondition(\r\n          postConditionAddress,\r\n          postConditionCode,\r\n          postConditionAmount\r\n        )\r\n      ],\r\n      onFinish: (data) => {\r\n        console.log(\"onFinish:\", data);\r\n        console.log(\"Explorer:\", `localhost:8000/txid/${data.txId}?chain=testnet`)\r\n        setMinted(true);\r\n      },\r\n      onCancel: () => {\r\n        console.log(\"onCancel:\", \"Transaction was canceled\");\r\n      },\r\n    });\r\n  }\r\n\r\n \r\n  const getNft = useCallback(async () => {\r\n    if (minted) {\r\n      const options = {\r\n          contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\r\n          contractName: \"another-ape\",\r\n          functionName: \"get-token-uri\",\r\n          network: new StacksMocknet(),\r\n          functionArgs: [uintCV(1)],\r\n          senderAddress: userSession.loadUserData().profile.stxAddress.testnet\r\n      };\r\n\r\n      const result = await callReadOnlyFunction(options);\r\n      console.log(result);\r\n      if (result.value) {\r\n        // using fetch to retrieve data\r\n        // fetch(`https://${result.value.value.data}`)\r\n        // .then(res => res.json())\r\n        // .then ((output) => {\r\n        //   console.log(\"Metadata:\", output)\r\n        //   setSrc(output.image);\r\n        // })\r\n\r\n        // using fleek helper to retrieve data\r\n        const myFile = await fleekStorage.getFileFromHash({\r\n          // hash can be passed in via get-token-uri as in fetch example\r\n          hash: 'bafkreignszpqznkmvr6aqgxilmrrq4wos7igeeex7iajfic3ic5dkocndi'\r\n        })\r\n        console.log(\"MY FILE\", myFile)\r\n        setSrc(myFile.image);\r\n      }\r\n    }\r\n  });\r\n  console.log(src);\r\n\r\n  useEffect(() => {\r\n    getNft();\r\n  }, [minted])\r\n\r\n  if (!userSession.isUserSignedIn()) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <button className=\"MintButton\" onClick={() => mint()}>\r\n        Mint NFT\r\n      </button>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mint;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}