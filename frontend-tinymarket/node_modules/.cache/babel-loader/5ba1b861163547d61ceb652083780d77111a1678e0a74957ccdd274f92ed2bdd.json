{"ast":null,"code":"import { AddressHashMode, AddressVersion, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, StacksMessageType, TransactionVersion } from './constants';\nimport { c32address } from 'c32check';\nimport { hexToBytes } from '@stacks/common';\nexport function createMessageSignature(signature) {\n  const length = hexToBytes(signature).byteLength;\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\n    throw Error('Invalid signature');\n  }\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: signature\n  };\n}\nexport function addressHashModeToVersion(hashMode, txVersion) {\n  switch (hashMode) {\n    case AddressHashMode.SerializeP2PKH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetSingleSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetSingleSig;\n        default:\n          throw new Error(`Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`);\n      }\n    case AddressHashMode.SerializeP2SH:\n    case AddressHashMode.SerializeP2WPKH:\n    case AddressHashMode.SerializeP2WSH:\n      switch (txVersion) {\n        case TransactionVersion.Mainnet:\n          return AddressVersion.MainnetMultiSig;\n        case TransactionVersion.Testnet:\n          return AddressVersion.TestnetMultiSig;\n        default:\n          throw new Error(`Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`);\n      }\n    default:\n      throw new Error(`Unexpected hashMode ${JSON.stringify(hashMode)}`);\n  }\n}\nexport function addressFromVersionHash(version, hash) {\n  return {\n    type: StacksMessageType.Address,\n    version,\n    hash160: hash\n  };\n}\nexport function addressToString(address) {\n  return c32address(address.version, address.hash160);\n}","map":{"version":3,"names":["AddressHashMode","AddressVersion","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","StacksMessageType","TransactionVersion","c32address","hexToBytes","createMessageSignature","signature","length","byteLength","Error","type","MessageSignature","data","addressHashModeToVersion","hashMode","txVersion","SerializeP2PKH","Mainnet","MainnetSingleSig","Testnet","TestnetSingleSig","JSON","stringify","SerializeP2SH","SerializeP2WPKH","SerializeP2WSH","MainnetMultiSig","TestnetMultiSig","addressFromVersionHash","version","hash","Address","hash160","addressToString","address"],"sources":["C:\\Users\\Elliott\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\transactions\\src\\common.ts"],"sourcesContent":["import {\r\n  AddressHashMode,\r\n  AddressVersion,\r\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\r\n  StacksMessageType,\r\n  TransactionVersion,\r\n} from './constants';\r\n\r\nimport { c32address } from 'c32check';\r\nimport { hexToBytes } from '@stacks/common';\r\n\r\nexport interface Address {\r\n  readonly type: StacksMessageType.Address;\r\n  readonly version: AddressVersion;\r\n  readonly hash160: string;\r\n}\r\n\r\nexport interface MessageSignature {\r\n  readonly type: StacksMessageType.MessageSignature;\r\n  data: string;\r\n}\r\n\r\nexport function createMessageSignature(signature: string): MessageSignature {\r\n  const length = hexToBytes(signature).byteLength;\r\n  if (length != RECOVERABLE_ECDSA_SIG_LENGTH_BYTES) {\r\n    throw Error('Invalid signature');\r\n  }\r\n\r\n  return {\r\n    type: StacksMessageType.MessageSignature,\r\n    data: signature,\r\n  };\r\n}\r\n\r\n/**\r\n * Translates the tx auth hash mode to the corresponding address version.\r\n * @see https://github.com/blockstack/stacks-blockchain/blob/master/sip/sip-005-blocks-and-transactions.md#transaction-authorization\r\n */\r\nexport function addressHashModeToVersion(\r\n  hashMode: AddressHashMode,\r\n  txVersion: TransactionVersion\r\n): AddressVersion {\r\n  switch (hashMode) {\r\n    case AddressHashMode.SerializeP2PKH:\r\n      switch (txVersion) {\r\n        case TransactionVersion.Mainnet:\r\n          return AddressVersion.MainnetSingleSig;\r\n        case TransactionVersion.Testnet:\r\n          return AddressVersion.TestnetSingleSig;\r\n        default:\r\n          throw new Error(\r\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\r\n          );\r\n      }\r\n    case AddressHashMode.SerializeP2SH:\r\n    case AddressHashMode.SerializeP2WPKH:\r\n    case AddressHashMode.SerializeP2WSH:\r\n      switch (txVersion) {\r\n        case TransactionVersion.Mainnet:\r\n          return AddressVersion.MainnetMultiSig;\r\n        case TransactionVersion.Testnet:\r\n          return AddressVersion.TestnetMultiSig;\r\n        default:\r\n          throw new Error(\r\n            `Unexpected txVersion ${JSON.stringify(txVersion)} for hashMode ${hashMode}`\r\n          );\r\n      }\r\n    default:\r\n      throw new Error(`Unexpected hashMode ${JSON.stringify(hashMode)}`);\r\n  }\r\n}\r\n\r\nexport function addressFromVersionHash(version: AddressVersion, hash: string): Address {\r\n  return { type: StacksMessageType.Address, version, hash160: hash };\r\n}\r\n\r\nexport function addressToString(address: Address): string {\r\n  return c32address(address.version, address.hash160);\r\n}\r\n"],"mappings":"AAAA,SACEA,eAAe,EACfC,cAAc,EACdC,kCAAkC,EAClCC,iBAAiB,EACjBC,kBAAkB,QACb,aAAa;AAEpB,SAASC,UAAU,QAAQ,UAAU;AACrC,SAASC,UAAU,QAAQ,gBAAgB;AAa3C,OAAM,SAAUC,sBAAsBA,CAACC,SAAiB;EACtD,MAAMC,MAAM,GAAGH,UAAU,CAACE,SAAS,CAAC,CAACE,UAAU;EAC/C,IAAID,MAAM,IAAIP,kCAAkC,EAAE;IAChD,MAAMS,KAAK,CAAC,mBAAmB,CAAC;;EAGlC,OAAO;IACLC,IAAI,EAAET,iBAAiB,CAACU,gBAAgB;IACxCC,IAAI,EAAEN;GACP;AACH;AAMA,OAAM,SAAUO,wBAAwBA,CACtCC,QAAyB,EACzBC,SAA6B;EAE7B,QAAQD,QAAQ;IACd,KAAKhB,eAAe,CAACkB,cAAc;MACjC,QAAQD,SAAS;QACf,KAAKb,kBAAkB,CAACe,OAAO;UAC7B,OAAOlB,cAAc,CAACmB,gBAAgB;QACxC,KAAKhB,kBAAkB,CAACiB,OAAO;UAC7B,OAAOpB,cAAc,CAACqB,gBAAgB;QACxC;UACE,MAAM,IAAIX,KAAK,CACb,wBAAwBY,IAAI,CAACC,SAAS,CAACP,SAAS,CAAC,iBAAiBD,QAAQ,EAAE,CAC7E;;IAEP,KAAKhB,eAAe,CAACyB,aAAa;IAClC,KAAKzB,eAAe,CAAC0B,eAAe;IACpC,KAAK1B,eAAe,CAAC2B,cAAc;MACjC,QAAQV,SAAS;QACf,KAAKb,kBAAkB,CAACe,OAAO;UAC7B,OAAOlB,cAAc,CAAC2B,eAAe;QACvC,KAAKxB,kBAAkB,CAACiB,OAAO;UAC7B,OAAOpB,cAAc,CAAC4B,eAAe;QACvC;UACE,MAAM,IAAIlB,KAAK,CACb,wBAAwBY,IAAI,CAACC,SAAS,CAACP,SAAS,CAAC,iBAAiBD,QAAQ,EAAE,CAC7E;;IAEP;MACE,MAAM,IAAIL,KAAK,CAAC,uBAAuBY,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,EAAE,CAAC;;AAExE;AAEA,OAAM,SAAUc,sBAAsBA,CAACC,OAAuB,EAAEC,IAAY;EAC1E,OAAO;IAAEpB,IAAI,EAAET,iBAAiB,CAAC8B,OAAO;IAAEF,OAAO;IAAEG,OAAO,EAAEF;EAAI,CAAE;AACpE;AAEA,OAAM,SAAUG,eAAeA,CAACC,OAAgB;EAC9C,OAAO/B,UAAU,CAAC+B,OAAO,CAACL,OAAO,EAAEK,OAAO,CAACF,OAAO,CAAC;AACrD"},"metadata":{},"sourceType":"module","externalDependencies":[]}