{"ast":null,"code":"import { sha256 } from '@noble/hashes/sha256';\nimport { concatBytes, utf8ToBytes } from '@stacks/common';\nimport { decode, encode, encodingLength } from './varuint';\nconst chainPrefix = '\\x17Stacks Signed Message:\\n';\nexport function hashMessage(message, prefix = chainPrefix) {\n  return sha256(encodeMessage(message, prefix));\n}\nexport function encodeMessage(message, prefix = chainPrefix) {\n  const messageBytes = typeof message == 'string' ? utf8ToBytes(message) : message;\n  const encodedLength = encode(messageBytes.length);\n  return concatBytes(utf8ToBytes(prefix), encodedLength, messageBytes);\n}\nexport function decodeMessage(encodedMessage, prefix = chainPrefix) {\n  const prefixByteLength = utf8ToBytes(prefix).byteLength;\n  const messageWithoutChainPrefix = encodedMessage.subarray(prefixByteLength);\n  const decoded = decode(messageWithoutChainPrefix);\n  const varIntLength = encodingLength(decoded);\n  return messageWithoutChainPrefix.slice(varIntLength);\n}","map":{"version":3,"names":["sha256","concatBytes","utf8ToBytes","decode","encode","encodingLength","chainPrefix","hashMessage","message","prefix","encodeMessage","messageBytes","encodedLength","length","decodeMessage","encodedMessage","prefixByteLength","byteLength","messageWithoutChainPrefix","subarray","decoded","varIntLength","slice"],"sources":["C:\\Users\\user\\Documents\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\encryption\\src\\messageSignature.ts"],"sourcesContent":["import { sha256 } from '@noble/hashes/sha256';\r\nimport { concatBytes, utf8ToBytes } from '@stacks/common';\r\nimport { decode, encode, encodingLength } from './varuint';\r\n\r\n// 'Stacks Signed Message:\\n'.length === 23\r\n// 'Stacks Signed Message:\\n'.length.toString(16) === 17\r\nconst chainPrefix = '\\x17Stacks Signed Message:\\n';\r\n\r\nexport function hashMessage(message: string, prefix: string = chainPrefix): Uint8Array {\r\n  return sha256(encodeMessage(message, prefix));\r\n}\r\n\r\nexport function encodeMessage(\r\n  message: string | Uint8Array,\r\n  prefix: string = chainPrefix\r\n): Uint8Array {\r\n  const messageBytes = typeof message == 'string' ? utf8ToBytes(message) : message;\r\n  const encodedLength = encode(messageBytes.length);\r\n  return concatBytes(utf8ToBytes(prefix), encodedLength, messageBytes);\r\n}\r\n\r\nexport function decodeMessage(\r\n  encodedMessage: Uint8Array,\r\n  prefix: string = chainPrefix\r\n): Uint8Array {\r\n  // Remove the chain prefix\r\n  const prefixByteLength = utf8ToBytes(prefix).byteLength;\r\n  const messageWithoutChainPrefix = encodedMessage.subarray(prefixByteLength);\r\n  const decoded = decode(messageWithoutChainPrefix);\r\n  const varIntLength = encodingLength(decoded);\r\n  // Remove the varint prefix\r\n  return messageWithoutChainPrefix.slice(varIntLength);\r\n}\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,WAAW,EAAEC,WAAW,QAAQ,gBAAgB;AACzD,SAASC,MAAM,EAAEC,MAAM,EAAEC,cAAc,QAAQ,WAAW;AAI1D,MAAMC,WAAW,GAAG,8BAA8B;AAElD,OAAM,SAAUC,WAAWA,CAACC,OAAe,EAAEC,MAAA,GAAiBH,WAAW;EACvE,OAAON,MAAM,CAACU,aAAa,CAACF,OAAO,EAAEC,MAAM,CAAC,CAAC;AAC/C;AAEA,OAAM,SAAUC,aAAaA,CAC3BF,OAA4B,EAC5BC,MAAA,GAAiBH,WAAW;EAE5B,MAAMK,YAAY,GAAG,OAAOH,OAAO,IAAI,QAAQ,GAAGN,WAAW,CAACM,OAAO,CAAC,GAAGA,OAAO;EAChF,MAAMI,aAAa,GAAGR,MAAM,CAACO,YAAY,CAACE,MAAM,CAAC;EACjD,OAAOZ,WAAW,CAACC,WAAW,CAACO,MAAM,CAAC,EAAEG,aAAa,EAAED,YAAY,CAAC;AACtE;AAEA,OAAM,SAAUG,aAAaA,CAC3BC,cAA0B,EAC1BN,MAAA,GAAiBH,WAAW;EAG5B,MAAMU,gBAAgB,GAAGd,WAAW,CAACO,MAAM,CAAC,CAACQ,UAAU;EACvD,MAAMC,yBAAyB,GAAGH,cAAc,CAACI,QAAQ,CAACH,gBAAgB,CAAC;EAC3E,MAAMI,OAAO,GAAGjB,MAAM,CAACe,yBAAyB,CAAC;EACjD,MAAMG,YAAY,GAAGhB,cAAc,CAACe,OAAO,CAAC;EAE5C,OAAOF,yBAAyB,CAACI,KAAK,CAACD,YAAY,CAAC;AACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}