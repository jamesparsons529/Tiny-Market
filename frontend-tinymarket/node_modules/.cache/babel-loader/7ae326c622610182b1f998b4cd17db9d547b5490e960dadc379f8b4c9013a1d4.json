{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\FetchLastTokenIdButton.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useConnect } from \"@stacks/connect-react\";\nimport { StacksMocknet } from '@stacks/network';\nimport { AnchorMode, uintCV, principalCV, callReadOnlyFunction, makeStandardSTXPostCondition, FungibleConditionCode } from \"@stacks/transactions\";\nimport { userSession } from \"./ConnectWallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FetchLastTokenIdButton = () => {\n  _s();\n  const {\n    doContractCall\n  } = useConnect();\n  function handleClick() {\n    const userAddress = userSession.loadUserData().profile.stxAddress.testnet;\n    const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;\n    const postConditionCode = FungibleConditionCode.LessEqual;\n    const postConditionAmount = 50 * 1000000;\n    doContractCall({\n      network: new StacksMocknet(),\n      anchorMode: AnchorMode.Any,\n      contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\n      contractName: \"sip009-nft\",\n      functionName: \"get-last-token-id\",\n      functionArgs: [],\n      postConditions: [makeStandardSTXPostCondition(postConditionAddress, postConditionCode, postConditionAmount)],\n      onFinish: data => {\n        var _data$result, _data$result$value;\n        console.log(\"onFinish:\", data);\n        // Assuming `data` contains the token ID as a string\n        // You may need to adjust this based on the actual structure of `data`\n        const tokenId = data === null || data === void 0 ? void 0 : (_data$result = data.result) === null || _data$result === void 0 ? void 0 : (_data$result$value = _data$result.value) === null || _data$result$value === void 0 ? void 0 : _data$result$value.value; // Adjust this line based on the actual structure of the result\n        window.alert(\"Last Token ID: \" + tokenId);\n      },\n      onCancel: () => {\n        console.log(\"onCancel:\", \"Transaction was canceled\");\n        window.alert(\"Failed to fetch last token ID\");\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => handleClick(),\n    children: \"Fetch Last Token ID\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(FetchLastTokenIdButton, \"P3HkHp98suz6H5U4Rb98FIRDOug=\", false, function () {\n  return [useConnect];\n});\n_c = FetchLastTokenIdButton;\nexport default FetchLastTokenIdButton;\nvar _c;\n$RefreshReg$(_c, \"FetchLastTokenIdButton\");","map":{"version":3,"names":["React","useConnect","StacksMocknet","AnchorMode","uintCV","principalCV","callReadOnlyFunction","makeStandardSTXPostCondition","FungibleConditionCode","userSession","jsxDEV","_jsxDEV","FetchLastTokenIdButton","_s","doContractCall","handleClick","userAddress","loadUserData","profile","stxAddress","testnet","postConditionAddress","postConditionCode","LessEqual","postConditionAmount","network","anchorMode","Any","contractAddress","contractName","functionName","functionArgs","postConditions","onFinish","data","_data$result","_data$result$value","console","log","tokenId","result","value","window","alert","onCancel","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/FetchLastTokenIdButton.js"],"sourcesContent":["import React from 'react';\r\nimport { useConnect } from \"@stacks/connect-react\";\r\n\r\nimport { StacksMocknet } from '@stacks/network';\r\nimport {\r\n  AnchorMode,\r\n  uintCV,\r\n  principalCV,\r\n  callReadOnlyFunction,\r\n  makeStandardSTXPostCondition,\r\n  FungibleConditionCode\r\n} from \"@stacks/transactions\";\r\nimport { userSession } from \"./ConnectWallet\";\r\n\r\n\r\nconst FetchLastTokenIdButton = () => {\r\n  const { doContractCall } = useConnect();\r\n\r\n  function handleClick(){\r\n    const userAddress = userSession.loadUserData().profile.stxAddress.testnet;\r\n  \r\n    const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;\r\n    const postConditionCode = FungibleConditionCode.LessEqual;\r\n    const postConditionAmount = 50 * 1000000;\r\n  \r\n    doContractCall({\r\n      network: new StacksMocknet(),\r\n      anchorMode: AnchorMode.Any,\r\n      contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\r\n      contractName: \"sip009-nft\",\r\n      functionName: \"get-last-token-id\",\r\n      functionArgs: [],\r\n      postConditions: [\r\n        makeStandardSTXPostCondition(\r\n          postConditionAddress,\r\n          postConditionCode,\r\n          postConditionAmount\r\n        )\r\n      ],\r\n      onFinish: (data) => {\r\n        console.log(\"onFinish:\", data);\r\n        // Assuming `data` contains the token ID as a string\r\n        // You may need to adjust this based on the actual structure of `data`\r\n        const tokenId = data?.result?.value?.value; // Adjust this line based on the actual structure of the result\r\n        window.alert(\"Last Token ID: \" + tokenId);\r\n      },\r\n      onCancel: () => {\r\n        console.log(\"onCancel:\", \"Transaction was canceled\");\r\n        window.alert(\"Failed to fetch last token ID\");\r\n      },\r\n    });\r\n  }\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <button onClick={() => handleClick()}>\r\n      Fetch Last Token ID\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FetchLastTokenIdButton;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,uBAAuB;AAElD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SACEC,UAAU,EACVC,MAAM,EACNC,WAAW,EACXC,oBAAoB,EACpBC,4BAA4B,EAC5BC,qBAAqB,QAChB,sBAAsB;AAC7B,SAASC,WAAW,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9C,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM;IAAEC;EAAe,CAAC,GAAGb,UAAU,CAAC,CAAC;EAEvC,SAASc,WAAWA,CAAA,EAAE;IACpB,MAAMC,WAAW,GAAGP,WAAW,CAACQ,YAAY,CAAC,CAAC,CAACC,OAAO,CAACC,UAAU,CAACC,OAAO;IAEzE,MAAMC,oBAAoB,GAAGZ,WAAW,CAACQ,YAAY,CAAC,CAAC,CAACC,OAAO,CAACC,UAAU,CAACC,OAAO;IAClF,MAAME,iBAAiB,GAAGd,qBAAqB,CAACe,SAAS;IACzD,MAAMC,mBAAmB,GAAG,EAAE,GAAG,OAAO;IAExCV,cAAc,CAAC;MACbW,OAAO,EAAE,IAAIvB,aAAa,CAAC,CAAC;MAC5BwB,UAAU,EAAEvB,UAAU,CAACwB,GAAG;MAC1BC,eAAe,EAAE,2CAA2C;MAC5DC,YAAY,EAAE,YAAY;MAC1BC,YAAY,EAAE,mBAAmB;MACjCC,YAAY,EAAE,EAAE;MAChBC,cAAc,EAAE,CACdzB,4BAA4B,CAC1Bc,oBAAoB,EACpBC,iBAAiB,EACjBE,mBACF,CAAC,CACF;MACDS,QAAQ,EAAGC,IAAI,IAAK;QAAA,IAAAC,YAAA,EAAAC,kBAAA;QAClBC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,IAAI,CAAC;QAC9B;QACA;QACA,MAAMK,OAAO,GAAGL,IAAI,aAAJA,IAAI,wBAAAC,YAAA,GAAJD,IAAI,CAAEM,MAAM,cAAAL,YAAA,wBAAAC,kBAAA,GAAZD,YAAA,CAAcM,KAAK,cAAAL,kBAAA,uBAAnBA,kBAAA,CAAqBK,KAAK,CAAC,CAAC;QAC5CC,MAAM,CAACC,KAAK,CAAC,iBAAiB,GAAGJ,OAAO,CAAC;MAC3C,CAAC;MACDK,QAAQ,EAAEA,CAAA,KAAM;QACdP,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,0BAA0B,CAAC;QACpDI,MAAM,CAACC,KAAK,CAAC,+BAA+B,CAAC;MAC/C;IACF,CAAC,CAAC;EACJ;EAKA,oBACEhC,OAAA;IAAQkC,OAAO,EAAEA,CAAA,KAAM9B,WAAW,CAAC,CAAE;IAAA+B,QAAA,EAAC;EAEtC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb,CAAC;AAACrC,EAAA,CA9CID,sBAAsB;EAAA,QACCX,UAAU;AAAA;AAAAkD,EAAA,GADjCvC,sBAAsB;AAgD5B,eAAeA,sBAAsB;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}