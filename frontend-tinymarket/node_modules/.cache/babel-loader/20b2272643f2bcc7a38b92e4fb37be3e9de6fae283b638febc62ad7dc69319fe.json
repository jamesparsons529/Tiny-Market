{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\NFTlist.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { callReadOnlyFunction } from \"@stacks/transactions\";\nimport { StacksMocknet } from \"@stacks/network\";\nimport { uintCV } from \"@stacks/transactions\";\nimport { userSession } from \"./ConnectWallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MintedNFTs = () => {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const contractAddress = \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\";\n  const contractName = \"sip009-nft\";\n  const fetchNFTs = async () => {\n    const network = new StacksMocknet();\n    const senderAddress = userSession.loadUserData().profile.stxAddress.testnet;\n    try {\n      // Fetch the last token ID\n      const options = {\n        contractAddress,\n        contractName,\n        functionName: \"get-last-token-id\",\n        network,\n        functionArgs: [],\n        senderAddress\n      };\n      const lastTokenIdResult = await callReadOnlyFunction(options);\n      const lastTokenId = parseInt(lastTokenIdResult.value.value);\n\n      // Iterate through all token IDs to get the owners\n      const mintedNfts = [];\n      for (let tokenId = 1; tokenId <= lastTokenId; tokenId++) {\n        var _ownerResult$value, _ownerResult$value$va;\n        const ownerOptions = {\n          contractAddress,\n          contractName,\n          functionName: \"get-owner\",\n          functionArgs: [uintCV(tokenId)],\n          network,\n          senderAddress\n        };\n        const ownerResult = await callReadOnlyFunction(ownerOptions);\n        const owner = ((_ownerResult$value = ownerResult.value) === null || _ownerResult$value === void 0 ? void 0 : (_ownerResult$value$va = _ownerResult$value.value) === null || _ownerResult$value$va === void 0 ? void 0 : _ownerResult$value$va.toString()) || \"Unknown\";\n        mintedNfts.push({\n          tokenId,\n          owner\n        });\n      }\n      setNfts(mintedNfts);\n    } catch (error) {\n      console.error(\"Error fetching NFTs:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchNFTs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Minted NFTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nfts.map(nft => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Token ID: \", nft.tokenId, \", Owner: \", nft.owner]\n      }, nft.tokenId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(MintedNFTs, \"WoQOxielu1Zw1vsEZjYoUHnckyk=\");\n_c = MintedNFTs;\nexport default MintedNFTs;\nvar _c;\n$RefreshReg$(_c, \"MintedNFTs\");","map":{"version":3,"names":["useEffect","useState","callReadOnlyFunction","StacksMocknet","uintCV","userSession","jsxDEV","_jsxDEV","MintedNFTs","_s","nfts","setNfts","contractAddress","contractName","fetchNFTs","network","senderAddress","loadUserData","profile","stxAddress","testnet","options","functionName","functionArgs","lastTokenIdResult","lastTokenId","parseInt","value","mintedNfts","tokenId","_ownerResult$value","_ownerResult$value$va","ownerOptions","ownerResult","owner","toString","push","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","nft","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/NFTlist.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { callReadOnlyFunction } from \"@stacks/transactions\";\r\nimport { StacksMocknet } from \"@stacks/network\";\r\nimport { uintCV } from \"@stacks/transactions\";\r\nimport { userSession } from \"./ConnectWallet\";\r\n\r\nconst MintedNFTs = () => {\r\n  const [nfts, setNfts] = useState([]);\r\n  \r\n  const contractAddress = \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\";\r\n  const contractName = \"sip009-nft\";\r\n\r\n  const fetchNFTs = async () => {\r\n    const network = new StacksMocknet();\r\n    const senderAddress = userSession.loadUserData().profile.stxAddress.testnet;\r\n    \r\n    try {\r\n      // Fetch the last token ID\r\n      const options = {\r\n        contractAddress,\r\n        contractName,\r\n        functionName: \"get-last-token-id\",\r\n        network,\r\n        functionArgs: [],\r\n        senderAddress,\r\n      };\r\n\r\n      const lastTokenIdResult = await callReadOnlyFunction(options);\r\n      const lastTokenId = parseInt(lastTokenIdResult.value.value);\r\n      \r\n      // Iterate through all token IDs to get the owners\r\n      const mintedNfts = [];\r\n      for (let tokenId = 1; tokenId <= lastTokenId; tokenId++) {\r\n        const ownerOptions = {\r\n          contractAddress,\r\n          contractName,\r\n          functionName: \"get-owner\",\r\n          functionArgs: [uintCV(tokenId)],\r\n          network,\r\n          senderAddress,\r\n        };\r\n\r\n        const ownerResult = await callReadOnlyFunction(ownerOptions);\r\n        const owner = ownerResult.value?.value?.toString() || \"Unknown\";\r\n        \r\n        mintedNfts.push({ tokenId, owner });\r\n      }\r\n\r\n      setNfts(mintedNfts);\r\n    } catch (error) {\r\n      console.error(\"Error fetching NFTs:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchNFTs();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Minted NFTs</h2>\r\n      <ul>\r\n        {nfts.map((nft) => (\r\n          <li key={nft.tokenId}>\r\n            Token ID: {nft.tokenId}, Owner: {nft.owner}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MintedNFTs;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}