{"ast":null,"code":"import 'cross-fetch/polyfill';\nconst defaultFetchOpts = {\n  referrerPolicy: 'origin',\n  headers: {\n    'x-hiro-product': 'stacksjs'\n  }\n};\nexport const getFetchOptions = () => {\n  return defaultFetchOpts;\n};\nexport const setFetchOptions = ops => {\n  return Object.assign(defaultFetchOpts, ops);\n};\nexport async function fetchWrapper(input, init) {\n  const fetchOpts = {};\n  Object.assign(fetchOpts, defaultFetchOpts, init);\n  const fetchResult = await fetch(input, fetchOpts);\n  return fetchResult;\n}\nexport function hostMatches(host, pattern) {\n  if (typeof pattern === 'string') return pattern === host;\n  return pattern.exec(host);\n}\nexport function createApiKeyMiddleware({\n  apiKey,\n  host = /(.*)api(.*)\\.stacks\\.co$/i,\n  httpHeader = 'x-api-key'\n}) {\n  return {\n    pre: context => {\n      const reqUrl = new URL(context.url);\n      if (!hostMatches(reqUrl.host, host)) return;\n      const headers = new Headers(context.init.headers);\n      headers.set(httpHeader, apiKey);\n      context.init.headers = headers;\n    }\n  };\n}\nfunction argsForCreateFetchFn(args) {\n  let fetchLib = fetchWrapper;\n  let middlewares = [];\n  if (args.length > 0 && typeof args[0] === 'function') {\n    fetchLib = args.shift();\n  }\n  if (args.length > 0) {\n    middlewares = args;\n  }\n  return {\n    fetchLib,\n    middlewares\n  };\n}\nexport function createFetchFn(...args) {\n  const {\n    fetchLib,\n    middlewares\n  } = argsForCreateFetchFn(args);\n  const fetchFn = async (url, init) => {\n    let fetchParams = {\n      url,\n      init: init ?? {}\n    };\n    for (const middleware of middlewares) {\n      if (typeof middleware.pre === 'function') {\n        const result = await Promise.resolve(middleware.pre({\n          fetch: fetchLib,\n          ...fetchParams\n        }));\n        fetchParams = result ?? fetchParams;\n      }\n    }\n    let response = await fetchLib(fetchParams.url, fetchParams.init);\n    for (const middleware of middlewares) {\n      if (typeof middleware.post === 'function') {\n        const result = await Promise.resolve(middleware.post({\n          fetch: fetchLib,\n          url: fetchParams.url,\n          init: fetchParams.init,\n          response: response?.clone() ?? response\n        }));\n        response = result ?? response;\n      }\n    }\n    return response;\n  };\n  return fetchFn;\n}","map":{"version":3,"names":["defaultFetchOpts","referrerPolicy","headers","getFetchOptions","setFetchOptions","ops","Object","assign","fetchWrapper","input","init","fetchOpts","fetchResult","fetch","hostMatches","host","pattern","exec","createApiKeyMiddleware","apiKey","httpHeader","pre","context","reqUrl","URL","url","Headers","set","argsForCreateFetchFn","args","fetchLib","middlewares","length","shift","createFetchFn","fetchFn","fetchParams","middleware","result","Promise","resolve","response","post","clone"],"sources":["C:\\Users\\Elliott\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\network\\src\\fetch.ts"],"sourcesContent":["import 'cross-fetch/polyfill';\r\n\r\n// Define a default request options and allow modification using getters, setters\r\n// Reference: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\r\nconst defaultFetchOpts: RequestInit = {\r\n  // By default referrer value will be client:origin: above reference link\r\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\r\n  referrerPolicy: 'origin', // Use origin value for referrer policy\r\n  headers: {\r\n    'x-hiro-product': 'stacksjs',\r\n  },\r\n};\r\n\r\n/**\r\n * Get fetch options\r\n * @category Network\r\n */\r\nexport const getFetchOptions = () => {\r\n  return defaultFetchOpts;\r\n};\r\n\r\n/**\r\n * Sets global fetch options for stacks.js network calls.\r\n *\r\n * @example\r\n * Users can change the default referrer as well as other options when fetch is used internally by stacks.js:\r\n * ```\r\n * setFetchOptions({ referrer: 'no-referrer', referrerPolicy: 'no-referrer', ...otherRequestOptions });\r\n * ```\r\n * After calling {@link setFetchOptions} all subsequent network calls will use the specified options above.\r\n *\r\n * @see MDN Request: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\r\n * @returns global fetch options after merging with previous options (or defaults)\r\n * @category Network\r\n * @related {@link getFetchOptions}\r\n */\r\nexport const setFetchOptions = (ops: RequestInit): RequestInit => {\r\n  return Object.assign(defaultFetchOpts, ops);\r\n};\r\n\r\n/** @internal */\r\nexport async function fetchWrapper(input: RequestInfo, init?: RequestInit): Promise<Response> {\r\n  const fetchOpts = {};\r\n  // Use the provided options in request options along with default or user provided values\r\n  Object.assign(fetchOpts, defaultFetchOpts, init);\r\n\r\n  const fetchResult = await fetch(input, fetchOpts);\r\n  return fetchResult;\r\n}\r\n\r\nexport type FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\r\n\r\nexport interface RequestContext {\r\n  fetch: FetchFn;\r\n  url: string;\r\n  init: RequestInit;\r\n}\r\n\r\nexport interface ResponseContext {\r\n  fetch: FetchFn;\r\n  url: string;\r\n  init: RequestInit;\r\n  response: Response;\r\n}\r\n\r\nexport interface FetchParams {\r\n  url: string;\r\n  init: RequestInit;\r\n}\r\n\r\nexport interface FetchMiddleware {\r\n  pre?: (context: RequestContext) => PromiseLike<FetchParams | void> | FetchParams | void;\r\n  post?: (context: ResponseContext) => Promise<Response | void> | Response | void;\r\n}\r\nexport interface ApiKeyMiddlewareOpts {\r\n  /** The middleware / API key header will only be added to requests matching this host. */\r\n  host?: RegExp | string;\r\n  /** The http header name used for specifying the API key value. */\r\n  httpHeader?: string;\r\n  /** The API key string to specify as an http header value. */\r\n  apiKey: string;\r\n}\r\n\r\n/** @internal */\r\nexport function hostMatches(host: string, pattern: string | RegExp) {\r\n  if (typeof pattern === 'string') return pattern === host;\r\n  return pattern.exec(host);\r\n}\r\n\r\n/**\r\n * Creates a new middleware from an API key.\r\n * @example\r\n * ```\r\n * const apiMiddleware = createApiKeyMiddleware(\"example_e8e044a3_41d8b0fe_3dd3988ef302\");\r\n * const fetchFn = createFetchFn(apiMiddleware);\r\n * const network = new StacksMainnet({ fetchFn });\r\n * ```\r\n * @category Network\r\n * @related {@link createFetchFn}, {@link StacksNetwork}\r\n */\r\nexport function createApiKeyMiddleware({\r\n  apiKey,\r\n  host = /(.*)api(.*)\\.stacks\\.co$/i,\r\n  httpHeader = 'x-api-key',\r\n}: ApiKeyMiddlewareOpts): FetchMiddleware {\r\n  return {\r\n    pre: context => {\r\n      const reqUrl = new URL(context.url);\r\n      if (!hostMatches(reqUrl.host, host)) return; // Skip middleware if host does not match pattern\r\n\r\n      const headers = new Headers(context.init.headers);\r\n      headers.set(httpHeader, apiKey);\r\n      context.init.headers = headers;\r\n    },\r\n  };\r\n}\r\n\r\nfunction argsForCreateFetchFn(args: any[]): { fetchLib: FetchFn; middlewares: FetchMiddleware[] } {\r\n  let fetchLib: FetchFn = fetchWrapper;\r\n  let middlewares: FetchMiddleware[] = [];\r\n  if (args.length > 0 && typeof args[0] === 'function') {\r\n    fetchLib = args.shift();\r\n  }\r\n  if (args.length > 0) {\r\n    middlewares = args; // remaining args\r\n  }\r\n  return { fetchLib, middlewares };\r\n}\r\n\r\n/**\r\n * Creates a new network fetching function, which combines an optional fetch-compatible library with optional middlware.\r\n * @example\r\n * ```\r\n * const customFetch = createFetchFn(someMiddleware)\r\n * const customFetch = createFetchFn(fetch, someMiddleware)\r\n * const customFetch = createFetchFn(fetch, middlewareA, middlewareB)\r\n * ```\r\n * @category Network\r\n */\r\nexport function createFetchFn(fetchLib: FetchFn, ...middleware: FetchMiddleware[]): FetchFn;\r\nexport function createFetchFn(...middleware: FetchMiddleware[]): FetchFn;\r\nexport function createFetchFn(...args: any[]): FetchFn {\r\n  const { fetchLib, middlewares } = argsForCreateFetchFn(args);\r\n\r\n  const fetchFn = async (url: string, init?: RequestInit | undefined): Promise<Response> => {\r\n    let fetchParams = { url, init: init ?? {} };\r\n\r\n    for (const middleware of middlewares) {\r\n      if (typeof middleware.pre === 'function') {\r\n        const result = await Promise.resolve(\r\n          middleware.pre({\r\n            fetch: fetchLib,\r\n            ...fetchParams,\r\n          })\r\n        );\r\n        fetchParams = result ?? fetchParams;\r\n      }\r\n    }\r\n\r\n    let response = await fetchLib(fetchParams.url, fetchParams.init);\r\n\r\n    for (const middleware of middlewares) {\r\n      if (typeof middleware.post === 'function') {\r\n        const result = await Promise.resolve(\r\n          middleware.post({\r\n            fetch: fetchLib,\r\n            url: fetchParams.url,\r\n            init: fetchParams.init,\r\n            response: response?.clone() ?? response,\r\n          })\r\n        );\r\n        response = result ?? response;\r\n      }\r\n    }\r\n    return response;\r\n  };\r\n  return fetchFn;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}