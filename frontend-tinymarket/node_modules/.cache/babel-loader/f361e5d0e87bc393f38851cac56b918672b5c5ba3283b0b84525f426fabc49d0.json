{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\pages\\\\FetchLastTokenIdButton.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useConnect } from \"@stacks/connect-react\";\nimport { StacksMocknet } from '@stacks/network';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FetchLastTokenIdButton = () => {\n  _s();\n  const {\n    doContractCall\n  } = useConnect();\n  const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;\n  const postConditionCode = FungibleConditionCode.LessEqual;\n  const postConditionAmount = 50 * 1000000;\n  doContractCall({\n    network: new StacksMocknet(),\n    anchorMode: AnchorMode.Any,\n    contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\n    contractName: \"sip009-nft\",\n    functionName: \"get-last-token-id\",\n    functionArgs: [],\n    postConditions: [makeStandardSTXPostCondition(postConditionAddress, postConditionCode, postConditionAmount)],\n    onFinish: data => {\n      console.log(\"onFinish:\", data);\n      windows.alert(\"Last Token ID: \" + data);\n    },\n    onCancel: () => {\n      console.log(\"onCancel:\", \"Transaction was canceled\");\n      window.alert(\"NFT mint failed\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => handleClick(),\n    children: \"Fetch Last Token ID\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(FetchLastTokenIdButton, \"P3HkHp98suz6H5U4Rb98FIRDOug=\", false, function () {\n  return [useConnect];\n});\n_c = FetchLastTokenIdButton;\nexport default FetchLastTokenIdButton;\nvar _c;\n$RefreshReg$(_c, \"FetchLastTokenIdButton\");","map":{"version":3,"names":["React","useConnect","StacksMocknet","jsxDEV","_jsxDEV","FetchLastTokenIdButton","_s","doContractCall","postConditionAddress","userSession","loadUserData","profile","stxAddress","testnet","postConditionCode","FungibleConditionCode","LessEqual","postConditionAmount","network","anchorMode","AnchorMode","Any","contractAddress","contractName","functionName","functionArgs","postConditions","makeStandardSTXPostCondition","onFinish","data","console","log","windows","alert","onCancel","window","onClick","handleClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/pages/FetchLastTokenIdButton.js"],"sourcesContent":["import React from 'react';\r\nimport { useConnect } from \"@stacks/connect-react\";\r\n\r\nimport { StacksMocknet } from '@stacks/network';\r\n\r\n\r\n\r\nconst FetchLastTokenIdButton = () => {\r\n  const { doContractCall } = useConnect();\r\n\r\n  const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;\r\n  const postConditionCode = FungibleConditionCode.LessEqual;\r\n  const postConditionAmount = 50 * 1000000;\r\n\r\n  doContractCall({\r\n    network: new StacksMocknet(),\r\n    anchorMode: AnchorMode.Any,\r\n    contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\r\n    contractName: \"sip009-nft\",\r\n    functionName: \"get-last-token-id\",\r\n    functionArgs: [],\r\n    postConditions: [\r\n      makeStandardSTXPostCondition(\r\n        postConditionAddress,\r\n        postConditionCode,\r\n        postConditionAmount\r\n      )\r\n    ],\r\n    onFinish: (data) => {\r\n      console.log(\"onFinish:\", data);\r\n      windows.alert(\"Last Token ID: \" + data);\r\n    },\r\n    onCancel: () => {\r\n      console.log(\"onCancel:\", \"Transaction was canceled\");\r\n      window.alert(\"NFT mint failed\");\r\n    },\r\n  });\r\n\r\n  return (\r\n    <button onClick={() => handleClick()}>\r\n      Fetch Last Token ID\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FetchLastTokenIdButton;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,uBAAuB;AAElD,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIhD,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM;IAAEC;EAAe,CAAC,GAAGN,UAAU,CAAC,CAAC;EAEvC,MAAMO,oBAAoB,GAAGC,WAAW,CAACC,YAAY,CAAC,CAAC,CAACC,OAAO,CAACC,UAAU,CAACC,OAAO;EAClF,MAAMC,iBAAiB,GAAGC,qBAAqB,CAACC,SAAS;EACzD,MAAMC,mBAAmB,GAAG,EAAE,GAAG,OAAO;EAExCV,cAAc,CAAC;IACbW,OAAO,EAAE,IAAIhB,aAAa,CAAC,CAAC;IAC5BiB,UAAU,EAAEC,UAAU,CAACC,GAAG;IAC1BC,eAAe,EAAE,2CAA2C;IAC5DC,YAAY,EAAE,YAAY;IAC1BC,YAAY,EAAE,mBAAmB;IACjCC,YAAY,EAAE,EAAE;IAChBC,cAAc,EAAE,CACdC,4BAA4B,CAC1BnB,oBAAoB,EACpBM,iBAAiB,EACjBG,mBACF,CAAC,CACF;IACDW,QAAQ,EAAGC,IAAI,IAAK;MAClBC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,IAAI,CAAC;MAC9BG,OAAO,CAACC,KAAK,CAAC,iBAAiB,GAAGJ,IAAI,CAAC;IACzC,CAAC;IACDK,QAAQ,EAAEA,CAAA,KAAM;MACdJ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,0BAA0B,CAAC;MACpDI,MAAM,CAACF,KAAK,CAAC,iBAAiB,CAAC;IACjC;EACF,CAAC,CAAC;EAEF,oBACE7B,OAAA;IAAQgC,OAAO,EAAEA,CAAA,KAAMC,WAAW,CAAC,CAAE;IAAAC,QAAA,EAAC;EAEtC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb,CAAC;AAACpC,EAAA,CApCID,sBAAsB;EAAA,QACCJ,UAAU;AAAA;AAAA0C,EAAA,GADjCtC,sBAAsB;AAsC5B,eAAeA,sBAAsB;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}