{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\AssetCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { UserSession } from \"@stacks/connect\";\nimport { StacksMainnet } from '@stacks/network';\nimport { callReadOnlyFunction, uintCV } from '@stacks/transactions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const userSession = new UserSession();\nfunction AssetCard() {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Retrieve the STX address from the user session\n  const stxAddress = userSession.loadUserData().profile.stxAddress.mainnet;\n\n  // Function to extract principal and contract name from asset identifier\n  const extractPrincipalAndContract = assetIdentifier => {\n    const [fullContractName] = assetIdentifier.split('::');\n    const [principal, contractName] = fullContractName.split('.');\n    return {\n      principal,\n      contractName\n    };\n  };\n\n  // Function to convert IPFS URL to HTTP URL\n  const convertIpfsUrl = ipfsUrl => {\n    return ipfsUrl.replace('ipfs://ipfs/', 'https://ipfs.io/ipfs/');\n  };\n\n  // Fetch NFTs for the user's Stacks address\n  useEffect(() => {\n    async function fetchNFTs() {\n      try {\n        setLoading(true);\n\n        // Fetch NFTs from the Hiro Stacks API\n        const response = await fetch(`https://stacks-node-api.mainnet.stacks.co/extended/v1/tokens/nft/holdings?principal=${stxAddress}`);\n        const data = await response.json();\n        console.log(data);\n\n        // Check if data exists and set it to state\n        if (data.results && data.results.length > 0) {\n          const nftsWithDetails = await Promise.all(data.results.map(async nft => {\n            const {\n              principal,\n              contractName\n            } = extractPrincipalAndContract(nft.asset_identifier);\n            const tokenId = nft.value.repr.replace('u', ''); // Extract token ID\n\n            console.log(`Principal: ${principal}`);\n            console.log(`Contract Name: ${contractName}`);\n            console.log(`Token ID: ${tokenId}`);\n\n            // Define the contract and function to call\n            const network = new StacksMainnet();\n            const tokenUriFunction = 'get-token-uri';\n            const functionArgs = [uintCV(tokenId)]; // Pass Token ID\n\n            // Call the contract function\n            try {\n              const result = await callReadOnlyFunction({\n                contractAddress: principal,\n                contractName: contractName,\n                functionName: tokenUriFunction,\n                functionArgs: functionArgs,\n                network,\n                senderAddress: stxAddress\n              });\n              console.log(result);\n              const tokenUri = result.value.value.data || '';\n              console.log(`Token URI: ${tokenUri}`);\n\n              // Convert IPFS URL to HTTP URL\n              const imageUrl = tokenUri.startsWith('ipfs://') ? convertIpfsUrl(tokenUri) : tokenUri;\n              console.log(`Image URL: ${imageUrl}`);\n              async function fetchDataFromIpfs() {\n                const ipfsUrl = imageUrl;\n                try {\n                  const response = await fetch(ipfsUrl);\n                  if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                  }\n                  const data = await response.json();\n                  console.log('Fetched data:', data);\n                  const fetchedImageUrl = data.image;\n                  const ipfsImageUrl = convertIpfsUrl(fetchedImageUrl);\n                  console.log('Fetched image URL:', fetchedImageUrl);\n                  console.log('IPFS image URL:', ipfsImageUrl);\n                  return data;\n                } catch (error) {\n                  console.error('Error fetching data from IPFS:', error);\n                  return null;\n                }\n              }\n\n              // Call the function to fetch data\n              fetchDataFromIpfs();\n              return {\n                ...nft,\n                principal,\n                contractName,\n                tokenId,\n                imageUrl\n              };\n            } catch (error) {\n              console.error('Error calling contract function:', error);\n              return {\n                ...nft,\n                principal,\n                contractName,\n                tokenId,\n                imageUrl: ''\n              };\n            }\n          }));\n          setNfts(nftsWithDetails);\n          console.log('NFTs:', nftsWithDetails);\n        } else {\n          console.log('No NFTs found for this address.');\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setLoading(false);\n      }\n    }\n    fetchNFTs();\n  }, [stxAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"home-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"NFTCard\",\n        children: /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"browse-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nft-grid\",\n            children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading NFTs...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this) : nfts.length > 0 ? nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"nft-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: nft.imageUrl,\n                alt: `NFT ${index}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: nft.asset_identifier\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"NFT Contract: \", nft.principal, \".\", nft.contractName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Token ID: \", nft.tokenId]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"nft-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"buy-now\",\n                  children: \"Buy Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 146,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"swap\",\n                  children: \"Swap\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No NFTs found for this address.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(AssetCard, \"Xu7ThsH35mRfDOV8Y1kg1IE53o0=\");\n_c = AssetCard;\nexport default AssetCard;\nvar _c;\n$RefreshReg$(_c, \"AssetCard\");","map":{"version":3,"names":["React","useState","useEffect","UserSession","StacksMainnet","callReadOnlyFunction","uintCV","jsxDEV","_jsxDEV","userSession","AssetCard","_s","nfts","setNfts","loading","setLoading","stxAddress","loadUserData","profile","mainnet","extractPrincipalAndContract","assetIdentifier","fullContractName","split","principal","contractName","convertIpfsUrl","ipfsUrl","replace","fetchNFTs","response","fetch","data","json","console","log","results","length","nftsWithDetails","Promise","all","map","nft","asset_identifier","tokenId","value","repr","network","tokenUriFunction","functionArgs","result","contractAddress","functionName","senderAddress","tokenUri","imageUrl","startsWith","fetchDataFromIpfs","ok","Error","status","fetchedImageUrl","image","ipfsImageUrl","error","children","id","className","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/AssetCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { UserSession } from \"@stacks/connect\"; \r\nimport { StacksMainnet } from '@stacks/network';\r\nimport { callReadOnlyFunction, uintCV } from '@stacks/transactions';\r\nexport const userSession = new UserSession();\r\n\r\nfunction AssetCard() {\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Retrieve the STX address from the user session\r\n  const stxAddress = userSession.loadUserData().profile.stxAddress.mainnet;\r\n\r\n  // Function to extract principal and contract name from asset identifier\r\n  const extractPrincipalAndContract = (assetIdentifier) => {\r\n    const [fullContractName] = assetIdentifier.split('::');\r\n    const [principal, contractName] = fullContractName.split('.');\r\n    return { principal, contractName };\r\n  };\r\n\r\n  // Function to convert IPFS URL to HTTP URL\r\n  const convertIpfsUrl = (ipfsUrl) => {\r\n    return ipfsUrl.replace('ipfs://ipfs/', 'https://ipfs.io/ipfs/');\r\n  };\r\n\r\n  // Fetch NFTs for the user's Stacks address\r\n  useEffect(() => {\r\n    async function fetchNFTs() {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Fetch NFTs from the Hiro Stacks API\r\n        const response = await fetch(\r\n          `https://stacks-node-api.mainnet.stacks.co/extended/v1/tokens/nft/holdings?principal=${stxAddress}`\r\n        );\r\n        const data = await response.json();\r\n\r\n        console.log(data);\r\n        \r\n        // Check if data exists and set it to state\r\n        if (data.results && data.results.length > 0) {\r\n          const nftsWithDetails = await Promise.all(data.results.map(async (nft) => {\r\n            const { principal, contractName } = extractPrincipalAndContract(nft.asset_identifier);\r\n            const tokenId = nft.value.repr.replace('u', ''); // Extract token ID\r\n\r\n            console.log(`Principal: ${principal}`);\r\n            console.log(`Contract Name: ${contractName}`);\r\n            console.log(`Token ID: ${tokenId}`);\r\n\r\n            // Define the contract and function to call\r\n            const network = new StacksMainnet();\r\n            const tokenUriFunction = 'get-token-uri';\r\n            const functionArgs = [uintCV(tokenId)]; // Pass Token ID\r\n\r\n            // Call the contract function\r\n            try {\r\n              const result = await callReadOnlyFunction({\r\n                contractAddress: principal,\r\n                contractName: contractName,\r\n                functionName: tokenUriFunction,\r\n                functionArgs: functionArgs,\r\n                network,\r\n                senderAddress: stxAddress\r\n              });\r\n              console.log(result);\r\n              const tokenUri = result.value.value.data || '';\r\n              console.log(`Token URI: ${tokenUri}`);\r\n\r\n              // Convert IPFS URL to HTTP URL\r\n              const imageUrl = tokenUri.startsWith('ipfs://') ? convertIpfsUrl(tokenUri) : tokenUri;\r\n              console.log(`Image URL: ${imageUrl}`);\r\n\r\n              async function fetchDataFromIpfs() {\r\n                const ipfsUrl = imageUrl;\r\n              \r\n                try {\r\n                  const response = await fetch(ipfsUrl);\r\n                  if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                  }\r\n                  const data = await response.json();\r\n                  console.log('Fetched data:', data);\r\n                  const fetchedImageUrl = data.image;\r\n                  const ipfsImageUrl = convertIpfsUrl(fetchedImageUrl);\r\n                  console.log('Fetched image URL:', fetchedImageUrl);\r\n                  console.log('IPFS image URL:', ipfsImageUrl);\r\n                  return data;\r\n                } catch (error) {\r\n                  console.error('Error fetching data from IPFS:', error);\r\n                  return null;\r\n                }\r\n              }\r\n              \r\n              // Call the function to fetch data\r\n              fetchDataFromIpfs();\r\n              return {\r\n                ...nft,\r\n                principal,\r\n                contractName,\r\n                tokenId,\r\n                imageUrl\r\n              };\r\n            } catch (error) {\r\n              console.error('Error calling contract function:', error);\r\n              return {\r\n                ...nft,\r\n                principal,\r\n                contractName,\r\n                tokenId,\r\n                imageUrl: ''\r\n              };\r\n            }\r\n          }));\r\n          setNfts(nftsWithDetails);\r\n          console.log('NFTs:', nftsWithDetails);\r\n        } else {\r\n          console.log('No NFTs found for this address.');\r\n        }\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching NFTs:', error);\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchNFTs();\r\n  }, [stxAddress]); \r\n\r\n  return (\r\n    <div>\r\n      <main id=\"home-container\">\r\n        <div className=\"NFTCard\">\r\n          <main className=\"browse-container\">\r\n            <div className=\"nft-grid\">\r\n              {loading ? (\r\n                <p>Loading NFTs...</p>\r\n              ) : nfts.length > 0 ? (\r\n                nfts.map((nft, index) => (\r\n                  <div className=\"nft-item\" key={index}>\r\n                    <img src={nft.imageUrl} alt={`NFT ${index}`} />\r\n                    <h2>{nft.asset_identifier}</h2>\r\n                    <p>NFT Contract: {nft.principal}.{nft.contractName}</p>\r\n                    <p>Token ID: {nft.tokenId}</p>\r\n                    <div className=\"nft-buttons\">\r\n                      <button className=\"buy-now\">Buy Now</button>\r\n                      <button className=\"swap\">Swap</button>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <p>No NFTs found for this address.</p>\r\n              )}\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default AssetCard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}