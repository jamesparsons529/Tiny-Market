{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\Whitelist.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useConnect } from \"@stacks/connect-react\";\nimport { StacksMocknet } from \"@stacks/network\";\nimport { AnchorMode, makeStandardSTXPostCondition, FungibleConditionCode } from \"@stacks/transactions\";\nimport { userSession } from \"./ConnectWallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Whitelist = () => {\n  _s();\n  const {\n    doContractCall\n  } = useConnect();\n  function isWhitelisted() {\n    const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;\n    const postConditionCode = FungibleConditionCode.LessEqual;\n    const postConditionAmount = 50 * 1000000;\n    const contractName = \"sip009-nft\";\n    const isWhiltelisted = true;\n    doContractCall({\n      network: new StacksMocknet(),\n      anchorMode: AnchorMode.Any,\n      contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\n      contractName: \"tiny-market\",\n      functionName: \"mint\",\n      functionArgs: [contractName, isWhiltelisted],\n      postConditions: [makeStandardSTXPostCondition(postConditionAddress, postConditionCode, postConditionAmount)],\n      onFinish: data => {\n        window.alert(\"sip009-nft Whitelisted Successfully\");\n      },\n      onCancel: () => {\n        console.log(\"onCancel:\", \"Transaction was canceled\");\n        window.alert(\"NFT whitelist failed\");\n      }\n    });\n  }\n  if (!userSession.isUserSignedIn()) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"MintButton\",\n      onClick: () => isWhitelisted(),\n      children: \"Whitelist sip009-nft\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Whitelist, \"P3HkHp98suz6H5U4Rb98FIRDOug=\", false, function () {\n  return [useConnect];\n});\n_c = Whitelist;\nexport default Whitelist;\nvar _c;\n$RefreshReg$(_c, \"Whitelist\");","map":{"version":3,"names":["useCallback","useEffect","useState","useConnect","StacksMocknet","AnchorMode","makeStandardSTXPostCondition","FungibleConditionCode","userSession","jsxDEV","_jsxDEV","Whitelist","_s","doContractCall","isWhitelisted","postConditionAddress","loadUserData","profile","stxAddress","testnet","postConditionCode","LessEqual","postConditionAmount","contractName","isWhiltelisted","network","anchorMode","Any","contractAddress","functionName","functionArgs","postConditions","onFinish","data","window","alert","onCancel","console","log","isUserSignedIn","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/Whitelist.js"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\nimport { useConnect } from \"@stacks/connect-react\";\r\nimport { StacksMocknet } from \"@stacks/network\";\r\nimport {\r\n  AnchorMode,\r\n  makeStandardSTXPostCondition,\r\n  FungibleConditionCode\r\n} from \"@stacks/transactions\";\r\nimport { userSession } from \"./ConnectWallet\";\r\n\r\nconst Whitelist = () => {\r\n  const { doContractCall } = useConnect();\r\n\r\n  function isWhitelisted() {\r\n    const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;\r\n    const postConditionCode = FungibleConditionCode.LessEqual;\r\n    const postConditionAmount = 50 * 1000000;\r\n\r\n    const contractName = \"sip009-nft\";\r\n    const isWhiltelisted = true;\r\n\r\n    doContractCall({\r\n      network: new StacksMocknet(),\r\n      anchorMode: AnchorMode.Any,\r\n      contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\r\n      contractName: \"tiny-market\",\r\n      functionName: \"mint\",\r\n      functionArgs: [\r\n        contractName,\r\n        isWhiltelisted\r\n      ],\r\n      postConditions: [\r\n        makeStandardSTXPostCondition(\r\n          postConditionAddress,\r\n          postConditionCode,\r\n          postConditionAmount\r\n        )\r\n      ],\r\n      onFinish: (data) => {\r\n        window.alert(\"sip009-nft Whitelisted Successfully\");\r\n      },\r\n      onCancel: () => {\r\n        console.log(\"onCancel:\", \"Transaction was canceled\");\r\n        window.alert(\"NFT whitelist failed\");\r\n      },\r\n    });\r\n    \r\n  }\r\n\r\n\r\n  if (!userSession.isUserSignedIn()) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n        <button className=\"MintButton\" onClick={() => isWhitelisted()}>\r\n            Whitelist sip009-nft \r\n        </button>\r\n    </div>   \r\n  ); \r\n};\r\n\r\nexport default Whitelist;\r\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACxD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SACEC,UAAU,EACVC,4BAA4B,EAC5BC,qBAAqB,QAChB,sBAAsB;AAC7B,SAASC,WAAW,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAe,CAAC,GAAGV,UAAU,CAAC,CAAC;EAEvC,SAASW,aAAaA,CAAA,EAAG;IACvB,MAAMC,oBAAoB,GAAGP,WAAW,CAACQ,YAAY,CAAC,CAAC,CAACC,OAAO,CAACC,UAAU,CAACC,OAAO;IAClF,MAAMC,iBAAiB,GAAGb,qBAAqB,CAACc,SAAS;IACzD,MAAMC,mBAAmB,GAAG,EAAE,GAAG,OAAO;IAExC,MAAMC,YAAY,GAAG,YAAY;IACjC,MAAMC,cAAc,GAAG,IAAI;IAE3BX,cAAc,CAAC;MACbY,OAAO,EAAE,IAAIrB,aAAa,CAAC,CAAC;MAC5BsB,UAAU,EAAErB,UAAU,CAACsB,GAAG;MAC1BC,eAAe,EAAE,2CAA2C;MAC5DL,YAAY,EAAE,aAAa;MAC3BM,YAAY,EAAE,MAAM;MACpBC,YAAY,EAAE,CACZP,YAAY,EACZC,cAAc,CACf;MACDO,cAAc,EAAE,CACdzB,4BAA4B,CAC1BS,oBAAoB,EACpBK,iBAAiB,EACjBE,mBACF,CAAC,CACF;MACDU,QAAQ,EAAGC,IAAI,IAAK;QAClBC,MAAM,CAACC,KAAK,CAAC,qCAAqC,CAAC;MACrD,CAAC;MACDC,QAAQ,EAAEA,CAAA,KAAM;QACdC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,0BAA0B,CAAC;QACpDJ,MAAM,CAACC,KAAK,CAAC,sBAAsB,CAAC;MACtC;IACF,CAAC,CAAC;EAEJ;EAGA,IAAI,CAAC3B,WAAW,CAAC+B,cAAc,CAAC,CAAC,EAAE;IACjC,OAAO,IAAI;EACb;EAEA,oBACE7B,OAAA;IAAA8B,QAAA,eACI9B,OAAA;MAAQ+B,SAAS,EAAC,YAAY;MAACC,OAAO,EAAEA,CAAA,KAAM5B,aAAa,CAAC,CAAE;MAAA0B,QAAA,EAAC;IAE/D;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEV,CAAC;AAAClC,EAAA,CAnDID,SAAS;EAAA,QACcR,UAAU;AAAA;AAAA4C,EAAA,GADjCpC,SAAS;AAqDf,eAAeA,SAAS;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}