{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\pages\\\\FetchLastTokenIdButton.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useConnect } from \"@stacks/connect-react\";\nimport { StacksMocknet } from '@stacks/network';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FetchLastTokenIdButton = () => {\n  _s();\n  const {\n    doContractCall\n  } = useConnect();\n  doContractCall({\n    network: new StacksMocknet(),\n    anchorMode: AnchorMode.Any,\n    contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\n    contractName: \"sip009-nft\",\n    functionName: \"get-last-token-id\",\n    functionArgs: [],\n    postConditions: [makeStandardSTXPostCondition(postConditionAddress, postConditionCode, postConditionAmount)],\n    onFinish: data => {\n      window.alert(\"NFT Minted Successfully\");\n      console.log(\"onFinish:\", data);\n      console.log(\"Explorer:\", `localhost:8000/txid/${data.txId}?chain=testnet`);\n      setMinted(true);\n      onMint(); // Notify the parent about the successful mint\n    },\n\n    onCancel: () => {\n      console.log(\"onCancel:\", \"Transaction was canceled\");\n      window.alert(\"NFT mint failed\");\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => handleClick(),\n    children: \"Fetch Last Token ID\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(FetchLastTokenIdButton, \"P3HkHp98suz6H5U4Rb98FIRDOug=\", false, function () {\n  return [useConnect];\n});\n_c = FetchLastTokenIdButton;\nexport default FetchLastTokenIdButton;\nvar _c;\n$RefreshReg$(_c, \"FetchLastTokenIdButton\");","map":{"version":3,"names":["React","useConnect","StacksMocknet","jsxDEV","_jsxDEV","FetchLastTokenIdButton","_s","doContractCall","network","anchorMode","AnchorMode","Any","contractAddress","contractName","functionName","functionArgs","postConditions","makeStandardSTXPostCondition","postConditionAddress","postConditionCode","postConditionAmount","onFinish","data","window","alert","console","log","txId","setMinted","onMint","onCancel","onClick","handleClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/pages/FetchLastTokenIdButton.js"],"sourcesContent":["import React from 'react';\r\nimport { useConnect } from \"@stacks/connect-react\";\r\n\r\nimport { StacksMocknet } from '@stacks/network';\r\n\r\n\r\n\r\nconst FetchLastTokenIdButton = () => {\r\n  const { doContractCall } = useConnect();\r\n\r\n  doContractCall({\r\n    network: new StacksMocknet(),\r\n    anchorMode: AnchorMode.Any,\r\n    contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\r\n    contractName: \"sip009-nft\",\r\n    functionName: \"get-last-token-id\",\r\n    functionArgs: [],\r\n    postConditions: [\r\n      makeStandardSTXPostCondition(\r\n        postConditionAddress,\r\n        postConditionCode,\r\n        postConditionAmount\r\n      )\r\n    ],\r\n    onFinish: (data) => {\r\n      window.alert(\"NFT Minted Successfully\");\r\n      console.log(\"onFinish:\", data);\r\n      console.log(\"Explorer:\", `localhost:8000/txid/${data.txId}?chain=testnet`);\r\n      setMinted(true);\r\n      onMint(); // Notify the parent about the successful mint\r\n    },\r\n    onCancel: () => {\r\n      console.log(\"onCancel:\", \"Transaction was canceled\");\r\n      window.alert(\"NFT mint failed\");\r\n    },\r\n  });\r\n\r\n  return (\r\n    <button onClick={() => handleClick()}>\r\n      Fetch Last Token ID\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FetchLastTokenIdButton;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,uBAAuB;AAElD,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAIhD,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM;IAAEC;EAAe,CAAC,GAAGN,UAAU,CAAC,CAAC;EAEvCM,cAAc,CAAC;IACbC,OAAO,EAAE,IAAIN,aAAa,CAAC,CAAC;IAC5BO,UAAU,EAAEC,UAAU,CAACC,GAAG;IAC1BC,eAAe,EAAE,2CAA2C;IAC5DC,YAAY,EAAE,YAAY;IAC1BC,YAAY,EAAE,mBAAmB;IACjCC,YAAY,EAAE,EAAE;IAChBC,cAAc,EAAE,CACdC,4BAA4B,CAC1BC,oBAAoB,EACpBC,iBAAiB,EACjBC,mBACF,CAAC,CACF;IACDC,QAAQ,EAAGC,IAAI,IAAK;MAClBC,MAAM,CAACC,KAAK,CAAC,yBAAyB,CAAC;MACvCC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,IAAI,CAAC;MAC9BG,OAAO,CAACC,GAAG,CAAC,WAAW,EAAG,uBAAsBJ,IAAI,CAACK,IAAK,gBAAe,CAAC;MAC1EC,SAAS,CAAC,IAAI,CAAC;MACfC,MAAM,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;;IACDC,QAAQ,EAAEA,CAAA,KAAM;MACdL,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,0BAA0B,CAAC;MACpDH,MAAM,CAACC,KAAK,CAAC,iBAAiB,CAAC;IACjC;EACF,CAAC,CAAC;EAEF,oBACEpB,OAAA;IAAQ2B,OAAO,EAAEA,CAAA,KAAMC,WAAW,CAAC,CAAE;IAAAC,QAAA,EAAC;EAEtC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb,CAAC;AAAC/B,EAAA,CAnCID,sBAAsB;EAAA,QACCJ,UAAU;AAAA;AAAAqC,EAAA,GADjCjC,sBAAsB;AAqC5B,eAAeA,sBAAsB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}