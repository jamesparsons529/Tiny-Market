{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\NFTlist.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { callReadOnlyFunction } from \"@stacks/transactions\";\nimport { StacksMocknet } from \"@stacks/network\";\nimport { uintCV } from \"@stacks/transactions\";\nimport { userSession } from \"./ConnectWallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MintedNFTs = ({\n  refresh\n}) => {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const contractAddress = \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\";\n  const contractName = \"sip009-nft\";\n  const fetchNFTs = async () => {\n    setLoading(true);\n    setError(null);\n    const network = new StacksMocknet();\n    const senderAddress = userSession.loadUserData().profile.stxAddress.testnet;\n    try {\n      // Fetch the last token ID\n      console.log(\"Fetching last token ID...\");\n      const options = {\n        contractAddress,\n        contractName,\n        functionName: \"get-last-token-id\",\n        network,\n        functionArgs: [],\n        senderAddress\n      };\n      const lastTokenIdResult = await callReadOnlyFunction(options);\n      if (lastTokenIdResult && lastTokenIdResult.value) {\n        const lastTokenId = parseInt(lastTokenIdResult.value.value);\n        console.log(`Last token ID fetched: ${lastTokenId}`);\n        const mintedNfts = [];\n        // Iterate through all token IDs starting from 1\n        for (let tokenId = 1; tokenId <= lastTokenId; tokenId++) {\n          var _ownerResult$value, _ownerResult$value$va;\n          console.log(`Fetching owner for token ID: ${tokenId}`);\n          const ownerOptions = {\n            contractAddress,\n            contractName,\n            functionName: \"get-owner\",\n            functionArgs: [uintCV(tokenId)],\n            network,\n            senderAddress\n          };\n          const ownerResult = await callReadOnlyFunction(ownerOptions);\n          const owner = ((_ownerResult$value = ownerResult.value) === null || _ownerResult$value === void 0 ? void 0 : (_ownerResult$value$va = _ownerResult$value.value) === null || _ownerResult$value$va === void 0 ? void 0 : _ownerResult$value$va.toString()) || \"Unknown\";\n          mintedNfts.push({\n            tokenId,\n            owner\n          });\n        }\n        setNfts(mintedNfts);\n        console.log(\"NFTs fetched successfully:\", mintedNfts);\n      } else {\n        console.error(\"Failed to fetch last token ID\");\n        setError(\"Failed to fetch last token ID\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching NFTs:\", error);\n      setError(\"Error fetching NFTs\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    console.log(\"Fetching NFTs...\");\n    fetchNFTs();\n  }, [refresh]); // Re-fetch when refresh changes\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading NFTs...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Minted NFTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), nfts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No NFTs have been minted yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: nfts.map(nft => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Token ID: \", nft.tokenId, \", Owner: \", nft.owner]\n      }, nft.tokenId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(MintedNFTs, \"TVUFV2owirdjkIWixXXHgvabwkE=\");\n_c = MintedNFTs;\nexport default MintedNFTs;\nvar _c;\n$RefreshReg$(_c, \"MintedNFTs\");","map":{"version":3,"names":["useEffect","useState","callReadOnlyFunction","StacksMocknet","uintCV","userSession","jsxDEV","_jsxDEV","MintedNFTs","refresh","_s","nfts","setNfts","error","setError","loading","setLoading","contractAddress","contractName","fetchNFTs","network","senderAddress","loadUserData","profile","stxAddress","testnet","console","log","options","functionName","functionArgs","lastTokenIdResult","value","lastTokenId","parseInt","mintedNfts","tokenId","_ownerResult$value","_ownerResult$value$va","ownerOptions","ownerResult","owner","toString","push","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","nft","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/NFTlist.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { callReadOnlyFunction } from \"@stacks/transactions\";\r\nimport { StacksMocknet } from \"@stacks/network\";\r\nimport { uintCV } from \"@stacks/transactions\";\r\nimport { userSession } from \"./ConnectWallet\";\r\n\r\nconst MintedNFTs = ({ refresh }) => {\r\n  const [nfts, setNfts] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  const contractAddress = \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\";\r\n  const contractName = \"sip009-nft\";\r\n\r\n  const fetchNFTs = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    const network = new StacksMocknet();\r\n    const senderAddress = userSession.loadUserData().profile.stxAddress.testnet;\r\n\r\n    try {\r\n      // Fetch the last token ID\r\n      console.log(\"Fetching last token ID...\");\r\n      const options = {\r\n        contractAddress,\r\n        contractName,\r\n        functionName: \"get-last-token-id\",\r\n        network,\r\n        functionArgs: [],\r\n        senderAddress,\r\n      };\r\n\r\n      const lastTokenIdResult = await callReadOnlyFunction(options);\r\n      if (lastTokenIdResult && lastTokenIdResult.value) {\r\n        const lastTokenId = parseInt(lastTokenIdResult.value.value);\r\n        console.log(`Last token ID fetched: ${lastTokenId}`);\r\n\r\n        const mintedNfts = [];\r\n        // Iterate through all token IDs starting from 1\r\n        for (let tokenId = 1; tokenId <= lastTokenId; tokenId++) {\r\n          console.log(`Fetching owner for token ID: ${tokenId}`);\r\n          const ownerOptions = {\r\n            contractAddress,\r\n            contractName,\r\n            functionName: \"get-owner\",\r\n            functionArgs: [uintCV(tokenId)],\r\n            network,\r\n            senderAddress,\r\n          };\r\n\r\n          const ownerResult = await callReadOnlyFunction(ownerOptions);\r\n          const owner = ownerResult.value?.value?.toString() || \"Unknown\";\r\n          \r\n          mintedNfts.push({ tokenId, owner });\r\n        }\r\n\r\n        setNfts(mintedNfts);\r\n        console.log(\"NFTs fetched successfully:\", mintedNfts);\r\n      } else {\r\n        console.error(\"Failed to fetch last token ID\");\r\n        setError(\"Failed to fetch last token ID\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching NFTs:\", error);\r\n      setError(\"Error fetching NFTs\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"Fetching NFTs...\");\r\n    fetchNFTs();\r\n  }, [refresh]); // Re-fetch when refresh changes\r\n\r\n  if (loading) {\r\n    return <p>Loading NFTs...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Minted NFTs</h2>\r\n      {nfts.length === 0 ? (\r\n        <p>No NFTs have been minted yet.</p>\r\n      ) : (\r\n        <ul>\r\n          {nfts.map((nft) => (\r\n            <li key={nft.tokenId}>\r\n              Token ID: {nft.tokenId}, Owner: {nft.owner}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MintedNFTs;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}