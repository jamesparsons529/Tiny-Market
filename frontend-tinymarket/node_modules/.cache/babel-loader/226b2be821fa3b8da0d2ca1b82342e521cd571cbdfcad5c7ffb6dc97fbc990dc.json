{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\Mint.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useConnect } from \"@stacks/connect-react\";\nimport { StacksTestnet } from \"@stacks/network\";\nimport { AnchorMode, principalCV, PostConditionMode } from \"@stacks/transactions\";\nimport { userSession } from \"./ConnectWallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Mint = () => {\n  _s();\n  const {\n    doContractCall\n  } = useConnect();\n  const [minted, setMinted] = useState(false);\n  const userAddress = userSession.loadUserData().profile.stxAddress.testnet;\n  function mint() {\n    doContractCall({\n      network: new StacksTestnet(),\n      anchorMode: AnchorMode.Any,\n      contractAddress: \"ST1NWPSRC02Z9A20RHSBGDEDG9H8CHS6ENJ2N3TTH\",\n      contractName: \"sip009-nft\",\n      functionName: \"mint\",\n      functionArgs: [principalCV(userAddress)],\n      postConditionMode: PostConditionMode.Allow,\n      onFinish: data => {\n        window.alert(\"NFT Minted Successfully\");\n        console.log(\"onFinish:\", data);\n        console.log(\"Transaction ID:\", data.txId);\n        setMinted(true);\n      },\n      onCancel: () => {\n        console.log(\"onCancel:\", \"Transaction was canceled\");\n        window.alert(\"NFT mint failed\");\n      }\n    });\n  }\n  if (!userSession.isUserSignedIn()) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Mint Another Ape!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"MintButton\",\n        onClick: () => mint(),\n        children: \"Mint Ape NFT \\uD83D\\uDC35\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), minted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"NFT Minted Successfully!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Mint, \"KUJuZdonkpJrv5EVlev/9R2kLbk=\", false, function () {\n  return [useConnect];\n});\n_c = Mint;\nexport default Mint;\nvar _c;\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"names":["useState","useConnect","StacksTestnet","AnchorMode","principalCV","PostConditionMode","userSession","jsxDEV","_jsxDEV","Mint","_s","doContractCall","minted","setMinted","userAddress","loadUserData","profile","stxAddress","testnet","mint","network","anchorMode","Any","contractAddress","contractName","functionName","functionArgs","postConditionMode","Allow","onFinish","data","window","alert","console","log","txId","onCancel","isUserSignedIn","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/Mint.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { useConnect } from \"@stacks/connect-react\";\r\nimport { StacksTestnet } from \"@stacks/network\";\r\nimport {\r\n  AnchorMode,\r\n  principalCV,\r\n  PostConditionMode\r\n} from \"@stacks/transactions\";\r\nimport { userSession } from \"./ConnectWallet\";\r\n\r\nconst Mint = () => {\r\n  const { doContractCall } = useConnect();\r\n  const [minted, setMinted] = useState(false);\r\n\r\n  const userAddress = userSession.loadUserData().profile.stxAddress.testnet;\r\n\r\n  function mint() {\r\n    doContractCall({\r\n      network: new StacksTestnet(),\r\n      anchorMode: AnchorMode.Any,\r\n      contractAddress: \"ST1NWPSRC02Z9A20RHSBGDEDG9H8CHS6ENJ2N3TTH\", \r\n      contractName: \"sip009-nft\", \r\n      functionName: \"mint\",\r\n      functionArgs: [\r\n        principalCV(userAddress),\r\n      ],\r\n      postConditionMode: PostConditionMode.Allow,\r\n      onFinish: (data) => {\r\n        window.alert(\"NFT Minted Successfully\");\r\n        console.log(\"onFinish:\", data);\r\n        console.log(\"Transaction ID:\", data.txId);\r\n        setMinted(true);  \r\n      },\r\n      onCancel: () => {\r\n        console.log(\"onCancel:\", \"Transaction was canceled\");\r\n        window.alert(\"NFT mint failed\");\r\n      },\r\n    });\r\n  }\r\n\r\n  if (!userSession.isUserSignedIn()) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>Mint Another Ape!</p>\r\n        <button className=\"MintButton\" onClick={() => mint()}>\r\n          Mint Ape NFT üêµ\r\n        </button>\r\n      </div>\r\n      {minted && (\r\n        <div>\r\n          <p>NFT Minted Successfully!</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Mint;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SACEC,UAAU,EACVC,WAAW,EACXC,iBAAiB,QACZ,sBAAsB;AAC7B,SAASC,WAAW,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM;IAAEC;EAAe,CAAC,GAAGV,UAAU,CAAC,CAAC;EACvC,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMc,WAAW,GAAGR,WAAW,CAACS,YAAY,CAAC,CAAC,CAACC,OAAO,CAACC,UAAU,CAACC,OAAO;EAEzE,SAASC,IAAIA,CAAA,EAAG;IACdR,cAAc,CAAC;MACbS,OAAO,EAAE,IAAIlB,aAAa,CAAC,CAAC;MAC5BmB,UAAU,EAAElB,UAAU,CAACmB,GAAG;MAC1BC,eAAe,EAAE,2CAA2C;MAC5DC,YAAY,EAAE,YAAY;MAC1BC,YAAY,EAAE,MAAM;MACpBC,YAAY,EAAE,CACZtB,WAAW,CAACU,WAAW,CAAC,CACzB;MACDa,iBAAiB,EAAEtB,iBAAiB,CAACuB,KAAK;MAC1CC,QAAQ,EAAGC,IAAI,IAAK;QAClBC,MAAM,CAACC,KAAK,CAAC,yBAAyB,CAAC;QACvCC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,IAAI,CAAC;QAC9BG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,IAAI,CAACK,IAAI,CAAC;QACzCtB,SAAS,CAAC,IAAI,CAAC;MACjB,CAAC;MACDuB,QAAQ,EAAEA,CAAA,KAAM;QACdH,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,0BAA0B,CAAC;QACpDH,MAAM,CAACC,KAAK,CAAC,iBAAiB,CAAC;MACjC;IACF,CAAC,CAAC;EACJ;EAEA,IAAI,CAAC1B,WAAW,CAAC+B,cAAc,CAAC,CAAC,EAAE;IACjC,OAAO,IAAI;EACb;EAEA,oBACE7B,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,gBACE9B,OAAA;QAAA8B,QAAA,EAAG;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACxBlC,OAAA;QAAQmC,SAAS,EAAC,YAAY;QAACC,OAAO,EAAEA,CAAA,KAAMzB,IAAI,CAAC,CAAE;QAAAmB,QAAA,EAAC;MAEtD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EACL9B,MAAM,iBACLJ,OAAA;MAAA8B,QAAA,eACE9B,OAAA;QAAA8B,QAAA,EAAG;MAAwB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChC,EAAA,CAjDID,IAAI;EAAA,QACmBR,UAAU;AAAA;AAAA4C,EAAA,GADjCpC,IAAI;AAmDV,eAAeA,IAAI;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}