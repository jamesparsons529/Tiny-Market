{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.async = global.async || {});\n})(this, function (exports) {\n  'use strict';\n\n  function slice(arrayLike, start) {\n    start = start | 0;\n    var newLen = Math.max(arrayLike.length - start, 0);\n    var newArr = Array(newLen);\n    for (var idx = 0; idx < newLen; idx++) {\n      newArr[idx] = arrayLike[start + idx];\n    }\n    return newArr;\n  }\n\n  /**\r\n   * Creates a continuation function with some arguments already applied.\r\n   *\r\n   * Useful as a shorthand when combined with other control flow functions. Any\r\n   * arguments passed to the returned function are added to the arguments\r\n   * originally passed to apply.\r\n   *\r\n   * @name apply\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {Function} fn - The function you want to eventually apply all\r\n   * arguments to. Invokes with (arguments...).\r\n   * @param {...*} arguments... - Any number of arguments to automatically apply\r\n   * when the continuation is called.\r\n   * @returns {Function} the partially-applied function\r\n   * @example\r\n   *\r\n   * // using apply\r\n   * async.parallel([\r\n   *     async.apply(fs.writeFile, 'testfile1', 'test1'),\r\n   *     async.apply(fs.writeFile, 'testfile2', 'test2')\r\n   * ]);\r\n   *\r\n   *\r\n   * // the same process without using apply\r\n   * async.parallel([\r\n   *     function(callback) {\r\n   *         fs.writeFile('testfile1', 'test1', callback);\r\n   *     },\r\n   *     function(callback) {\r\n   *         fs.writeFile('testfile2', 'test2', callback);\r\n   *     }\r\n   * ]);\r\n   *\r\n   * // It's possible to pass any number of additional arguments when calling the\r\n   * // continuation:\r\n   *\r\n   * node> var fn = async.apply(sys.puts, 'one');\r\n   * node> fn('two', 'three');\r\n   * one\r\n   * two\r\n   * three\r\n   */\n  var apply = function (fn /*, ...args*/) {\n    var args = slice(arguments, 1);\n    return function /*callArgs*/\n    () {\n      var callArgs = slice(arguments);\n      return fn.apply(null, args.concat(callArgs));\n    };\n  };\n  var initialParams = function (fn) {\n    return function /*...args, callback*/\n    () {\n      var args = slice(arguments);\n      var callback = args.pop();\n      fn.call(this, args, callback);\n    };\n  };\n\n  /**\r\n   * Checks if `value` is the\r\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n   * @example\r\n   *\r\n   * _.isObject({});\r\n   * // => true\r\n   *\r\n   * _.isObject([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isObject(_.noop);\r\n   * // => true\r\n   *\r\n   * _.isObject(null);\r\n   * // => false\r\n   */\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n  }\n  var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n  var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n  function fallback(fn) {\n    setTimeout(fn, 0);\n  }\n  function wrap(defer) {\n    return function (fn /*, ...args*/) {\n      var args = slice(arguments, 1);\n      defer(function () {\n        fn.apply(null, args);\n      });\n    };\n  }\n  var _defer;\n  if (hasSetImmediate) {\n    _defer = setImmediate;\n  } else if (hasNextTick) {\n    _defer = process.nextTick;\n  } else {\n    _defer = fallback;\n  }\n  var setImmediate$1 = wrap(_defer);\n\n  /**\r\n   * Take a sync function and make it async, passing its return value to a\r\n   * callback. This is useful for plugging sync functions into a waterfall,\r\n   * series, or other async functions. Any arguments passed to the generated\r\n   * function will be passed to the wrapped function (except for the final\r\n   * callback argument). Errors thrown will be passed to the callback.\r\n   *\r\n   * If the function passed to `asyncify` returns a Promise, that promises's\r\n   * resolved/rejected state will be used to call the callback, rather than simply\r\n   * the synchronous return value.\r\n   *\r\n   * This also means you can asyncify ES2017 `async` functions.\r\n   *\r\n   * @name asyncify\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @alias wrapSync\r\n   * @category Util\r\n   * @param {Function} func - The synchronous function, or Promise-returning\r\n   * function to convert to an {@link AsyncFunction}.\r\n   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\r\n   * invoked with `(args..., callback)`.\r\n   * @example\r\n   *\r\n   * // passing a regular synchronous function\r\n   * async.waterfall([\r\n   *     async.apply(fs.readFile, filename, \"utf8\"),\r\n   *     async.asyncify(JSON.parse),\r\n   *     function (data, next) {\r\n   *         // data is the result of parsing the text.\r\n   *         // If there was a parsing error, it would have been caught.\r\n   *     }\r\n   * ], callback);\r\n   *\r\n   * // passing a function returning a promise\r\n   * async.waterfall([\r\n   *     async.apply(fs.readFile, filename, \"utf8\"),\r\n   *     async.asyncify(function (contents) {\r\n   *         return db.model.create(contents);\r\n   *     }),\r\n   *     function (model, next) {\r\n   *         // `model` is the instantiated model object.\r\n   *         // If there was an error, this function would be skipped.\r\n   *     }\r\n   * ], callback);\r\n   *\r\n   * // es2017 example, though `asyncify` is not needed if your JS environment\r\n   * // supports async functions out of the box\r\n   * var q = async.queue(async.asyncify(async function(file) {\r\n   *     var intermediateStep = await processFile(file);\r\n   *     return await somePromise(intermediateStep)\r\n   * }));\r\n   *\r\n   * q.push(files);\r\n   */\n  function asyncify(func) {\n    return initialParams(function (args, callback) {\n      var result;\n      try {\n        result = func.apply(this, args);\n      } catch (e) {\n        return callback(e);\n      }\n      // if result is Promise object\n      if (isObject(result) && typeof result.then === 'function') {\n        result.then(function (value) {\n          invokeCallback(callback, null, value);\n        }, function (err) {\n          invokeCallback(callback, err.message ? err : new Error(err));\n        });\n      } else {\n        callback(null, result);\n      }\n    });\n  }\n  function invokeCallback(callback, error, value) {\n    try {\n      callback(error, value);\n    } catch (e) {\n      setImmediate$1(rethrow, e);\n    }\n  }\n  function rethrow(error) {\n    throw error;\n  }\n  var supportsSymbol = typeof Symbol === 'function';\n  function isAsync(fn) {\n    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\n  }\n  function wrapAsync(asyncFn) {\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n  }\n  function applyEach$1(eachfn) {\n    return function (fns /*, ...args*/) {\n      var args = slice(arguments, 1);\n      var go = initialParams(function (args, callback) {\n        var that = this;\n        return eachfn(fns, function (fn, cb) {\n          wrapAsync(fn).apply(that, args.concat(cb));\n        }, callback);\n      });\n      if (args.length) {\n        return go.apply(this, args);\n      } else {\n        return go;\n      }\n    };\n  }\n\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal || freeSelf || Function('return this')();\n\n  /** Built-in value references. */\n  var Symbol$1 = root.Symbol;\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /**\r\n   * Used to resolve the\r\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n   * of values.\r\n   */\n  var nativeObjectToString = objectProto.toString;\n\n  /** Built-in value references. */\n  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n  /**\r\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to query.\r\n   * @returns {string} Returns the raw `toStringTag`.\r\n   */\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n    try {\n      value[symToStringTag$1] = undefined;\n      var unmasked = true;\n    } catch (e) {}\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag$1] = tag;\n      } else {\n        delete value[symToStringTag$1];\n      }\n    }\n    return result;\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$1 = Object.prototype;\n\n  /**\r\n   * Used to resolve the\r\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n   * of values.\r\n   */\n  var nativeObjectToString$1 = objectProto$1.toString;\n\n  /**\r\n   * Converts `value` to a string using `Object.prototype.toString`.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to convert.\r\n   * @returns {string} Returns the converted string.\r\n   */\n  function objectToString(value) {\n    return nativeObjectToString$1.call(value);\n  }\n\n  /** `Object#toString` result references. */\n  var nullTag = '[object Null]';\n  var undefinedTag = '[object Undefined]';\n\n  /** Built-in value references. */\n  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\n\n  /**\r\n   * The base implementation of `getTag` without fallbacks for buggy environments.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to query.\r\n   * @returns {string} Returns the `toStringTag`.\r\n   */\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n\n  /** `Object#toString` result references. */\n  var asyncTag = '[object AsyncFunction]';\n  var funcTag = '[object Function]';\n  var genTag = '[object GeneratorFunction]';\n  var proxyTag = '[object Proxy]';\n\n  /**\r\n   * Checks if `value` is classified as a `Function` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n   * @example\r\n   *\r\n   * _.isFunction(_);\r\n   * // => true\r\n   *\r\n   * _.isFunction(/abc/);\r\n   * // => false\r\n   */\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = baseGetTag(value);\n    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n  }\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER = 9007199254740991;\n\n  /**\r\n   * Checks if `value` is a valid array-like length.\r\n   *\r\n   * **Note:** This method is loosely based on\r\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n   * @example\r\n   *\r\n   * _.isLength(3);\r\n   * // => true\r\n   *\r\n   * _.isLength(Number.MIN_VALUE);\r\n   * // => false\r\n   *\r\n   * _.isLength(Infinity);\r\n   * // => false\r\n   *\r\n   * _.isLength('3');\r\n   * // => false\r\n   */\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  /**\r\n   * Checks if `value` is array-like. A value is considered array-like if it's\r\n   * not a function and has a `value.length` that's an integer greater than or\r\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n   * @example\r\n   *\r\n   * _.isArrayLike([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isArrayLike(document.body.children);\r\n   * // => true\r\n   *\r\n   * _.isArrayLike('abc');\r\n   * // => true\r\n   *\r\n   * _.isArrayLike(_.noop);\r\n   * // => false\r\n   */\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n\n  // A temporary value used to identify if the loop should be broken.\n  // See #1064, #1293\n  var breakLoop = {};\n\n  /**\r\n   * This method returns `undefined`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 2.3.0\r\n   * @category Util\r\n   * @example\r\n   *\r\n   * _.times(2, _.noop);\r\n   * // => [undefined, undefined]\r\n   */\n  function noop() {\n    // No operation performed.\n  }\n  function once(fn) {\n    return function () {\n      if (fn === null) return;\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, arguments);\n    };\n  }\n  var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\n  var getIterator = function (coll) {\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\n  };\n\n  /**\r\n   * The base implementation of `_.times` without support for iteratee shorthands\r\n   * or max array length checks.\r\n   *\r\n   * @private\r\n   * @param {number} n The number of times to invoke `iteratee`.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns the array of results.\r\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n      result = Array(n);\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\r\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n   * and has a `typeof` result of \"object\".\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n   * @example\r\n   *\r\n   * _.isObjectLike({});\r\n   * // => true\r\n   *\r\n   * _.isObjectLike([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isObjectLike(_.noop);\r\n   * // => false\r\n   *\r\n   * _.isObjectLike(null);\r\n   * // => false\r\n   */\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object';\n  }\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]';\n\n  /**\r\n   * The base implementation of `_.isArguments`.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n   */\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag;\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$3 = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;\n\n  /** Built-in value references. */\n  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\n\n  /**\r\n   * Checks if `value` is likely an `arguments` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n   *  else `false`.\r\n   * @example\r\n   *\r\n   * _.isArguments(function() { return arguments; }());\r\n   * // => true\r\n   *\r\n   * _.isArguments([1, 2, 3]);\r\n   * // => false\r\n   */\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n  };\n\n  /**\r\n   * Checks if `value` is classified as an `Array` object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 0.1.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n   * @example\r\n   *\r\n   * _.isArray([1, 2, 3]);\r\n   * // => true\r\n   *\r\n   * _.isArray(document.body.children);\r\n   * // => false\r\n   *\r\n   * _.isArray('abc');\r\n   * // => false\r\n   *\r\n   * _.isArray(_.noop);\r\n   * // => false\r\n   */\n  var isArray = Array.isArray;\n\n  /**\r\n   * This method returns `false`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.13.0\r\n   * @category Util\r\n   * @returns {boolean} Returns `false`.\r\n   * @example\r\n   *\r\n   * _.times(2, _.stubFalse);\r\n   * // => [false, false]\r\n   */\n  function stubFalse() {\n    return false;\n  }\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n\n  /** Built-in value references. */\n  var Buffer = moduleExports ? root.Buffer : undefined;\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n  /**\r\n   * Checks if `value` is a buffer.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.3.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n   * @example\r\n   *\r\n   * _.isBuffer(new Buffer(2));\r\n   * // => true\r\n   *\r\n   * _.isBuffer(new Uint8Array(2));\r\n   * // => false\r\n   */\n  var isBuffer = nativeIsBuffer || stubFalse;\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER$1 = 9007199254740991;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /**\r\n   * Checks if `value` is a valid array-like index.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n   */\n  function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER$1 : length;\n    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n\n  /** `Object#toString` result references. */\n  var argsTag$1 = '[object Arguments]';\n  var arrayTag = '[object Array]';\n  var boolTag = '[object Boolean]';\n  var dateTag = '[object Date]';\n  var errorTag = '[object Error]';\n  var funcTag$1 = '[object Function]';\n  var mapTag = '[object Map]';\n  var numberTag = '[object Number]';\n  var objectTag = '[object Object]';\n  var regexpTag = '[object RegExp]';\n  var setTag = '[object Set]';\n  var stringTag = '[object String]';\n  var weakMapTag = '[object WeakMap]';\n  var arrayBufferTag = '[object ArrayBuffer]';\n  var dataViewTag = '[object DataView]';\n  var float32Tag = '[object Float32Array]';\n  var float64Tag = '[object Float64Array]';\n  var int8Tag = '[object Int8Array]';\n  var int16Tag = '[object Int16Array]';\n  var int32Tag = '[object Int32Array]';\n  var uint8Tag = '[object Uint8Array]';\n  var uint8ClampedTag = '[object Uint8ClampedArray]';\n  var uint16Tag = '[object Uint16Array]';\n  var uint32Tag = '[object Uint32Array]';\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n\n  /**\r\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n   */\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n\n  /**\r\n   * The base implementation of `_.unary` without support for storing metadata.\r\n   *\r\n   * @private\r\n   * @param {Function} func The function to cap arguments for.\r\n   * @returns {Function} Returns the new capped function.\r\n   */\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n\n  /** Detect free variable `exports`. */\n  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports$1 && freeGlobal.process;\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = function () {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;\n      if (types) {\n        return types;\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n  }();\n\n  /* Node.js helper references. */\n  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n  /**\r\n   * Checks if `value` is classified as a typed array.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 3.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n   * @example\r\n   *\r\n   * _.isTypedArray(new Uint8Array);\r\n   * // => true\r\n   *\r\n   * _.isTypedArray([]);\r\n   * // => false\r\n   */\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n  /** Used for built-in method references. */\n  var objectProto$2 = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;\n\n  /**\r\n   * Creates an array of the enumerable property names of the array-like `value`.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to query.\r\n   * @param {boolean} inherited Specify returning inherited property names.\r\n   * @returns {Array} Returns the array of property names.\r\n   */\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n    for (var key in value) {\n      if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && (\n      // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == 'length' ||\n      // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == 'offset' || key == 'parent') ||\n      // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||\n      // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$5 = Object.prototype;\n\n  /**\r\n   * Checks if `value` is likely a prototype object.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n   */\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$5;\n    return value === proto;\n  }\n\n  /**\r\n   * Creates a unary function that invokes `func` with its argument transformed.\r\n   *\r\n   * @private\r\n   * @param {Function} func The function to wrap.\r\n   * @param {Function} transform The argument transform.\r\n   * @returns {Function} Returns the new function.\r\n   */\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeKeys = overArg(Object.keys, Object);\n\n  /** Used for built-in method references. */\n  var objectProto$4 = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n\n  /**\r\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to query.\r\n   * @returns {Array} Returns the array of property names.\r\n   */\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n      if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\r\n   * Creates an array of the own enumerable property names of `object`.\r\n   *\r\n   * **Note:** Non-object values are coerced to objects. See the\r\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n   * for more details.\r\n   *\r\n   * @static\r\n   * @since 0.1.0\r\n   * @memberOf _\r\n   * @category Object\r\n   * @param {Object} object The object to query.\r\n   * @returns {Array} Returns the array of property names.\r\n   * @example\r\n   *\r\n   * function Foo() {\r\n   *   this.a = 1;\r\n   *   this.b = 2;\r\n   * }\r\n   *\r\n   * Foo.prototype.c = 3;\r\n   *\r\n   * _.keys(new Foo);\r\n   * // => ['a', 'b'] (iteration order is not guaranteed)\r\n   *\r\n   * _.keys('hi');\r\n   * // => ['0', '1']\r\n   */\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n  function createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n      return ++i < len ? {\n        value: coll[i],\n        key: i\n      } : null;\n    };\n  }\n  function createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n      var item = iterator.next();\n      if (item.done) return null;\n      i++;\n      return {\n        value: item.value,\n        key: i\n      };\n    };\n  }\n  function createObjectIterator(obj) {\n    var okeys = keys(obj);\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n      var key = okeys[++i];\n      if (key === '__proto__') {\n        return next();\n      }\n      return i < len ? {\n        value: obj[key],\n        key: key\n      } : null;\n    };\n  }\n  function iterator(coll) {\n    if (isArrayLike(coll)) {\n      return createArrayIterator(coll);\n    }\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n  }\n  function onlyOnce(fn) {\n    return function () {\n      if (fn === null) throw new Error(\"Callback was already called.\");\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, arguments);\n    };\n  }\n  function _eachOfLimit(limit) {\n    return function (obj, iteratee, callback) {\n      callback = once(callback || noop);\n      if (limit <= 0 || !obj) {\n        return callback(null);\n      }\n      var nextElem = iterator(obj);\n      var done = false;\n      var running = 0;\n      var looping = false;\n      function iterateeCallback(err, value) {\n        running -= 1;\n        if (err) {\n          done = true;\n          callback(err);\n        } else if (value === breakLoop || done && running <= 0) {\n          done = true;\n          return callback(null);\n        } else if (!looping) {\n          replenish();\n        }\n      }\n      function replenish() {\n        looping = true;\n        while (running < limit && !done) {\n          var elem = nextElem();\n          if (elem === null) {\n            done = true;\n            if (running <= 0) {\n              callback(null);\n            }\n            return;\n          }\n          running += 1;\n          iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n        }\n        looping = false;\n      }\n      replenish();\n    };\n  }\n\n  /**\r\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name eachOfLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.eachOf]{@link module:Collections.eachOf}\r\n   * @alias forEachOfLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each\r\n   * item in `coll`. The `key` is the item's key, or index in the case of an\r\n   * array.\r\n   * Invoked with (item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   */\n  function eachOfLimit(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n  }\n  function doLimit(fn, limit) {\n    return function (iterable, iteratee, callback) {\n      return fn(iterable, limit, iteratee, callback);\n    };\n  }\n\n  // eachOf implementation optimized for array-likes\n  function eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback || noop);\n    var index = 0,\n      completed = 0,\n      length = coll.length;\n    if (length === 0) {\n      callback(null);\n    }\n    function iteratorCallback(err, value) {\n      if (err) {\n        callback(err);\n      } else if (++completed === length || value === breakLoop) {\n        callback(null);\n      }\n    }\n    for (; index < length; index++) {\n      iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n  }\n\n  // a generic version of eachOf which can handle array, object, and iterator cases.\n  var eachOfGeneric = doLimit(eachOfLimit, Infinity);\n\n  /**\r\n   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\r\n   * to the iteratee.\r\n   *\r\n   * @name eachOf\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias forEachOf\r\n   * @category Collection\r\n   * @see [async.each]{@link module:Collections.each}\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each\r\n   * item in `coll`.\r\n   * The `key` is the item's key, or index in the case of an array.\r\n   * Invoked with (item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   * @example\r\n   *\r\n   * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\r\n   * var configs = {};\r\n   *\r\n   * async.forEachOf(obj, function (value, key, callback) {\r\n   *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\r\n   *         if (err) return callback(err);\r\n   *         try {\r\n   *             configs[key] = JSON.parse(data);\r\n   *         } catch (e) {\r\n   *             return callback(e);\r\n   *         }\r\n   *         callback();\r\n   *     });\r\n   * }, function (err) {\r\n   *     if (err) console.error(err.message);\r\n   *     // configs is now a map of JSON data\r\n   *     doSomethingWith(configs);\r\n   * });\r\n   */\n  var eachOf = function (coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    eachOfImplementation(coll, wrapAsync(iteratee), callback);\n  };\n  function doParallel(fn) {\n    return function (obj, iteratee, callback) {\n      return fn(eachOf, obj, wrapAsync(iteratee), callback);\n    };\n  }\n  function _asyncMap(eachfn, arr, iteratee, callback) {\n    callback = callback || noop;\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n    eachfn(arr, function (value, _, callback) {\n      var index = counter++;\n      _iteratee(value, function (err, v) {\n        results[index] = v;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, results);\n    });\n  }\n\n  /**\r\n   * Produces a new collection of values by mapping each value in `coll` through\r\n   * the `iteratee` function. The `iteratee` is called with an item from `coll`\r\n   * and a callback for when it has finished processing. Each of these callback\r\n   * takes 2 arguments: an `error`, and the transformed item from `coll`. If\r\n   * `iteratee` passes an error to its callback, the main `callback` (for the\r\n   * `map` function) is immediately called with the error.\r\n   *\r\n   * Note, that since this function applies the `iteratee` to each item in\r\n   * parallel, there is no guarantee that the `iteratee` functions will complete\r\n   * in order. However, the results array will be in the same order as the\r\n   * original `coll`.\r\n   *\r\n   * If `map` is passed an Object, the results will be an Array.  The results\r\n   * will roughly be in the order of the original Objects' keys (but this can\r\n   * vary across JavaScript engines).\r\n   *\r\n   * @name map\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with the transformed item.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Results is an Array of the\r\n   * transformed items from the `coll`. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\r\n   *     // results is now an array of stats for each file\r\n   * });\r\n   */\n  var map = doParallel(_asyncMap);\n\n  /**\r\n   * Applies the provided arguments to each function in the array, calling\r\n   * `callback` after all functions have completed. If you only provide the first\r\n   * argument, `fns`, then it will return a function which lets you pass in the\r\n   * arguments as if it were a single function call. If more arguments are\r\n   * provided, `callback` is required while `args` is still optional.\r\n   *\r\n   * @name applyEach\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\r\n   * to all call with the same arguments\r\n   * @param {...*} [args] - any number of separate arguments to pass to the\r\n   * function.\r\n   * @param {Function} [callback] - the final argument should be the callback,\r\n   * called when all functions have completed processing.\r\n   * @returns {Function} - If only the first argument, `fns`, is provided, it will\r\n   * return a function which lets you pass in the arguments as if it were a single\r\n   * function call. The signature is `(..args, callback)`. If invoked with any\r\n   * arguments, `callback` is required.\r\n   * @example\r\n   *\r\n   * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\r\n   *\r\n   * // partial application example:\r\n   * async.each(\r\n   *     buckets,\r\n   *     async.applyEach([enableSearch, updateSchema]),\r\n   *     callback\r\n   * );\r\n   */\n  var applyEach = applyEach$1(map);\n  function doParallelLimit(fn) {\n    return function (obj, limit, iteratee, callback) {\n      return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\n    };\n  }\n\n  /**\r\n   * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name mapLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.map]{@link module:Collections.map}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with the transformed item.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Results is an array of the\r\n   * transformed items from the `coll`. Invoked with (err, results).\r\n   */\n  var mapLimit = doParallelLimit(_asyncMap);\n\n  /**\r\n   * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\r\n   *\r\n   * @name mapSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.map]{@link module:Collections.map}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with the transformed item.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Results is an array of the\r\n   * transformed items from the `coll`. Invoked with (err, results).\r\n   */\n  var mapSeries = doLimit(mapLimit, 1);\n\n  /**\r\n   * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\r\n   *\r\n   * @name applyEachSeries\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.applyEach]{@link module:ControlFlow.applyEach}\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\r\n   * call with the same arguments\r\n   * @param {...*} [args] - any number of separate arguments to pass to the\r\n   * function.\r\n   * @param {Function} [callback] - the final argument should be the callback,\r\n   * called when all functions have completed processing.\r\n   * @returns {Function} - If only the first argument is provided, it will return\r\n   * a function which lets you pass in the arguments as if it were a single\r\n   * function call.\r\n   */\n  var applyEachSeries = applyEach$1(mapSeries);\n\n  /**\r\n   * A specialized version of `_.forEach` for arrays without support for\r\n   * iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns `array`.\r\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n\n  /**\r\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\r\n   *\r\n   * @private\r\n   * @param {boolean} [fromRight] Specify iterating from right to left.\r\n   * @returns {Function} Returns the new base function.\r\n   */\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n      return object;\n    };\n  }\n\n  /**\r\n   * The base implementation of `baseForOwn` which iterates over `object`\r\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\r\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @param {Function} keysFunc The function to get the keys of `object`.\r\n   * @returns {Object} Returns `object`.\r\n   */\n  var baseFor = createBaseFor();\n\n  /**\r\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Object} object The object to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Object} Returns `object`.\r\n   */\n  function baseForOwn(object, iteratee) {\n    return object && baseFor(object, iteratee, keys);\n  }\n\n  /**\r\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n   * support for iteratee shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {Function} predicate The function invoked per iteration.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @param {boolean} [fromRight] Specify iterating from right to left.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n    while (fromRight ? index-- : ++index < length) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\r\n   * The base implementation of `_.isNaN` without support for number objects.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\r\n   * A specialized version of `_.indexOf` which performs strict equality\r\n   * comparisons of values, i.e. `===`.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {*} value The value to search for.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n      length = array.length;\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\r\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {*} value The value to search for.\r\n   * @param {number} fromIndex The index to search from.\r\n   * @returns {number} Returns the index of the matched value, else `-1`.\r\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n\n  /**\r\n   * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\r\n   * their requirements. Each function can optionally depend on other functions\r\n   * being completed first, and each function is run as soon as its requirements\r\n   * are satisfied.\r\n   *\r\n   * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\r\n   * will stop. Further tasks will not execute (so any other functions depending\r\n   * on it will not run), and the main `callback` is immediately called with the\r\n   * error.\r\n   *\r\n   * {@link AsyncFunction}s also receive an object containing the results of functions which\r\n   * have completed so far as the first argument, if they have dependencies. If a\r\n   * task function has no dependencies, it will only be passed a callback.\r\n   *\r\n   * @name auto\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Object} tasks - An object. Each of its properties is either a\r\n   * function or an array of requirements, with the {@link AsyncFunction} itself the last item\r\n   * in the array. The object's key of a property serves as the name of the task\r\n   * defined by that property, i.e. can be used when specifying requirements for\r\n   * other tasks. The function receives one or two arguments:\r\n   * * a `results` object, containing the results of the previously executed\r\n   *   functions, only passed if the task has any dependencies,\r\n   * * a `callback(err, result)` function, which must be called when finished,\r\n   *   passing an `error` (which can be `null`) and the result of the function's\r\n   *   execution.\r\n   * @param {number} [concurrency=Infinity] - An optional `integer` for\r\n   * determining the maximum number of tasks that can be run in parallel. By\r\n   * default, as many as possible.\r\n   * @param {Function} [callback] - An optional callback which is called when all\r\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\r\n   * pass an error to their callback. Results are always returned; however, if an\r\n   * error occurs, no further `tasks` will be performed, and the results object\r\n   * will only contain partial results. Invoked with (err, results).\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * async.auto({\r\n   *     // this function will just be passed a callback\r\n   *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\r\n   *     showData: ['readData', function(results, cb) {\r\n   *         // results.readData is the file's contents\r\n   *         // ...\r\n   *     }]\r\n   * }, callback);\r\n   *\r\n   * async.auto({\r\n   *     get_data: function(callback) {\r\n   *         console.log('in get_data');\r\n   *         // async code to get some data\r\n   *         callback(null, 'data', 'converted to array');\r\n   *     },\r\n   *     make_folder: function(callback) {\r\n   *         console.log('in make_folder');\r\n   *         // async code to create a directory to store a file in\r\n   *         // this is run at the same time as getting the data\r\n   *         callback(null, 'folder');\r\n   *     },\r\n   *     write_file: ['get_data', 'make_folder', function(results, callback) {\r\n   *         console.log('in write_file', JSON.stringify(results));\r\n   *         // once there is some data and the directory exists,\r\n   *         // write the data to a file in the directory\r\n   *         callback(null, 'filename');\r\n   *     }],\r\n   *     email_link: ['write_file', function(results, callback) {\r\n   *         console.log('in email_link', JSON.stringify(results));\r\n   *         // once the file is written let's email a link to it...\r\n   *         // results.write_file contains the filename returned by write_file.\r\n   *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\r\n   *     }]\r\n   * }, function(err, results) {\r\n   *     console.log('err = ', err);\r\n   *     console.log('results = ', results);\r\n   * });\r\n   */\n  var auto = function (tasks, concurrency, callback) {\n    if (typeof concurrency === 'function') {\n      // concurrency is optional, shift the args.\n      callback = concurrency;\n      concurrency = null;\n    }\n    callback = once(callback || noop);\n    var keys$$1 = keys(tasks);\n    var numTasks = keys$$1.length;\n    if (!numTasks) {\n      return callback(null);\n    }\n    if (!concurrency) {\n      concurrency = numTasks;\n    }\n    var results = {};\n    var runningTasks = 0;\n    var hasError = false;\n    var listeners = Object.create(null);\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n    baseForOwn(tasks, function (task, key) {\n      if (!isArray(task)) {\n        // no dependencies\n        enqueueTask(key, [task]);\n        readyToCheck.push(key);\n        return;\n      }\n      var dependencies = task.slice(0, task.length - 1);\n      var remainingDependencies = dependencies.length;\n      if (remainingDependencies === 0) {\n        enqueueTask(key, task);\n        readyToCheck.push(key);\n        return;\n      }\n      uncheckedDependencies[key] = remainingDependencies;\n      arrayEach(dependencies, function (dependencyName) {\n        if (!tasks[dependencyName]) {\n          throw new Error('async.auto task `' + key + '` has a non-existent dependency `' + dependencyName + '` in ' + dependencies.join(', '));\n        }\n        addListener(dependencyName, function () {\n          remainingDependencies--;\n          if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n          }\n        });\n      });\n    });\n    checkForDeadlocks();\n    processQueue();\n    function enqueueTask(key, task) {\n      readyTasks.push(function () {\n        runTask(key, task);\n      });\n    }\n    function processQueue() {\n      if (readyTasks.length === 0 && runningTasks === 0) {\n        return callback(null, results);\n      }\n      while (readyTasks.length && runningTasks < concurrency) {\n        var run = readyTasks.shift();\n        run();\n      }\n    }\n    function addListener(taskName, fn) {\n      var taskListeners = listeners[taskName];\n      if (!taskListeners) {\n        taskListeners = listeners[taskName] = [];\n      }\n      taskListeners.push(fn);\n    }\n    function taskComplete(taskName) {\n      var taskListeners = listeners[taskName] || [];\n      arrayEach(taskListeners, function (fn) {\n        fn();\n      });\n      processQueue();\n    }\n    function runTask(key, task) {\n      if (hasError) return;\n      var taskCallback = onlyOnce(function (err, result) {\n        runningTasks--;\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        }\n        if (err) {\n          var safeResults = {};\n          baseForOwn(results, function (val, rkey) {\n            safeResults[rkey] = val;\n          });\n          safeResults[key] = result;\n          hasError = true;\n          listeners = Object.create(null);\n          callback(err, safeResults);\n        } else {\n          results[key] = result;\n          taskComplete(key);\n        }\n      });\n      runningTasks++;\n      var taskFn = wrapAsync(task[task.length - 1]);\n      if (task.length > 1) {\n        taskFn(results, taskCallback);\n      } else {\n        taskFn(taskCallback);\n      }\n    }\n    function checkForDeadlocks() {\n      // Kahn's algorithm\n      // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n      // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n      var currentTask;\n      var counter = 0;\n      while (readyToCheck.length) {\n        currentTask = readyToCheck.pop();\n        counter++;\n        arrayEach(getDependents(currentTask), function (dependent) {\n          if (--uncheckedDependencies[dependent] === 0) {\n            readyToCheck.push(dependent);\n          }\n        });\n      }\n      if (counter !== numTasks) {\n        throw new Error('async.auto cannot execute tasks due to a recursive dependency');\n      }\n    }\n    function getDependents(taskName) {\n      var result = [];\n      baseForOwn(tasks, function (task, key) {\n        if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\n          result.push(key);\n        }\n      });\n      return result;\n    }\n  };\n\n  /**\r\n   * A specialized version of `_.map` for arrays without support for iteratee\r\n   * shorthands.\r\n   *\r\n   * @private\r\n   * @param {Array} [array] The array to iterate over.\r\n   * @param {Function} iteratee The function invoked per iteration.\r\n   * @returns {Array} Returns the new mapped array.\r\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /** `Object#toString` result references. */\n  var symbolTag = '[object Symbol]';\n\n  /**\r\n   * Checks if `value` is classified as a `Symbol` primitive or object.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to check.\r\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n   * @example\r\n   *\r\n   * _.isSymbol(Symbol.iterator);\r\n   * // => true\r\n   *\r\n   * _.isSymbol('abc');\r\n   * // => false\r\n   */\n  function isSymbol(value) {\n    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n  }\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0;\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\n  var symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n  /**\r\n   * The base implementation of `_.toString` which doesn't convert nullish\r\n   * values to empty strings.\r\n   *\r\n   * @private\r\n   * @param {*} value The value to process.\r\n   * @returns {string} Returns the string.\r\n   */\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value;\n    }\n    if (isArray(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + '';\n    }\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : '';\n    }\n    var result = value + '';\n    return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n  }\n\n  /**\r\n   * The base implementation of `_.slice` without an iteratee call guard.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to slice.\r\n   * @param {number} [start=0] The start position.\r\n   * @param {number} [end=array.length] The end position.\r\n   * @returns {Array} Returns the slice of `array`.\r\n   */\n  function baseSlice(array, start, end) {\n    var index = -1,\n      length = array.length;\n    if (start < 0) {\n      start = -start > length ? 0 : length + start;\n    }\n    end = end > length ? length : end;\n    if (end < 0) {\n      end += length;\n    }\n    length = start > end ? 0 : end - start >>> 0;\n    start >>>= 0;\n    var result = Array(length);\n    while (++index < length) {\n      result[index] = array[index + start];\n    }\n    return result;\n  }\n\n  /**\r\n   * Casts `array` to a slice if it's needed.\r\n   *\r\n   * @private\r\n   * @param {Array} array The array to inspect.\r\n   * @param {number} start The start position.\r\n   * @param {number} [end=array.length] The end position.\r\n   * @returns {Array} Returns the cast slice.\r\n   */\n  function castSlice(array, start, end) {\n    var length = array.length;\n    end = end === undefined ? length : end;\n    return !start && end >= length ? array : baseSlice(array, start, end);\n  }\n\n  /**\r\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\r\n   * that is not found in the character symbols.\r\n   *\r\n   * @private\r\n   * @param {Array} strSymbols The string symbols to inspect.\r\n   * @param {Array} chrSymbols The character symbols to find.\r\n   * @returns {number} Returns the index of the last unmatched string symbol.\r\n   */\n  function charsEndIndex(strSymbols, chrSymbols) {\n    var index = strSymbols.length;\n    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\r\n   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\r\n   * that is not found in the character symbols.\r\n   *\r\n   * @private\r\n   * @param {Array} strSymbols The string symbols to inspect.\r\n   * @param {Array} chrSymbols The character symbols to find.\r\n   * @returns {number} Returns the index of the first unmatched string symbol.\r\n   */\n  function charsStartIndex(strSymbols, chrSymbols) {\n    var index = -1,\n      length = strSymbols.length;\n    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n    return index;\n  }\n\n  /**\r\n   * Converts an ASCII `string` to an array.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\n  function asciiToArray(string) {\n    return string.split('');\n  }\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange = '\\\\ud800-\\\\udfff';\n  var rsComboMarksRange = '\\\\u0300-\\\\u036f';\n  var reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f';\n  var rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff';\n  var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\n  var rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n  /** Used to compose unicode capture groups. */\n  var rsZWJ = '\\\\u200d';\n\n  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\n  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');\n\n  /**\r\n   * Checks if `string` contains Unicode symbols.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to inspect.\r\n   * @returns {boolean} Returns `true` if a symbol is found, else `false`.\r\n   */\n  function hasUnicode(string) {\n    return reHasUnicode.test(string);\n  }\n\n  /** Used to compose unicode character classes. */\n  var rsAstralRange$1 = '\\\\ud800-\\\\udfff';\n  var rsComboMarksRange$1 = '\\\\u0300-\\\\u036f';\n  var reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f';\n  var rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff';\n  var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\n  var rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\n\n  /** Used to compose unicode capture groups. */\n  var rsAstral = '[' + rsAstralRange$1 + ']';\n  var rsCombo = '[' + rsComboRange$1 + ']';\n  var rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\n  var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\n  var rsNonAstral = '[^' + rsAstralRange$1 + ']';\n  var rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\n  var rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\n  var rsZWJ$1 = '\\\\u200d';\n\n  /** Used to compose unicode regexes. */\n  var reOptMod = rsModifier + '?';\n  var rsOptVar = '[' + rsVarRange$1 + ']?';\n  var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\n  var rsSeq = rsOptVar + reOptMod + rsOptJoin;\n  var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\n  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n  /**\r\n   * Converts a Unicode `string` to an array.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\n  function unicodeToArray(string) {\n    return string.match(reUnicode) || [];\n  }\n\n  /**\r\n   * Converts `string` to an array.\r\n   *\r\n   * @private\r\n   * @param {string} string The string to convert.\r\n   * @returns {Array} Returns the converted array.\r\n   */\n  function stringToArray(string) {\n    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n  }\n\n  /**\r\n   * Converts `value` to a string. An empty string is returned for `null`\r\n   * and `undefined` values. The sign of `-0` is preserved.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 4.0.0\r\n   * @category Lang\r\n   * @param {*} value The value to convert.\r\n   * @returns {string} Returns the converted string.\r\n   * @example\r\n   *\r\n   * _.toString(null);\r\n   * // => ''\r\n   *\r\n   * _.toString(-0);\r\n   * // => '-0'\r\n   *\r\n   * _.toString([1, 2, 3]);\r\n   * // => '1,2,3'\r\n   */\n  function toString(value) {\n    return value == null ? '' : baseToString(value);\n  }\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g;\n\n  /**\r\n   * Removes leading and trailing whitespace or specified characters from `string`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 3.0.0\r\n   * @category String\r\n   * @param {string} [string=''] The string to trim.\r\n   * @param {string} [chars=whitespace] The characters to trim.\r\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n   * @returns {string} Returns the trimmed string.\r\n   * @example\r\n   *\r\n   * _.trim('  abc  ');\r\n   * // => 'abc'\r\n   *\r\n   * _.trim('-_-abc-_-', '_-');\r\n   * // => 'abc'\r\n   *\r\n   * _.map(['  foo  ', '  bar  '], _.trim);\r\n   * // => ['foo', 'bar']\r\n   */\n  function trim(string, chars, guard) {\n    string = toString(string);\n    if (string && (guard || chars === undefined)) {\n      return string.replace(reTrim, '');\n    }\n    if (!string || !(chars = baseToString(chars))) {\n      return string;\n    }\n    var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n    return castSlice(strSymbols, start, end).join('');\n  }\n  var FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\n  var FN_ARG_SPLIT = /,/;\n  var FN_ARG = /(=.+)?(\\s*)$/;\n  var STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n  function parseParams(func) {\n    func = func.toString().replace(STRIP_COMMENTS, '');\n    func = func.match(FN_ARGS)[2].replace(' ', '');\n    func = func ? func.split(FN_ARG_SPLIT) : [];\n    func = func.map(function (arg) {\n      return trim(arg.replace(FN_ARG, ''));\n    });\n    return func;\n  }\n\n  /**\r\n   * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\r\n   * tasks are specified as parameters to the function, after the usual callback\r\n   * parameter, with the parameter names matching the names of the tasks it\r\n   * depends on. This can provide even more readable task graphs which can be\r\n   * easier to maintain.\r\n   *\r\n   * If a final callback is specified, the task results are similarly injected,\r\n   * specified as named parameters after the initial error parameter.\r\n   *\r\n   * The autoInject function is purely syntactic sugar and its semantics are\r\n   * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\r\n   *\r\n   * @name autoInject\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.auto]{@link module:ControlFlow.auto}\r\n   * @category Control Flow\r\n   * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\r\n   * the form 'func([dependencies...], callback). The object's key of a property\r\n   * serves as the name of the task defined by that property, i.e. can be used\r\n   * when specifying requirements for other tasks.\r\n   * * The `callback` parameter is a `callback(err, result)` which must be called\r\n   *   when finished, passing an `error` (which can be `null`) and the result of\r\n   *   the function's execution. The remaining parameters name other tasks on\r\n   *   which the task is dependent, and the results from those tasks are the\r\n   *   arguments of those parameters.\r\n   * @param {Function} [callback] - An optional callback which is called when all\r\n   * the tasks have been completed. It receives the `err` argument if any `tasks`\r\n   * pass an error to their callback, and a `results` object with any completed\r\n   * task results, similar to `auto`.\r\n   * @example\r\n   *\r\n   * //  The example from `auto` can be rewritten as follows:\r\n   * async.autoInject({\r\n   *     get_data: function(callback) {\r\n   *         // async code to get some data\r\n   *         callback(null, 'data', 'converted to array');\r\n   *     },\r\n   *     make_folder: function(callback) {\r\n   *         // async code to create a directory to store a file in\r\n   *         // this is run at the same time as getting the data\r\n   *         callback(null, 'folder');\r\n   *     },\r\n   *     write_file: function(get_data, make_folder, callback) {\r\n   *         // once there is some data and the directory exists,\r\n   *         // write the data to a file in the directory\r\n   *         callback(null, 'filename');\r\n   *     },\r\n   *     email_link: function(write_file, callback) {\r\n   *         // once the file is written let's email a link to it...\r\n   *         // write_file contains the filename returned by write_file.\r\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\r\n   *     }\r\n   * }, function(err, results) {\r\n   *     console.log('err = ', err);\r\n   *     console.log('email_link = ', results.email_link);\r\n   * });\r\n   *\r\n   * // If you are using a JS minifier that mangles parameter names, `autoInject`\r\n   * // will not work with plain functions, since the parameter names will be\r\n   * // collapsed to a single letter identifier.  To work around this, you can\r\n   * // explicitly specify the names of the parameters your task function needs\r\n   * // in an array, similar to Angular.js dependency injection.\r\n   *\r\n   * // This still has an advantage over plain `auto`, since the results a task\r\n   * // depends on are still spread into arguments.\r\n   * async.autoInject({\r\n   *     //...\r\n   *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\r\n   *         callback(null, 'filename');\r\n   *     }],\r\n   *     email_link: ['write_file', function(write_file, callback) {\r\n   *         callback(null, {'file':write_file, 'email':'user@example.com'});\r\n   *     }]\r\n   *     //...\r\n   * }, function(err, results) {\r\n   *     console.log('err = ', err);\r\n   *     console.log('email_link = ', results.email_link);\r\n   * });\r\n   */\n  function autoInject(tasks, callback) {\n    var newTasks = {};\n    baseForOwn(tasks, function (taskFn, key) {\n      var params;\n      var fnIsAsync = isAsync(taskFn);\n      var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;\n      if (isArray(taskFn)) {\n        params = taskFn.slice(0, -1);\n        taskFn = taskFn[taskFn.length - 1];\n        newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n      } else if (hasNoDeps) {\n        // no dependencies, use the function as-is\n        newTasks[key] = taskFn;\n      } else {\n        params = parseParams(taskFn);\n        if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\n          throw new Error(\"autoInject task functions require explicit parameters.\");\n        }\n\n        // remove callback param\n        if (!fnIsAsync) params.pop();\n        newTasks[key] = params.concat(newTask);\n      }\n      function newTask(results, taskCb) {\n        var newArgs = arrayMap(params, function (name) {\n          return results[name];\n        });\n        newArgs.push(taskCb);\n        wrapAsync(taskFn).apply(null, newArgs);\n      }\n    });\n    auto(newTasks, callback);\n  }\n\n  // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n  // used for queues. This implementation assumes that the node provided by the user can be modified\n  // to adjust the next and last properties. We implement only the minimal functionality\n  // for queue support.\n  function DLL() {\n    this.head = this.tail = null;\n    this.length = 0;\n  }\n  function setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n  }\n  DLL.prototype.removeLink = function (node) {\n    if (node.prev) node.prev.next = node.next;else this.head = node.next;\n    if (node.next) node.next.prev = node.prev;else this.tail = node.prev;\n    node.prev = node.next = null;\n    this.length -= 1;\n    return node;\n  };\n  DLL.prototype.empty = function () {\n    while (this.head) this.shift();\n    return this;\n  };\n  DLL.prototype.insertAfter = function (node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    if (node.next) node.next.prev = newNode;else this.tail = newNode;\n    node.next = newNode;\n    this.length += 1;\n  };\n  DLL.prototype.insertBefore = function (node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    if (node.prev) node.prev.next = newNode;else this.head = newNode;\n    node.prev = newNode;\n    this.length += 1;\n  };\n  DLL.prototype.unshift = function (node) {\n    if (this.head) this.insertBefore(this.head, node);else setInitial(this, node);\n  };\n  DLL.prototype.push = function (node) {\n    if (this.tail) this.insertAfter(this.tail, node);else setInitial(this, node);\n  };\n  DLL.prototype.shift = function () {\n    return this.head && this.removeLink(this.head);\n  };\n  DLL.prototype.pop = function () {\n    return this.tail && this.removeLink(this.tail);\n  };\n  DLL.prototype.toArray = function () {\n    var arr = Array(this.length);\n    var curr = this.head;\n    for (var idx = 0; idx < this.length; idx++) {\n      arr[idx] = curr.data;\n      curr = curr.next;\n    }\n    return arr;\n  };\n  DLL.prototype.remove = function (testFn) {\n    var curr = this.head;\n    while (!!curr) {\n      var next = curr.next;\n      if (testFn(curr)) {\n        this.removeLink(curr);\n      }\n      curr = next;\n    }\n    return this;\n  };\n  function queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n      concurrency = 1;\n    } else if (concurrency === 0) {\n      throw new Error('Concurrency must not be zero');\n    }\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, callback) {\n      if (callback != null && typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n      q.started = true;\n      if (!isArray(data)) {\n        data = [data];\n      }\n      if (data.length === 0 && q.idle()) {\n        // call drain immediately if there are no tasks\n        return setImmediate$1(function () {\n          q.drain();\n        });\n      }\n      for (var i = 0, l = data.length; i < l; i++) {\n        var item = {\n          data: data[i],\n          callback: callback || noop\n        };\n        if (insertAtFront) {\n          q._tasks.unshift(item);\n        } else {\n          q._tasks.push(item);\n        }\n      }\n      if (!processingScheduled) {\n        processingScheduled = true;\n        setImmediate$1(function () {\n          processingScheduled = false;\n          q.process();\n        });\n      }\n    }\n    function _next(tasks) {\n      return function (err) {\n        numRunning -= 1;\n        for (var i = 0, l = tasks.length; i < l; i++) {\n          var task = tasks[i];\n          var index = baseIndexOf(workersList, task, 0);\n          if (index === 0) {\n            workersList.shift();\n          } else if (index > 0) {\n            workersList.splice(index, 1);\n          }\n          task.callback.apply(task, arguments);\n          if (err != null) {\n            q.error(err, task.data);\n          }\n        }\n        if (numRunning <= q.concurrency - q.buffer) {\n          q.unsaturated();\n        }\n        if (q.idle()) {\n          q.drain();\n        }\n        q.process();\n      };\n    }\n    var isProcessing = false;\n    var q = {\n      _tasks: new DLL(),\n      concurrency: concurrency,\n      payload: payload,\n      saturated: noop,\n      unsaturated: noop,\n      buffer: concurrency / 4,\n      empty: noop,\n      drain: noop,\n      error: noop,\n      started: false,\n      paused: false,\n      push: function (data, callback) {\n        _insert(data, false, callback);\n      },\n      kill: function () {\n        q.drain = noop;\n        q._tasks.empty();\n      },\n      unshift: function (data, callback) {\n        _insert(data, true, callback);\n      },\n      remove: function (testFn) {\n        q._tasks.remove(testFn);\n      },\n      process: function () {\n        // Avoid trying to start too many processing operations. This can occur\n        // when callbacks resolve synchronously (#1267).\n        if (isProcessing) {\n          return;\n        }\n        isProcessing = true;\n        while (!q.paused && numRunning < q.concurrency && q._tasks.length) {\n          var tasks = [],\n            data = [];\n          var l = q._tasks.length;\n          if (q.payload) l = Math.min(l, q.payload);\n          for (var i = 0; i < l; i++) {\n            var node = q._tasks.shift();\n            tasks.push(node);\n            workersList.push(node);\n            data.push(node.data);\n          }\n          numRunning += 1;\n          if (q._tasks.length === 0) {\n            q.empty();\n          }\n          if (numRunning === q.concurrency) {\n            q.saturated();\n          }\n          var cb = onlyOnce(_next(tasks));\n          _worker(data, cb);\n        }\n        isProcessing = false;\n      },\n      length: function () {\n        return q._tasks.length;\n      },\n      running: function () {\n        return numRunning;\n      },\n      workersList: function () {\n        return workersList;\n      },\n      idle: function () {\n        return q._tasks.length + numRunning === 0;\n      },\n      pause: function () {\n        q.paused = true;\n      },\n      resume: function () {\n        if (q.paused === false) {\n          return;\n        }\n        q.paused = false;\n        setImmediate$1(q.process);\n      }\n    };\n    return q;\n  }\n\n  /**\r\n   * A cargo of tasks for the worker function to complete. Cargo inherits all of\r\n   * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\r\n   * @typedef {Object} CargoObject\r\n   * @memberOf module:ControlFlow\r\n   * @property {Function} length - A function returning the number of items\r\n   * waiting to be processed. Invoke like `cargo.length()`.\r\n   * @property {number} payload - An `integer` for determining how many tasks\r\n   * should be process per round. This property can be changed after a `cargo` is\r\n   * created to alter the payload on-the-fly.\r\n   * @property {Function} push - Adds `task` to the `queue`. The callback is\r\n   * called once the `worker` has finished processing the task. Instead of a\r\n   * single task, an array of `tasks` can be submitted. The respective callback is\r\n   * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\r\n   * @property {Function} saturated - A callback that is called when the\r\n   * `queue.length()` hits the concurrency and further tasks will be queued.\r\n   * @property {Function} empty - A callback that is called when the last item\r\n   * from the `queue` is given to a `worker`.\r\n   * @property {Function} drain - A callback that is called when the last item\r\n   * from the `queue` has returned from the `worker`.\r\n   * @property {Function} idle - a function returning false if there are items\r\n   * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\r\n   * @property {Function} pause - a function that pauses the processing of tasks\r\n   * until `resume()` is called. Invoke like `cargo.pause()`.\r\n   * @property {Function} resume - a function that resumes the processing of\r\n   * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\r\n   * @property {Function} kill - a function that removes the `drain` callback and\r\n   * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\r\n   */\n\n  /**\r\n   * Creates a `cargo` object with the specified payload. Tasks added to the\r\n   * cargo will be processed altogether (up to the `payload` limit). If the\r\n   * `worker` is in progress, the task is queued until it becomes available. Once\r\n   * the `worker` has completed some tasks, each callback of those tasks is\r\n   * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\r\n   * for how `cargo` and `queue` work.\r\n   *\r\n   * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\r\n   * at a time, cargo passes an array of tasks to a single worker, repeating\r\n   * when the worker is finished.\r\n   *\r\n   * @name cargo\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.queue]{@link module:ControlFlow.queue}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} worker - An asynchronous function for processing an array\r\n   * of queued tasks. Invoked with `(tasks, callback)`.\r\n   * @param {number} [payload=Infinity] - An optional `integer` for determining\r\n   * how many tasks should be processed per round; if omitted, the default is\r\n   * unlimited.\r\n   * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\r\n   * attached as certain properties to listen for specific events during the\r\n   * lifecycle of the cargo and inner queue.\r\n   * @example\r\n   *\r\n   * // create a cargo object with payload 2\r\n   * var cargo = async.cargo(function(tasks, callback) {\r\n   *     for (var i=0; i<tasks.length; i++) {\r\n   *         console.log('hello ' + tasks[i].name);\r\n   *     }\r\n   *     callback();\r\n   * }, 2);\r\n   *\r\n   * // add some items\r\n   * cargo.push({name: 'foo'}, function(err) {\r\n   *     console.log('finished processing foo');\r\n   * });\r\n   * cargo.push({name: 'bar'}, function(err) {\r\n   *     console.log('finished processing bar');\r\n   * });\r\n   * cargo.push({name: 'baz'}, function(err) {\r\n   *     console.log('finished processing baz');\r\n   * });\r\n   */\n  function cargo(worker, payload) {\n    return queue(worker, 1, payload);\n  }\n\n  /**\r\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\r\n   *\r\n   * @name eachOfSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.eachOf]{@link module:Collections.eachOf}\r\n   * @alias forEachOfSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * Invoked with (item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Invoked with (err).\r\n   */\n  var eachOfSeries = doLimit(eachOfLimit, 1);\n\n  /**\r\n   * Reduces `coll` into a single value using an async `iteratee` to return each\r\n   * successive step. `memo` is the initial state of the reduction. This function\r\n   * only operates in series.\r\n   *\r\n   * For performance reasons, it may make sense to split a call to this function\r\n   * into a parallel map, and then use the normal `Array.prototype.reduce` on the\r\n   * results. This function is for situations where each step in the reduction\r\n   * needs to be async; if you can get the data before reducing it, then it's\r\n   * probably a good idea to do so.\r\n   *\r\n   * @name reduce\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias inject\r\n   * @alias foldl\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {*} memo - The initial state of the reduction.\r\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n   * array to produce the next step in the reduction.\r\n   * The `iteratee` should complete with the next state of the reduction.\r\n   * If the iteratee complete with an error, the reduction is stopped and the\r\n   * main `callback` is immediately called with the error.\r\n   * Invoked with (memo, item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\r\n   * (err, result).\r\n   * @example\r\n   *\r\n   * async.reduce([1,2,3], 0, function(memo, item, callback) {\r\n   *     // pointless async:\r\n   *     process.nextTick(function() {\r\n   *         callback(null, memo + item)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result is now equal to the last value of memo, which is 6\r\n   * });\r\n   */\n  function reduce(coll, memo, iteratee, callback) {\n    callback = once(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    eachOfSeries(coll, function (x, i, callback) {\n      _iteratee(memo, x, function (err, v) {\n        memo = v;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, memo);\n    });\n  }\n\n  /**\r\n   * Version of the compose function that is more natural to read. Each function\r\n   * consumes the return value of the previous function. It is the equivalent of\r\n   * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\r\n   *\r\n   * Each function is executed with the `this` binding of the composed function.\r\n   *\r\n   * @name seq\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.compose]{@link module:ControlFlow.compose}\r\n   * @category Control Flow\r\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\r\n   * @returns {Function} a function that composes the `functions` in order\r\n   * @example\r\n   *\r\n   * // Requires lodash (or underscore), express3 and dresende's orm2.\r\n   * // Part of an app, that fetches cats of the logged user.\r\n   * // This example uses `seq` function to avoid overnesting and error\r\n   * // handling clutter.\r\n   * app.get('/cats', function(request, response) {\r\n   *     var User = request.models.User;\r\n   *     async.seq(\r\n   *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\r\n   *         function(user, fn) {\r\n   *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\r\n   *         }\r\n   *     )(req.session.user_id, function (err, cats) {\r\n   *         if (err) {\r\n   *             console.error(err);\r\n   *             response.json({ status: 'error', message: err.message });\r\n   *         } else {\r\n   *             response.json({ status: 'ok', message: 'Cats found', data: cats });\r\n   *         }\r\n   *     });\r\n   * });\r\n   */\n  function seq( /*...functions*/\n  ) {\n    var _functions = arrayMap(arguments, wrapAsync);\n    return function /*...args*/\n    () {\n      var args = slice(arguments);\n      var that = this;\n      var cb = args[args.length - 1];\n      if (typeof cb == 'function') {\n        args.pop();\n      } else {\n        cb = noop;\n      }\n      reduce(_functions, args, function (newargs, fn, cb) {\n        fn.apply(that, newargs.concat(function (err /*, ...nextargs*/) {\n          var nextargs = slice(arguments, 1);\n          cb(err, nextargs);\n        }));\n      }, function (err, results) {\n        cb.apply(that, [err].concat(results));\n      });\n    };\n  }\n\n  /**\r\n   * Creates a function which is a composition of the passed asynchronous\r\n   * functions. Each function consumes the return value of the function that\r\n   * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\r\n   * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\r\n   *\r\n   * Each function is executed with the `this` binding of the composed function.\r\n   *\r\n   * @name compose\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {...AsyncFunction} functions - the asynchronous functions to compose\r\n   * @returns {Function} an asynchronous function that is the composed\r\n   * asynchronous `functions`\r\n   * @example\r\n   *\r\n   * function add1(n, callback) {\r\n   *     setTimeout(function () {\r\n   *         callback(null, n + 1);\r\n   *     }, 10);\r\n   * }\r\n   *\r\n   * function mul3(n, callback) {\r\n   *     setTimeout(function () {\r\n   *         callback(null, n * 3);\r\n   *     }, 10);\r\n   * }\r\n   *\r\n   * var add1mul3 = async.compose(mul3, add1);\r\n   * add1mul3(4, function (err, result) {\r\n   *     // result now equals 15\r\n   * });\r\n   */\n  var compose = function /*...args*/\n  () {\n    return seq.apply(null, slice(arguments).reverse());\n  };\n  var _concat = Array.prototype.concat;\n\n  /**\r\n   * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name concatLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.concat]{@link module:Collections.concat}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\r\n   * which should use an array as its result. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is an array\r\n   * containing the concatenated results of the `iteratee` function. Invoked with\r\n   * (err, results).\r\n   */\n  var concatLimit = function (coll, limit, iteratee, callback) {\n    callback = callback || noop;\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(coll, limit, function (val, callback) {\n      _iteratee(val, function (err /*, ...args*/) {\n        if (err) return callback(err);\n        return callback(null, slice(arguments, 1));\n      });\n    }, function (err, mapResults) {\n      var result = [];\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          result = _concat.apply(result, mapResults[i]);\n        }\n      }\n      return callback(err, result);\n    });\n  };\n\n  /**\r\n   * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\r\n   * the concatenated list. The `iteratee`s are called in parallel, and the\r\n   * results are concatenated as they return. There is no guarantee that the\r\n   * results array will be returned in the original order of `coll` passed to the\r\n   * `iteratee` function.\r\n   *\r\n   * @name concat\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\r\n   * which should use an array as its result. Invoked with (item, callback).\r\n   * @param {Function} [callback(err)] - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is an array\r\n   * containing the concatenated results of the `iteratee` function. Invoked with\r\n   * (err, results).\r\n   * @example\r\n   *\r\n   * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\r\n   *     // files is now a list of filenames that exist in the 3 directories\r\n   * });\r\n   */\n  var concat = doLimit(concatLimit, Infinity);\n\n  /**\r\n   * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\r\n   *\r\n   * @name concatSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.concat]{@link module:Collections.concat}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\r\n   * The iteratee should complete with an array an array of results.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback(err)] - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is an array\r\n   * containing the concatenated results of the `iteratee` function. Invoked with\r\n   * (err, results).\r\n   */\n  var concatSeries = doLimit(concatLimit, 1);\n\n  /**\r\n   * Returns a function that when called, calls-back with the values provided.\r\n   * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\r\n   * [`auto`]{@link module:ControlFlow.auto}.\r\n   *\r\n   * @name constant\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {...*} arguments... - Any number of arguments to automatically invoke\r\n   * callback with.\r\n   * @returns {AsyncFunction} Returns a function that when invoked, automatically\r\n   * invokes the callback with the previous given arguments.\r\n   * @example\r\n   *\r\n   * async.waterfall([\r\n   *     async.constant(42),\r\n   *     function (value, next) {\r\n   *         // value === 42\r\n   *     },\r\n   *     //...\r\n   * ], callback);\r\n   *\r\n   * async.waterfall([\r\n   *     async.constant(filename, \"utf8\"),\r\n   *     fs.readFile,\r\n   *     function (fileData, next) {\r\n   *         //...\r\n   *     }\r\n   *     //...\r\n   * ], callback);\r\n   *\r\n   * async.auto({\r\n   *     hostname: async.constant(\"https://server.net/\"),\r\n   *     port: findFreePort,\r\n   *     launchServer: [\"hostname\", \"port\", function (options, cb) {\r\n   *         startServer(options, cb);\r\n   *     }],\r\n   *     //...\r\n   * }, callback);\r\n   */\n  var constant = function /*...values*/\n  () {\n    var values = slice(arguments);\n    var args = [null].concat(values);\n    return function /*...ignoredArgs, callback*/\n    () {\n      var callback = arguments[arguments.length - 1];\n      return callback.apply(this, args);\n    };\n  };\n\n  /**\r\n   * This method returns the first argument it receives.\r\n   *\r\n   * @static\r\n   * @since 0.1.0\r\n   * @memberOf _\r\n   * @category Util\r\n   * @param {*} value Any value.\r\n   * @returns {*} Returns `value`.\r\n   * @example\r\n   *\r\n   * var object = { 'a': 1 };\r\n   *\r\n   * console.log(_.identity(object) === object);\r\n   * // => true\r\n   */\n  function identity(value) {\n    return value;\n  }\n  function _createTester(check, getResult) {\n    return function (eachfn, arr, iteratee, cb) {\n      cb = cb || noop;\n      var testPassed = false;\n      var testResult;\n      eachfn(arr, function (value, _, callback) {\n        iteratee(value, function (err, result) {\n          if (err) {\n            callback(err);\n          } else if (check(result) && !testResult) {\n            testPassed = true;\n            testResult = getResult(true, value);\n            callback(null, breakLoop);\n          } else {\n            callback();\n          }\n        });\n      }, function (err) {\n        if (err) {\n          cb(err);\n        } else {\n          cb(null, testPassed ? testResult : getResult(false));\n        }\n      });\n    };\n  }\n  function _findGetResult(v, x) {\n    return x;\n  }\n\n  /**\r\n   * Returns the first value in `coll` that passes an async truth test. The\r\n   * `iteratee` is applied in parallel, meaning the first iteratee to return\r\n   * `true` will fire the detect `callback` with that result. That means the\r\n   * result might not be the first item in the original `coll` (in terms of order)\r\n   * that passes the test.\r\n  \r\n   * If order within the original `coll` is important, then look at\r\n   * [`detectSeries`]{@link module:Collections.detectSeries}.\r\n   *\r\n   * @name detect\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias find\r\n   * @category Collections\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n   * The iteratee must complete with a boolean value as its result.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n   * Result will be the first item in the array that passes the truth test\r\n   * (iteratee) or the value `undefined` if none passed. Invoked with\r\n   * (err, result).\r\n   * @example\r\n   *\r\n   * async.detect(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result now equals the first file in the list that exists\r\n   * });\r\n   */\n  var detect = doParallel(_createTester(identity, _findGetResult));\n\n  /**\r\n   * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name detectLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.detect]{@link module:Collections.detect}\r\n   * @alias findLimit\r\n   * @category Collections\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n   * The iteratee must complete with a boolean value as its result.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n   * Result will be the first item in the array that passes the truth test\r\n   * (iteratee) or the value `undefined` if none passed. Invoked with\r\n   * (err, result).\r\n   */\n  var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\n\n  /**\r\n   * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\r\n   *\r\n   * @name detectSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.detect]{@link module:Collections.detect}\r\n   * @alias findSeries\r\n   * @category Collections\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n   * The iteratee must complete with a boolean value as its result.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n   * Result will be the first item in the array that passes the truth test\r\n   * (iteratee) or the value `undefined` if none passed. Invoked with\r\n   * (err, result).\r\n   */\n  var detectSeries = doLimit(detectLimit, 1);\n  function consoleFunc(name) {\n    return function (fn /*, ...args*/) {\n      var args = slice(arguments, 1);\n      args.push(function (err /*, ...args*/) {\n        var args = slice(arguments, 1);\n        if (typeof console === 'object') {\n          if (err) {\n            if (console.error) {\n              console.error(err);\n            }\n          } else if (console[name]) {\n            arrayEach(args, function (x) {\n              console[name](x);\n            });\n          }\n        }\n      });\n      wrapAsync(fn).apply(null, args);\n    };\n  }\n\n  /**\r\n   * Logs the result of an [`async` function]{@link AsyncFunction} to the\r\n   * `console` using `console.dir` to display the properties of the resulting object.\r\n   * Only works in Node.js or in browsers that support `console.dir` and\r\n   * `console.error` (such as FF and Chrome).\r\n   * If multiple arguments are returned from the async function,\r\n   * `console.dir` is called on each argument in order.\r\n   *\r\n   * @name dir\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} function - The function you want to eventually apply\r\n   * all arguments to.\r\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\r\n   * @example\r\n   *\r\n   * // in a module\r\n   * var hello = function(name, callback) {\r\n   *     setTimeout(function() {\r\n   *         callback(null, {hello: name});\r\n   *     }, 1000);\r\n   * };\r\n   *\r\n   * // in the node repl\r\n   * node> async.dir(hello, 'world');\r\n   * {hello: 'world'}\r\n   */\n  var dir = consoleFunc('dir');\n\n  /**\r\n   * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\r\n   * the order of operations, the arguments `test` and `fn` are switched.\r\n   *\r\n   * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\r\n   * @name doDuring\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.during]{@link module:ControlFlow.during}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} fn - An async function which is called each time\r\n   * `test` passes. Invoked with (callback).\r\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\r\n   * execution of `fn`. Invoked with (...args, callback), where `...args` are the\r\n   * non-error args from the previous callback of `fn`.\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `fn` has stopped. `callback`\r\n   * will be passed an error if one occurred, otherwise `null`.\r\n   */\n  function doDuring(fn, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var _fn = wrapAsync(fn);\n    var _test = wrapAsync(test);\n    function next(err /*, ...args*/) {\n      if (err) return callback(err);\n      var args = slice(arguments, 1);\n      args.push(check);\n      _test.apply(this, args);\n    }\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (!truth) return callback(null);\n      _fn(next);\n    }\n    check(null, true);\n  }\n\n  /**\r\n   * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\r\n   * the order of operations, the arguments `test` and `iteratee` are switched.\r\n   *\r\n   * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\r\n   *\r\n   * @name doWhilst\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} iteratee - A function which is called each time `test`\r\n   * passes. Invoked with (callback).\r\n   * @param {Function} test - synchronous truth test to perform after each\r\n   * execution of `iteratee`. Invoked with any non-error callback results of\r\n   * `iteratee`.\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `iteratee` has stopped.\r\n   * `callback` will be passed an error and any arguments passed to the final\r\n   * `iteratee`'s callback. Invoked with (err, [results]);\r\n   */\n  function doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    var next = function (err /*, ...args*/) {\n      if (err) return callback(err);\n      var args = slice(arguments, 1);\n      if (test.apply(this, args)) return _iteratee(next);\n      callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n  }\n\n  /**\r\n   * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\r\n   * argument ordering differs from `until`.\r\n   *\r\n   * @name doUntil\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} iteratee - An async function which is called each time\r\n   * `test` fails. Invoked with (callback).\r\n   * @param {Function} test - synchronous truth test to perform after each\r\n   * execution of `iteratee`. Invoked with any non-error callback results of\r\n   * `iteratee`.\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\r\n   * will be passed an error and any arguments passed to the final `iteratee`'s\r\n   * callback. Invoked with (err, [results]);\r\n   */\n  function doUntil(iteratee, test, callback) {\n    doWhilst(iteratee, function () {\n      return !test.apply(this, arguments);\n    }, callback);\n  }\n\n  /**\r\n   * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\r\n   * is passed a callback in the form of `function (err, truth)`. If error is\r\n   * passed to `test` or `fn`, the main callback is immediately called with the\r\n   * value of the error.\r\n   *\r\n   * @name during\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} test - asynchronous truth test to perform before each\r\n   * execution of `fn`. Invoked with (callback).\r\n   * @param {AsyncFunction} fn - An async function which is called each time\r\n   * `test` passes. Invoked with (callback).\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `fn` has stopped. `callback`\r\n   * will be passed an error, if one occurred, otherwise `null`.\r\n   * @example\r\n   *\r\n   * var count = 0;\r\n   *\r\n   * async.during(\r\n   *     function (callback) {\r\n   *         return callback(null, count < 5);\r\n   *     },\r\n   *     function (callback) {\r\n   *         count++;\r\n   *         setTimeout(callback, 1000);\r\n   *     },\r\n   *     function (err) {\r\n   *         // 5 seconds have passed\r\n   *     }\r\n   * );\r\n   */\n  function during(test, fn, callback) {\n    callback = onlyOnce(callback || noop);\n    var _fn = wrapAsync(fn);\n    var _test = wrapAsync(test);\n    function next(err) {\n      if (err) return callback(err);\n      _test(check);\n    }\n    function check(err, truth) {\n      if (err) return callback(err);\n      if (!truth) return callback(null);\n      _fn(next);\n    }\n    _test(check);\n  }\n  function _withoutIndex(iteratee) {\n    return function (value, index, callback) {\n      return iteratee(value, callback);\n    };\n  }\n\n  /**\r\n   * Applies the function `iteratee` to each item in `coll`, in parallel.\r\n   * The `iteratee` is called with an item from the list, and a callback for when\r\n   * it has finished. If the `iteratee` passes an error to its `callback`, the\r\n   * main `callback` (for the `each` function) is immediately called with the\r\n   * error.\r\n   *\r\n   * Note, that since this function applies `iteratee` to each item in parallel,\r\n   * there is no guarantee that the iteratee functions will complete in order.\r\n   *\r\n   * @name each\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias forEach\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to\r\n   * each item in `coll`. Invoked with (item, callback).\r\n   * The array index is not passed to the iteratee.\r\n   * If you need the index, use `eachOf`.\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   * @example\r\n   *\r\n   * // assuming openFiles is an array of file names and saveFile is a function\r\n   * // to save the modified contents of that file:\r\n   *\r\n   * async.each(openFiles, saveFile, function(err){\r\n   *   // if any of the saves produced an error, err would equal that error\r\n   * });\r\n   *\r\n   * // assuming openFiles is an array of file names\r\n   * async.each(openFiles, function(file, callback) {\r\n   *\r\n   *     // Perform operation on file here.\r\n   *     console.log('Processing file ' + file);\r\n   *\r\n   *     if( file.length > 32 ) {\r\n   *       console.log('This file name is too long');\r\n   *       callback('File name too long');\r\n   *     } else {\r\n   *       // Do work to process file here\r\n   *       console.log('File processed');\r\n   *       callback();\r\n   *     }\r\n   * }, function(err) {\r\n   *     // if any of the file processing produced an error, err would equal that error\r\n   *     if( err ) {\r\n   *       // One of the iterations produced an error.\r\n   *       // All processing will now stop.\r\n   *       console.log('A file failed to process');\r\n   *     } else {\r\n   *       console.log('All files have been processed successfully');\r\n   *     }\r\n   * });\r\n   */\n  function eachLimit(coll, iteratee, callback) {\n    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n\n  /**\r\n   * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name eachLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.each]{@link module:Collections.each}\r\n   * @alias forEachLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The array index is not passed to the iteratee.\r\n   * If you need the index, use `eachOfLimit`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   */\n  function eachLimit$1(coll, limit, iteratee, callback) {\n    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n  }\n\n  /**\r\n   * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\r\n   *\r\n   * @name eachSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.each]{@link module:Collections.each}\r\n   * @alias forEachSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each\r\n   * item in `coll`.\r\n   * The array index is not passed to the iteratee.\r\n   * If you need the index, use `eachOfSeries`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called when all\r\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n   */\n  var eachSeries = doLimit(eachLimit$1, 1);\n\n  /**\r\n   * Wrap an async function and ensure it calls its callback on a later tick of\r\n   * the event loop.  If the function already calls its callback on a next tick,\r\n   * no extra deferral is added. This is useful for preventing stack overflows\r\n   * (`RangeError: Maximum call stack size exceeded`) and generally keeping\r\n   * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\r\n   * contained. ES2017 `async` functions are returned as-is -- they are immune\r\n   * to Zalgo's corrupting influences, as they always resolve on a later tick.\r\n   *\r\n   * @name ensureAsync\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} fn - an async function, one that expects a node-style\r\n   * callback as its last argument.\r\n   * @returns {AsyncFunction} Returns a wrapped function with the exact same call\r\n   * signature as the function passed in.\r\n   * @example\r\n   *\r\n   * function sometimesAsync(arg, callback) {\r\n   *     if (cache[arg]) {\r\n   *         return callback(null, cache[arg]); // this would be synchronous!!\r\n   *     } else {\r\n   *         doSomeIO(arg, callback); // this IO would be asynchronous\r\n   *     }\r\n   * }\r\n   *\r\n   * // this has a risk of stack overflows if many results are cached in a row\r\n   * async.mapSeries(args, sometimesAsync, done);\r\n   *\r\n   * // this will defer sometimesAsync's callback if necessary,\r\n   * // preventing stack overflows\r\n   * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\r\n   */\n  function ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return initialParams(function (args, callback) {\n      var sync = true;\n      args.push(function () {\n        var innerArgs = arguments;\n        if (sync) {\n          setImmediate$1(function () {\n            callback.apply(null, innerArgs);\n          });\n        } else {\n          callback.apply(null, innerArgs);\n        }\n      });\n      fn.apply(this, args);\n      sync = false;\n    });\n  }\n  function notId(v) {\n    return !v;\n  }\n\n  /**\r\n   * Returns `true` if every element in `coll` satisfies an async test. If any\r\n   * iteratee call returns `false`, the main `callback` is immediately called.\r\n   *\r\n   * @name every\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias all\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collection in parallel.\r\n   * The iteratee must complete with a boolean result value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result will be either `true` or `false`\r\n   * depending on the values of the async tests. Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.every(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // if result is true then every file exists\r\n   * });\r\n   */\n  var every = doParallel(_createTester(notId, notId));\n\n  /**\r\n   * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name everyLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.every]{@link module:Collections.every}\r\n   * @alias allLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collection in parallel.\r\n   * The iteratee must complete with a boolean result value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result will be either `true` or `false`\r\n   * depending on the values of the async tests. Invoked with (err, result).\r\n   */\n  var everyLimit = doParallelLimit(_createTester(notId, notId));\n\n  /**\r\n   * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\r\n   *\r\n   * @name everySeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.every]{@link module:Collections.every}\r\n   * @alias allSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collection in series.\r\n   * The iteratee must complete with a boolean result value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result will be either `true` or `false`\r\n   * depending on the values of the async tests. Invoked with (err, result).\r\n   */\n  var everySeries = doLimit(everyLimit, 1);\n\n  /**\r\n   * The base implementation of `_.property` without support for deep paths.\r\n   *\r\n   * @private\r\n   * @param {string} key The key of the property to get.\r\n   * @returns {Function} Returns the new accessor function.\r\n   */\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? undefined : object[key];\n    };\n  }\n  function filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, function (x, index, callback) {\n      iteratee(x, function (err, v) {\n        truthValues[index] = !!v;\n        callback(err);\n      });\n    }, function (err) {\n      if (err) return callback(err);\n      var results = [];\n      for (var i = 0; i < arr.length; i++) {\n        if (truthValues[i]) results.push(arr[i]);\n      }\n      callback(null, results);\n    });\n  }\n  function filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, function (x, index, callback) {\n      iteratee(x, function (err, v) {\n        if (err) {\n          callback(err);\n        } else {\n          if (v) {\n            results.push({\n              index: index,\n              value: x\n            });\n          }\n          callback();\n        }\n      });\n    }, function (err) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, arrayMap(results.sort(function (a, b) {\n          return a.index - b.index;\n        }), baseProperty('value')));\n      }\n    });\n  }\n  function _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\n  }\n\n  /**\r\n   * Returns a new array of all the values in `coll` which pass an async truth\r\n   * test. This operation is performed in parallel, but the results array will be\r\n   * in the same order as the original.\r\n   *\r\n   * @name filter\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias select\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.filter(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, results) {\r\n   *     // results now equals an array of the existing files\r\n   * });\r\n   */\n  var filter = doParallel(_filter);\n\n  /**\r\n   * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name filterLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.filter]{@link module:Collections.filter}\r\n   * @alias selectLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   */\n  var filterLimit = doParallelLimit(_filter);\n\n  /**\r\n   * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\r\n   *\r\n   * @name filterSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.filter]{@link module:Collections.filter}\r\n   * @alias selectSeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n   * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n   * with a boolean argument once it has completed. Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results)\r\n   */\n  var filterSeries = doLimit(filterLimit, 1);\n\n  /**\r\n   * Calls the asynchronous function `fn` with a callback parameter that allows it\r\n   * to call itself again, in series, indefinitely.\r\n  \r\n   * If an error is passed to the callback then `errback` is called with the\r\n   * error, and execution stops, otherwise it will never be called.\r\n   *\r\n   * @name forever\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} fn - an async function to call repeatedly.\r\n   * Invoked with (next).\r\n   * @param {Function} [errback] - when `fn` passes an error to it's callback,\r\n   * this function will be called, and execution stops. Invoked with (err).\r\n   * @example\r\n   *\r\n   * async.forever(\r\n   *     function(next) {\r\n   *         // next is suitable for passing to things that need a callback(err [, whatever]);\r\n   *         // it will result in this function being called again.\r\n   *     },\r\n   *     function(err) {\r\n   *         // if next is called with a value in its first parameter, it will appear\r\n   *         // in here as 'err', and execution will stop.\r\n   *     }\r\n   * );\r\n   */\n  function forever(fn, errback) {\n    var done = onlyOnce(errback || noop);\n    var task = wrapAsync(ensureAsync(fn));\n    function next(err) {\n      if (err) return done(err);\n      task(next);\n    }\n    next();\n  }\n\n  /**\r\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name groupByLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.groupBy]{@link module:Collections.groupBy}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with a `key` to group the value under.\r\n   * Invoked with (value, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Result is an `Object` whoses\r\n   * properties are arrays of values which returned the corresponding key.\r\n   */\n  var groupByLimit = function (coll, limit, iteratee, callback) {\n    callback = callback || noop;\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(coll, limit, function (val, callback) {\n      _iteratee(val, function (err, key) {\n        if (err) return callback(err);\n        return callback(null, {\n          key: key,\n          val: val\n        });\n      });\n    }, function (err, mapResults) {\n      var result = {};\n      // from MDN, handle object having an `hasOwnProperty` prop\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      for (var i = 0; i < mapResults.length; i++) {\n        if (mapResults[i]) {\n          var key = mapResults[i].key;\n          var val = mapResults[i].val;\n          if (hasOwnProperty.call(result, key)) {\n            result[key].push(val);\n          } else {\n            result[key] = [val];\n          }\n        }\n      }\n      return callback(err, result);\n    });\n  };\n\n  /**\r\n   * Returns a new object, where each value corresponds to an array of items, from\r\n   * `coll`, that returned the corresponding key. That is, the keys of the object\r\n   * correspond to the values passed to the `iteratee` callback.\r\n   *\r\n   * Note: Since this function applies the `iteratee` to each item in parallel,\r\n   * there is no guarantee that the `iteratee` functions will complete in order.\r\n   * However, the values for each key in the `result` will be in the same order as\r\n   * the original `coll`. For Objects, the values will roughly be in the order of\r\n   * the original Objects' keys (but this can vary across JavaScript engines).\r\n   *\r\n   * @name groupBy\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with a `key` to group the value under.\r\n   * Invoked with (value, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Result is an `Object` whoses\r\n   * properties are arrays of values which returned the corresponding key.\r\n   * @example\r\n   *\r\n   * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\r\n   *     db.findById(userId, function(err, user) {\r\n   *         if (err) return callback(err);\r\n   *         return callback(null, user.age);\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result is object containing the userIds grouped by age\r\n   *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\r\n   * });\r\n   */\n  var groupBy = doLimit(groupByLimit, Infinity);\n\n  /**\r\n   * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\r\n   *\r\n   * @name groupBySeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.groupBy]{@link module:Collections.groupBy}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with a `key` to group the value under.\r\n   * Invoked with (value, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. Result is an `Object` whoses\r\n   * properties are arrays of values which returned the corresponding key.\r\n   */\n  var groupBySeries = doLimit(groupByLimit, 1);\n\n  /**\r\n   * Logs the result of an `async` function to the `console`. Only works in\r\n   * Node.js or in browsers that support `console.log` and `console.error` (such\r\n   * as FF and Chrome). If multiple arguments are returned from the async\r\n   * function, `console.log` is called on each argument in order.\r\n   *\r\n   * @name log\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} function - The function you want to eventually apply\r\n   * all arguments to.\r\n   * @param {...*} arguments... - Any number of arguments to apply to the function.\r\n   * @example\r\n   *\r\n   * // in a module\r\n   * var hello = function(name, callback) {\r\n   *     setTimeout(function() {\r\n   *         callback(null, 'hello ' + name);\r\n   *     }, 1000);\r\n   * };\r\n   *\r\n   * // in the node repl\r\n   * node> async.log(hello, 'world');\r\n   * 'hello world'\r\n   */\n  var log = consoleFunc('log');\n\n  /**\r\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name mapValuesLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.mapValues]{@link module:Collections.mapValues}\r\n   * @category Collection\r\n   * @param {Object} obj - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n   * in `coll`.\r\n   * The iteratee should complete with the transformed value as its result.\r\n   * Invoked with (value, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. `result` is a new object consisting\r\n   * of each key from `obj`, with each transformed value on the right-hand side.\r\n   * Invoked with (err, result).\r\n   */\n  function mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback || noop);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    eachOfLimit(obj, limit, function (val, key, next) {\n      _iteratee(val, key, function (err, result) {\n        if (err) return next(err);\n        newObj[key] = result;\n        next();\n      });\n    }, function (err) {\n      callback(err, newObj);\n    });\n  }\n\n  /**\r\n   * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\r\n   *\r\n   * Produces a new Object by mapping each value of `obj` through the `iteratee`\r\n   * function. The `iteratee` is called each `value` and `key` from `obj` and a\r\n   * callback for when it has finished processing. Each of these callbacks takes\r\n   * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\r\n   * passes an error to its callback, the main `callback` (for the `mapValues`\r\n   * function) is immediately called with the error.\r\n   *\r\n   * Note, the order of the keys in the result is not guaranteed.  The keys will\r\n   * be roughly in the order they complete, (but this is very engine-specific)\r\n   *\r\n   * @name mapValues\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Object} obj - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n   * in `coll`.\r\n   * The iteratee should complete with the transformed value as its result.\r\n   * Invoked with (value, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. `result` is a new object consisting\r\n   * of each key from `obj`, with each transformed value on the right-hand side.\r\n   * Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.mapValues({\r\n   *     f1: 'file1',\r\n   *     f2: 'file2',\r\n   *     f3: 'file3'\r\n   * }, function (file, key, callback) {\r\n   *   fs.stat(file, callback);\r\n   * }, function(err, result) {\r\n   *     // result is now a map of stats for each file, e.g.\r\n   *     // {\r\n   *     //     f1: [stats for file1],\r\n   *     //     f2: [stats for file2],\r\n   *     //     f3: [stats for file3]\r\n   *     // }\r\n   * });\r\n   */\n\n  var mapValues = doLimit(mapValuesLimit, Infinity);\n\n  /**\r\n   * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\r\n   *\r\n   * @name mapValuesSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.mapValues]{@link module:Collections.mapValues}\r\n   * @category Collection\r\n   * @param {Object} obj - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n   * in `coll`.\r\n   * The iteratee should complete with the transformed value as its result.\r\n   * Invoked with (value, key, callback).\r\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n   * functions have finished, or an error occurs. `result` is a new object consisting\r\n   * of each key from `obj`, with each transformed value on the right-hand side.\r\n   * Invoked with (err, result).\r\n   */\n  var mapValuesSeries = doLimit(mapValuesLimit, 1);\n  function has(obj, key) {\n    return key in obj;\n  }\n\n  /**\r\n   * Caches the results of an async function. When creating a hash to store\r\n   * function results against, the callback is omitted from the hash and an\r\n   * optional hash function can be used.\r\n   *\r\n   * If no hash function is specified, the first argument is used as a hash key,\r\n   * which may work reasonably if it is a string or a data type that converts to a\r\n   * distinct string. Note that objects and arrays will not behave reasonably.\r\n   * Neither will cases where the other arguments are significant. In such cases,\r\n   * specify your own hash function.\r\n   *\r\n   * The cache of results is exposed as the `memo` property of the function\r\n   * returned by `memoize`.\r\n   *\r\n   * @name memoize\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} fn - The async function to proxy and cache results from.\r\n   * @param {Function} hasher - An optional function for generating a custom hash\r\n   * for storing results. It has all the arguments applied to it apart from the\r\n   * callback, and must be synchronous.\r\n   * @returns {AsyncFunction} a memoized version of `fn`\r\n   * @example\r\n   *\r\n   * var slow_fn = function(name, callback) {\r\n   *     // do something\r\n   *     callback(null, result);\r\n   * };\r\n   * var fn = async.memoize(slow_fn);\r\n   *\r\n   * // fn can now be used as if it were slow_fn\r\n   * fn('some name', function() {\r\n   *     // callback\r\n   * });\r\n   */\n  function memoize(fn, hasher) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    hasher = hasher || identity;\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams(function memoized(args, callback) {\n      var key = hasher.apply(null, args);\n      if (has(memo, key)) {\n        setImmediate$1(function () {\n          callback.apply(null, memo[key]);\n        });\n      } else if (has(queues, key)) {\n        queues[key].push(callback);\n      } else {\n        queues[key] = [callback];\n        _fn.apply(null, args.concat(function /*args*/\n        () {\n          var args = slice(arguments);\n          memo[key] = args;\n          var q = queues[key];\n          delete queues[key];\n          for (var i = 0, l = q.length; i < l; i++) {\n            q[i].apply(null, args);\n          }\n        }));\n      }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n  }\n\n  /**\r\n   * Calls `callback` on a later loop around the event loop. In Node.js this just\r\n   * calls `process.nextTick`.  In the browser it will use `setImmediate` if\r\n   * available, otherwise `setTimeout(callback, 0)`, which means other higher\r\n   * priority events may precede the execution of `callback`.\r\n   *\r\n   * This is used internally for browser-compatibility purposes.\r\n   *\r\n   * @name nextTick\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @see [async.setImmediate]{@link module:Utils.setImmediate}\r\n   * @category Util\r\n   * @param {Function} callback - The function to call on a later loop around\r\n   * the event loop. Invoked with (args...).\r\n   * @param {...*} args... - any number of additional arguments to pass to the\r\n   * callback on the next tick.\r\n   * @example\r\n   *\r\n   * var call_order = [];\r\n   * async.nextTick(function() {\r\n   *     call_order.push('two');\r\n   *     // call_order now equals ['one','two']\r\n   * });\r\n   * call_order.push('one');\r\n   *\r\n   * async.setImmediate(function (a, b, c) {\r\n   *     // a, b, and c equal 1, 2, and 3\r\n   * }, 1, 2, 3);\r\n   */\n  var _defer$1;\n  if (hasNextTick) {\n    _defer$1 = process.nextTick;\n  } else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n  } else {\n    _defer$1 = fallback;\n  }\n  var nextTick = wrap(_defer$1);\n  function _parallel(eachfn, tasks, callback) {\n    callback = callback || noop;\n    var results = isArrayLike(tasks) ? [] : {};\n    eachfn(tasks, function (task, key, callback) {\n      wrapAsync(task)(function (err, result) {\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        }\n        results[key] = result;\n        callback(err);\n      });\n    }, function (err) {\n      callback(err, results);\n    });\n  }\n\n  /**\r\n   * Run the `tasks` collection of functions in parallel, without waiting until\r\n   * the previous function has completed. If any of the functions pass an error to\r\n   * its callback, the main `callback` is immediately called with the value of the\r\n   * error. Once the `tasks` have completed, the results are passed to the final\r\n   * `callback` as an array.\r\n   *\r\n   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\r\n   * parallel execution of code.  If your tasks do not use any timers or perform\r\n   * any I/O, they will actually be executed in series.  Any synchronous setup\r\n   * sections for each task will happen one after the other.  JavaScript remains\r\n   * single-threaded.\r\n   *\r\n   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\r\n   * execution of other tasks when a task fails.\r\n   *\r\n   * It is also possible to use an object instead of an array. Each property will\r\n   * be run as a function and the results will be passed to the final `callback`\r\n   * as an object instead of an array. This can be a more readable way of handling\r\n   * results from {@link async.parallel}.\r\n   *\r\n   * @name parallel\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} tasks - A collection of\r\n   * [async functions]{@link AsyncFunction} to run.\r\n   * Each async function can complete with any number of optional `result` values.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed successfully. This function gets a results array\r\n   * (or object) containing all the result arguments passed to the task callbacks.\r\n   * Invoked with (err, results).\r\n   *\r\n   * @example\r\n   * async.parallel([\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'two');\r\n   *         }, 100);\r\n   *     }\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // the results array will equal ['one','two'] even though\r\n   *     // the second function had a shorter timeout.\r\n   * });\r\n   *\r\n   * // an example using an object instead of an array\r\n   * async.parallel({\r\n   *     one: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 1);\r\n   *         }, 200);\r\n   *     },\r\n   *     two: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 2);\r\n   *         }, 100);\r\n   *     }\r\n   * }, function(err, results) {\r\n   *     // results is now equals to: {one: 1, two: 2}\r\n   * });\r\n   */\n  function parallelLimit(tasks, callback) {\n    _parallel(eachOf, tasks, callback);\n  }\n\n  /**\r\n   * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name parallelLimit\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.parallel]{@link module:ControlFlow.parallel}\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} tasks - A collection of\r\n   * [async functions]{@link AsyncFunction} to run.\r\n   * Each async function can complete with any number of optional `result` values.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed successfully. This function gets a results array\r\n   * (or object) containing all the result arguments passed to the task callbacks.\r\n   * Invoked with (err, results).\r\n   */\n  function parallelLimit$1(tasks, limit, callback) {\n    _parallel(_eachOfLimit(limit), tasks, callback);\n  }\n\n  /**\r\n   * A queue of tasks for the worker function to complete.\r\n   * @typedef {Object} QueueObject\r\n   * @memberOf module:ControlFlow\r\n   * @property {Function} length - a function returning the number of items\r\n   * waiting to be processed. Invoke with `queue.length()`.\r\n   * @property {boolean} started - a boolean indicating whether or not any\r\n   * items have been pushed and processed by the queue.\r\n   * @property {Function} running - a function returning the number of items\r\n   * currently being processed. Invoke with `queue.running()`.\r\n   * @property {Function} workersList - a function returning the array of items\r\n   * currently being processed. Invoke with `queue.workersList()`.\r\n   * @property {Function} idle - a function returning false if there are items\r\n   * waiting or being processed, or true if not. Invoke with `queue.idle()`.\r\n   * @property {number} concurrency - an integer for determining how many `worker`\r\n   * functions should be run in parallel. This property can be changed after a\r\n   * `queue` is created to alter the concurrency on-the-fly.\r\n   * @property {Function} push - add a new task to the `queue`. Calls `callback`\r\n   * once the `worker` has finished processing the task. Instead of a single task,\r\n   * a `tasks` array can be submitted. The respective callback is used for every\r\n   * task in the list. Invoke with `queue.push(task, [callback])`,\r\n   * @property {Function} unshift - add a new task to the front of the `queue`.\r\n   * Invoke with `queue.unshift(task, [callback])`.\r\n   * @property {Function} remove - remove items from the queue that match a test\r\n   * function.  The test function will be passed an object with a `data` property,\r\n   * and a `priority` property, if this is a\r\n   * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\r\n   * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\r\n   * `function ({data, priority}) {}` and returns a Boolean.\r\n   * @property {Function} saturated - a callback that is called when the number of\r\n   * running workers hits the `concurrency` limit, and further tasks will be\r\n   * queued.\r\n   * @property {Function} unsaturated - a callback that is called when the number\r\n   * of running workers is less than the `concurrency` & `buffer` limits, and\r\n   * further tasks will not be queued.\r\n   * @property {number} buffer - A minimum threshold buffer in order to say that\r\n   * the `queue` is `unsaturated`.\r\n   * @property {Function} empty - a callback that is called when the last item\r\n   * from the `queue` is given to a `worker`.\r\n   * @property {Function} drain - a callback that is called when the last item\r\n   * from the `queue` has returned from the `worker`.\r\n   * @property {Function} error - a callback that is called when a task errors.\r\n   * Has the signature `function(error, task)`.\r\n   * @property {boolean} paused - a boolean for determining whether the queue is\r\n   * in a paused state.\r\n   * @property {Function} pause - a function that pauses the processing of tasks\r\n   * until `resume()` is called. Invoke with `queue.pause()`.\r\n   * @property {Function} resume - a function that resumes the processing of\r\n   * queued tasks when the queue is paused. Invoke with `queue.resume()`.\r\n   * @property {Function} kill - a function that removes the `drain` callback and\r\n   * empties remaining tasks from the queue forcing it to go idle. No more tasks\r\n   * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\r\n   */\n\n  /**\r\n   * Creates a `queue` object with the specified `concurrency`. Tasks added to the\r\n   * `queue` are processed in parallel (up to the `concurrency` limit). If all\r\n   * `worker`s are in progress, the task is queued until one becomes available.\r\n   * Once a `worker` completes a `task`, that `task`'s callback is called.\r\n   *\r\n   * @name queue\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\r\n   * If you want to handle errors from an individual task, pass a callback to\r\n   * `q.push()`. Invoked with (task, callback).\r\n   * @param {number} [concurrency=1] - An `integer` for determining how many\r\n   * `worker` functions should be run in parallel.  If omitted, the concurrency\r\n   * defaults to `1`.  If the concurrency is `0`, an error is thrown.\r\n   * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\r\n   * attached as certain properties to listen for specific events during the\r\n   * lifecycle of the queue.\r\n   * @example\r\n   *\r\n   * // create a queue object with concurrency 2\r\n   * var q = async.queue(function(task, callback) {\r\n   *     console.log('hello ' + task.name);\r\n   *     callback();\r\n   * }, 2);\r\n   *\r\n   * // assign a callback\r\n   * q.drain = function() {\r\n   *     console.log('all items have been processed');\r\n   * };\r\n   *\r\n   * // add some items to the queue\r\n   * q.push({name: 'foo'}, function(err) {\r\n   *     console.log('finished processing foo');\r\n   * });\r\n   * q.push({name: 'bar'}, function (err) {\r\n   *     console.log('finished processing bar');\r\n   * });\r\n   *\r\n   * // add some items to the queue (batch-wise)\r\n   * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\r\n   *     console.log('finished processing item');\r\n   * });\r\n   *\r\n   * // add some items to the front of the queue\r\n   * q.unshift({name: 'bar'}, function (err) {\r\n   *     console.log('finished processing bar');\r\n   * });\r\n   */\n  var queue$1 = function (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue(function (items, cb) {\n      _worker(items[0], cb);\n    }, concurrency, 1);\n  };\n\n  /**\r\n   * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\r\n   * completed in ascending priority order.\r\n   *\r\n   * @name priorityQueue\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.queue]{@link module:ControlFlow.queue}\r\n   * @category Control Flow\r\n   * @param {AsyncFunction} worker - An async function for processing a queued task.\r\n   * If you want to handle errors from an individual task, pass a callback to\r\n   * `q.push()`.\r\n   * Invoked with (task, callback).\r\n   * @param {number} concurrency - An `integer` for determining how many `worker`\r\n   * functions should be run in parallel.  If omitted, the concurrency defaults to\r\n   * `1`.  If the concurrency is `0`, an error is thrown.\r\n   * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\r\n   * differences between `queue` and `priorityQueue` objects:\r\n   * * `push(task, priority, [callback])` - `priority` should be a number. If an\r\n   *   array of `tasks` is given, all tasks will be assigned the same priority.\r\n   * * The `unshift` method was removed.\r\n   */\n  var priorityQueue = function (worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    // Override push to accept second parameter representing priority\n    q.push = function (data, priority, callback) {\n      if (callback == null) callback = noop;\n      if (typeof callback !== 'function') {\n        throw new Error('task callback must be a function');\n      }\n      q.started = true;\n      if (!isArray(data)) {\n        data = [data];\n      }\n      if (data.length === 0) {\n        // call drain immediately if there are no tasks\n        return setImmediate$1(function () {\n          q.drain();\n        });\n      }\n      priority = priority || 0;\n      var nextNode = q._tasks.head;\n      while (nextNode && priority >= nextNode.priority) {\n        nextNode = nextNode.next;\n      }\n      for (var i = 0, l = data.length; i < l; i++) {\n        var item = {\n          data: data[i],\n          priority: priority,\n          callback: callback\n        };\n        if (nextNode) {\n          q._tasks.insertBefore(nextNode, item);\n        } else {\n          q._tasks.push(item);\n        }\n      }\n      setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n    return q;\n  };\n\n  /**\r\n   * Runs the `tasks` array of functions in parallel, without waiting until the\r\n   * previous function has completed. Once any of the `tasks` complete or pass an\r\n   * error to its callback, the main `callback` is immediately called. It's\r\n   * equivalent to `Promise.race()`.\r\n   *\r\n   * @name race\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\r\n   * to run. Each function can complete with an optional `result` value.\r\n   * @param {Function} callback - A callback to run once any of the functions have\r\n   * completed. This function gets an error or result from the first function that\r\n   * completed. Invoked with (err, result).\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * async.race([\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'two');\r\n   *         }, 100);\r\n   *     }\r\n   * ],\r\n   * // main callback\r\n   * function(err, result) {\r\n   *     // the result will be equal to 'two' as it finishes earlier\r\n   * });\r\n   */\n  function race(tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n      wrapAsync(tasks[i])(callback);\n    }\n  }\n\n  /**\r\n   * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\r\n   *\r\n   * @name reduceRight\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.reduce]{@link module:Collections.reduce}\r\n   * @alias foldr\r\n   * @category Collection\r\n   * @param {Array} array - A collection to iterate over.\r\n   * @param {*} memo - The initial state of the reduction.\r\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n   * array to produce the next step in the reduction.\r\n   * The `iteratee` should complete with the next state of the reduction.\r\n   * If the iteratee complete with an error, the reduction is stopped and the\r\n   * main `callback` is immediately called with the error.\r\n   * Invoked with (memo, item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result is the reduced value. Invoked with\r\n   * (err, result).\r\n   */\n  function reduceRight(array, memo, iteratee, callback) {\n    var reversed = slice(array).reverse();\n    reduce(reversed, memo, iteratee, callback);\n  }\n\n  /**\r\n   * Wraps the async function in another function that always completes with a\r\n   * result object, even when it errors.\r\n   *\r\n   * The result object has either the property `error` or `value`.\r\n   *\r\n   * @name reflect\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} fn - The async function you want to wrap\r\n   * @returns {Function} - A function that always passes null to it's callback as\r\n   * the error. The second argument to the callback will be an `object` with\r\n   * either an `error` or a `value` property.\r\n   * @example\r\n   *\r\n   * async.parallel([\r\n   *     async.reflect(function(callback) {\r\n   *         // do some stuff ...\r\n   *         callback(null, 'one');\r\n   *     }),\r\n   *     async.reflect(function(callback) {\r\n   *         // do some more stuff but error ...\r\n   *         callback('bad stuff happened');\r\n   *     }),\r\n   *     async.reflect(function(callback) {\r\n   *         // do some more stuff ...\r\n   *         callback(null, 'two');\r\n   *     })\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // values\r\n   *     // results[0].value = 'one'\r\n   *     // results[1].error = 'bad stuff happened'\r\n   *     // results[2].value = 'two'\r\n   * });\r\n   */\n  function reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n      args.push(function callback(error, cbArg) {\n        if (error) {\n          reflectCallback(null, {\n            error: error\n          });\n        } else {\n          var value;\n          if (arguments.length <= 2) {\n            value = cbArg;\n          } else {\n            value = slice(arguments, 1);\n          }\n          reflectCallback(null, {\n            value: value\n          });\n        }\n      });\n      return _fn.apply(this, args);\n    });\n  }\n\n  /**\r\n   * A helper function that wraps an array or an object of functions with `reflect`.\r\n   *\r\n   * @name reflectAll\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @see [async.reflect]{@link module:Utils.reflect}\r\n   * @category Util\r\n   * @param {Array|Object|Iterable} tasks - The collection of\r\n   * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\r\n   * @returns {Array} Returns an array of async functions, each wrapped in\r\n   * `async.reflect`\r\n   * @example\r\n   *\r\n   * let tasks = [\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     function(callback) {\r\n   *         // do some more stuff but error ...\r\n   *         callback(new Error('bad stuff happened'));\r\n   *     },\r\n   *     function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'two');\r\n   *         }, 100);\r\n   *     }\r\n   * ];\r\n   *\r\n   * async.parallel(async.reflectAll(tasks),\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // values\r\n   *     // results[0].value = 'one'\r\n   *     // results[1].error = Error('bad stuff happened')\r\n   *     // results[2].value = 'two'\r\n   * });\r\n   *\r\n   * // an example using an object instead of an array\r\n   * let tasks = {\r\n   *     one: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'one');\r\n   *         }, 200);\r\n   *     },\r\n   *     two: function(callback) {\r\n   *         callback('two');\r\n   *     },\r\n   *     three: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 'three');\r\n   *         }, 100);\r\n   *     }\r\n   * };\r\n   *\r\n   * async.parallel(async.reflectAll(tasks),\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // values\r\n   *     // results.one.value = 'one'\r\n   *     // results.two.error = 'two'\r\n   *     // results.three.value = 'three'\r\n   * });\r\n   */\n  function reflectAll(tasks) {\n    var results;\n    if (isArray(tasks)) {\n      results = arrayMap(tasks, reflect);\n    } else {\n      results = {};\n      baseForOwn(tasks, function (task, key) {\n        results[key] = reflect.call(this, task);\n      });\n    }\n    return results;\n  }\n  function reject$1(eachfn, arr, iteratee, callback) {\n    _filter(eachfn, arr, function (value, cb) {\n      iteratee(value, function (err, v) {\n        cb(err, !v);\n      });\n    }, callback);\n  }\n\n  /**\r\n   * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\r\n   *\r\n   * @name reject\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.filter]{@link module:Collections.filter}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - An async truth test to apply to each item in\r\n   * `coll`.\r\n   * The should complete with a boolean value as its `result`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.reject(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, results) {\r\n   *     // results now equals an array of missing files\r\n   *     createFiles(results);\r\n   * });\r\n   */\n  var reject = doParallel(reject$1);\n\n  /**\r\n   * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name rejectLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.reject]{@link module:Collections.reject}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {Function} iteratee - An async truth test to apply to each item in\r\n   * `coll`.\r\n   * The should complete with a boolean value as its `result`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   */\n  var rejectLimit = doParallelLimit(reject$1);\n\n  /**\r\n   * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\r\n   *\r\n   * @name rejectSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.reject]{@link module:Collections.reject}\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {Function} iteratee - An async truth test to apply to each item in\r\n   * `coll`.\r\n   * The should complete with a boolean value as its `result`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Invoked with (err, results).\r\n   */\n  var rejectSeries = doLimit(rejectLimit, 1);\n\n  /**\r\n   * Creates a function that returns `value`.\r\n   *\r\n   * @static\r\n   * @memberOf _\r\n   * @since 2.4.0\r\n   * @category Util\r\n   * @param {*} value The value to return from the new function.\r\n   * @returns {Function} Returns the new constant function.\r\n   * @example\r\n   *\r\n   * var objects = _.times(2, _.constant({ 'a': 1 }));\r\n   *\r\n   * console.log(objects);\r\n   * // => [{ 'a': 1 }, { 'a': 1 }]\r\n   *\r\n   * console.log(objects[0] === objects[1]);\r\n   * // => true\r\n   */\n  function constant$1(value) {\n    return function () {\n      return value;\n    };\n  }\n\n  /**\r\n   * Attempts to get a successful response from `task` no more than `times` times\r\n   * before returning an error. If the task is successful, the `callback` will be\r\n   * passed the result of the successful task. If all attempts fail, the callback\r\n   * will be passed the error and result (if any) of the final attempt.\r\n   *\r\n   * @name retry\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @see [async.retryable]{@link module:ControlFlow.retryable}\r\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\r\n   * object with `times` and `interval` or a number.\r\n   * * `times` - The number of attempts to make before giving up.  The default\r\n   *   is `5`.\r\n   * * `interval` - The time to wait between retries, in milliseconds.  The\r\n   *   default is `0`. The interval may also be specified as a function of the\r\n   *   retry count (see example).\r\n   * * `errorFilter` - An optional synchronous function that is invoked on\r\n   *   erroneous result. If it returns `true` the retry attempts will continue;\r\n   *   if the function returns `false` the retry flow is aborted with the current\r\n   *   attempt's error and result being returned to the final callback.\r\n   *   Invoked with (err).\r\n   * * If `opts` is a number, the number specifies the number of times to retry,\r\n   *   with the default interval of `0`.\r\n   * @param {AsyncFunction} task - An async function to retry.\r\n   * Invoked with (callback).\r\n   * @param {Function} [callback] - An optional callback which is called when the\r\n   * task has succeeded, or after the final failed attempt. It receives the `err`\r\n   * and `result` arguments of the last attempt at completing the `task`. Invoked\r\n   * with (err, results).\r\n   *\r\n   * @example\r\n   *\r\n   * // The `retry` function can be used as a stand-alone control flow by passing\r\n   * // a callback, as shown below:\r\n   *\r\n   * // try calling apiMethod 3 times\r\n   * async.retry(3, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod 3 times, waiting 200 ms between each retry\r\n   * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod 10 times with exponential backoff\r\n   * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\r\n   * async.retry({\r\n   *   times: 10,\r\n   *   interval: function(retryCount) {\r\n   *     return 50 * Math.pow(2, retryCount);\r\n   *   }\r\n   * }, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod the default 5 times no delay between each retry\r\n   * async.retry(apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // try calling apiMethod only when error condition satisfies, all other\r\n   * // errors will abort the retry control flow and return to final callback\r\n   * async.retry({\r\n   *   errorFilter: function(err) {\r\n   *     return err.message === 'Temporary error'; // only retry on a specific error\r\n   *   }\r\n   * }, apiMethod, function(err, result) {\r\n   *     // do something with the result\r\n   * });\r\n   *\r\n   * // to retry individual methods that are not as reliable within other\r\n   * // control flow functions, use the `retryable` wrapper:\r\n   * async.auto({\r\n   *     users: api.getUsers.bind(api),\r\n   *     payments: async.retryable(3, api.getPayments.bind(api))\r\n   * }, function(err, results) {\r\n   *     // do something with the results\r\n   * });\r\n   *\r\n   */\n  function retry(opts, task, callback) {\n    var DEFAULT_TIMES = 5;\n    var DEFAULT_INTERVAL = 0;\n    var options = {\n      times: DEFAULT_TIMES,\n      intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n    function parseTimes(acc, t) {\n      if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n        acc.intervalFunc = typeof t.interval === 'function' ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);\n        acc.errorFilter = t.errorFilter;\n      } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n      } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n      }\n    }\n    if (arguments.length < 3 && typeof opts === 'function') {\n      callback = task || noop;\n      task = opts;\n    } else {\n      parseTimes(options, opts);\n      callback = callback || noop;\n    }\n    if (typeof task !== 'function') {\n      throw new Error(\"Invalid arguments for async.retry\");\n    }\n    var _task = wrapAsync(task);\n    var attempt = 1;\n    function retryAttempt() {\n      _task(function (err) {\n        if (err && attempt++ < options.times && (typeof options.errorFilter != 'function' || options.errorFilter(err))) {\n          setTimeout(retryAttempt, options.intervalFunc(attempt));\n        } else {\n          callback.apply(null, arguments);\n        }\n      });\n    }\n    retryAttempt();\n  }\n\n  /**\r\n   * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\r\n   * wraps a task and makes it retryable, rather than immediately calling it\r\n   * with retries.\r\n   *\r\n   * @name retryable\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.retry]{@link module:ControlFlow.retry}\r\n   * @category Control Flow\r\n   * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\r\n   * options, exactly the same as from `retry`\r\n   * @param {AsyncFunction} task - the asynchronous function to wrap.\r\n   * This function will be passed any arguments passed to the returned wrapper.\r\n   * Invoked with (...args, callback).\r\n   * @returns {AsyncFunction} The wrapped function, which when invoked, will\r\n   * retry on an error, based on the parameters specified in `opts`.\r\n   * This function will accept the same parameters as `task`.\r\n   * @example\r\n   *\r\n   * async.auto({\r\n   *     dep1: async.retryable(3, getFromFlakyService),\r\n   *     process: [\"dep1\", async.retryable(3, function (results, cb) {\r\n   *         maybeProcessData(results.dep1, cb);\r\n   *     })]\r\n   * }, callback);\r\n   */\n  var retryable = function (opts, task) {\n    if (!task) {\n      task = opts;\n      opts = null;\n    }\n    var _task = wrapAsync(task);\n    return initialParams(function (args, callback) {\n      function taskFn(cb) {\n        _task.apply(null, args.concat(cb));\n      }\n      if (opts) retry(opts, taskFn, callback);else retry(taskFn, callback);\n    });\n  };\n\n  /**\r\n   * Run the functions in the `tasks` collection in series, each one running once\r\n   * the previous function has completed. If any functions in the series pass an\r\n   * error to its callback, no more functions are run, and `callback` is\r\n   * immediately called with the value of the error. Otherwise, `callback`\r\n   * receives an array of results when `tasks` have completed.\r\n   *\r\n   * It is also possible to use an object instead of an array. Each property will\r\n   * be run as a function, and the results will be passed to the final `callback`\r\n   * as an object instead of an array. This can be a more readable way of handling\r\n   *  results from {@link async.series}.\r\n   *\r\n   * **Note** that while many implementations preserve the order of object\r\n   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\r\n   * explicitly states that\r\n   *\r\n   * > The mechanics and order of enumerating the properties is not specified.\r\n   *\r\n   * So if you rely on the order in which your series of functions are executed,\r\n   * and want this to work on all platforms, consider using an array.\r\n   *\r\n   * @name series\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} tasks - A collection containing\r\n   * [async functions]{@link AsyncFunction} to run in series.\r\n   * Each function can complete with any number of optional `result` values.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed. This function gets a results array (or object)\r\n   * containing all the result arguments passed to the `task` callbacks. Invoked\r\n   * with (err, result).\r\n   * @example\r\n   * async.series([\r\n   *     function(callback) {\r\n   *         // do some stuff ...\r\n   *         callback(null, 'one');\r\n   *     },\r\n   *     function(callback) {\r\n   *         // do some more stuff ...\r\n   *         callback(null, 'two');\r\n   *     }\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     // results is now equal to ['one', 'two']\r\n   * });\r\n   *\r\n   * async.series({\r\n   *     one: function(callback) {\r\n   *         setTimeout(function() {\r\n   *             callback(null, 1);\r\n   *         }, 200);\r\n   *     },\r\n   *     two: function(callback){\r\n   *         setTimeout(function() {\r\n   *             callback(null, 2);\r\n   *         }, 100);\r\n   *     }\r\n   * }, function(err, results) {\r\n   *     // results is now equal to: {one: 1, two: 2}\r\n   * });\r\n   */\n  function series(tasks, callback) {\n    _parallel(eachOfSeries, tasks, callback);\n  }\n\n  /**\r\n   * Returns `true` if at least one element in the `coll` satisfies an async test.\r\n   * If any iteratee call returns `true`, the main `callback` is immediately\r\n   * called.\r\n   *\r\n   * @name some\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @alias any\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collections in parallel.\r\n   * The iteratee should complete with a boolean `result` value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the iteratee functions have finished.\r\n   * Result will be either `true` or `false` depending on the values of the async\r\n   * tests. Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.some(['file1','file2','file3'], function(filePath, callback) {\r\n   *     fs.access(filePath, function(err) {\r\n   *         callback(null, !err)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // if result is true then at least one of the files exists\r\n   * });\r\n   */\n  var some = doParallel(_createTester(Boolean, identity));\n\n  /**\r\n   * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\r\n   *\r\n   * @name someLimit\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.some]{@link module:Collections.some}\r\n   * @alias anyLimit\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collections in parallel.\r\n   * The iteratee should complete with a boolean `result` value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the iteratee functions have finished.\r\n   * Result will be either `true` or `false` depending on the values of the async\r\n   * tests. Invoked with (err, result).\r\n   */\n  var someLimit = doParallelLimit(_createTester(Boolean, identity));\n\n  /**\r\n   * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\r\n   *\r\n   * @name someSeries\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @see [async.some]{@link module:Collections.some}\r\n   * @alias anySeries\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n   * in the collections in series.\r\n   * The iteratee should complete with a boolean `result` value.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} [callback] - A callback which is called as soon as any\r\n   * iteratee returns `true`, or after all the iteratee functions have finished.\r\n   * Result will be either `true` or `false` depending on the values of the async\r\n   * tests. Invoked with (err, result).\r\n   */\n  var someSeries = doLimit(someLimit, 1);\n\n  /**\r\n   * Sorts a list by the results of running each `coll` value through an async\r\n   * `iteratee`.\r\n   *\r\n   * @name sortBy\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n   * `coll`.\r\n   * The iteratee should complete with a value to use as the sort criteria as\r\n   * its `result`.\r\n   * Invoked with (item, callback).\r\n   * @param {Function} callback - A callback which is called after all the\r\n   * `iteratee` functions have finished, or an error occurs. Results is the items\r\n   * from the original `coll` sorted by the values returned by the `iteratee`\r\n   * calls. Invoked with (err, results).\r\n   * @example\r\n   *\r\n   * async.sortBy(['file1','file2','file3'], function(file, callback) {\r\n   *     fs.stat(file, function(err, stats) {\r\n   *         callback(err, stats.mtime);\r\n   *     });\r\n   * }, function(err, results) {\r\n   *     // results is now the original array of files sorted by\r\n   *     // modified date\r\n   * });\r\n   *\r\n   * // By modifying the callback parameter the\r\n   * // sorting order can be influenced:\r\n   *\r\n   * // ascending order\r\n   * async.sortBy([1,9,3,5], function(x, callback) {\r\n   *     callback(null, x);\r\n   * }, function(err,result) {\r\n   *     // result callback\r\n   * });\r\n   *\r\n   * // descending order\r\n   * async.sortBy([1,9,3,5], function(x, callback) {\r\n   *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\r\n   * }, function(err,result) {\r\n   *     // result callback\r\n   * });\r\n   */\n  function sortBy(coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    map(coll, function (x, callback) {\n      _iteratee(x, function (err, criteria) {\n        if (err) return callback(err);\n        callback(null, {\n          value: x,\n          criteria: criteria\n        });\n      });\n    }, function (err, results) {\n      if (err) return callback(err);\n      callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\n    });\n    function comparator(left, right) {\n      var a = left.criteria,\n        b = right.criteria;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }\n  }\n\n  /**\r\n   * Sets a time limit on an asynchronous function. If the function does not call\r\n   * its callback within the specified milliseconds, it will be called with a\r\n   * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\r\n   *\r\n   * @name timeout\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @category Util\r\n   * @param {AsyncFunction} asyncFn - The async function to limit in time.\r\n   * @param {number} milliseconds - The specified time limit.\r\n   * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\r\n   * to timeout Error for more information..\r\n   * @returns {AsyncFunction} Returns a wrapped function that can be used with any\r\n   * of the control flow functions.\r\n   * Invoke this function with the same parameters as you would `asyncFunc`.\r\n   * @example\r\n   *\r\n   * function myFunction(foo, callback) {\r\n   *     doAsyncTask(foo, function(err, data) {\r\n   *         // handle errors\r\n   *         if (err) return callback(err);\r\n   *\r\n   *         // do some stuff ...\r\n   *\r\n   *         // return processed data\r\n   *         return callback(null, data);\r\n   *     });\r\n   * }\r\n   *\r\n   * var wrapped = async.timeout(myFunction, 1000);\r\n   *\r\n   * // call `wrapped` as you would `myFunction`\r\n   * wrapped({ bar: 'bar' }, function(err, data) {\r\n   *     // if `myFunction` takes < 1000 ms to execute, `err`\r\n   *     // and `data` will have their expected values\r\n   *\r\n   *     // else `err` will be an Error with the code 'ETIMEDOUT'\r\n   * });\r\n   */\n  function timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n    return initialParams(function (args, callback) {\n      var timedOut = false;\n      var timer;\n      function timeoutCallback() {\n        var name = asyncFn.name || 'anonymous';\n        var error = new Error('Callback function \"' + name + '\" timed out.');\n        error.code = 'ETIMEDOUT';\n        if (info) {\n          error.info = info;\n        }\n        timedOut = true;\n        callback(error);\n      }\n      args.push(function () {\n        if (!timedOut) {\n          callback.apply(null, arguments);\n          clearTimeout(timer);\n        }\n      });\n\n      // setup timer and call original function\n      timer = setTimeout(timeoutCallback, milliseconds);\n      fn.apply(null, args);\n    });\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeCeil = Math.ceil;\n  var nativeMax = Math.max;\n\n  /**\r\n   * The base implementation of `_.range` and `_.rangeRight` which doesn't\r\n   * coerce arguments.\r\n   *\r\n   * @private\r\n   * @param {number} start The start of the range.\r\n   * @param {number} end The end of the range.\r\n   * @param {number} step The value to increment or decrement by.\r\n   * @param {boolean} [fromRight] Specify iterating from right to left.\r\n   * @returns {Array} Returns the range of numbers.\r\n   */\n  function baseRange(start, end, step, fromRight) {\n    var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n    while (length--) {\n      result[fromRight ? length : ++index] = start;\n      start += step;\n    }\n    return result;\n  }\n\n  /**\r\n   * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\r\n   * time.\r\n   *\r\n   * @name timesLimit\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.times]{@link module:ControlFlow.times}\r\n   * @category Control Flow\r\n   * @param {number} count - The number of times to run the function.\r\n   * @param {number} limit - The maximum number of async operations at a time.\r\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n   * Invoked with the iteration index and a callback: (n, next).\r\n   * @param {Function} callback - see [async.map]{@link module:Collections.map}.\r\n   */\n  function timeLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\n  }\n\n  /**\r\n   * Calls the `iteratee` function `n` times, and accumulates results in the same\r\n   * manner you would use with [map]{@link module:Collections.map}.\r\n   *\r\n   * @name times\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.map]{@link module:Collections.map}\r\n   * @category Control Flow\r\n   * @param {number} n - The number of times to run the function.\r\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n   * Invoked with the iteration index and a callback: (n, next).\r\n   * @param {Function} callback - see {@link module:Collections.map}.\r\n   * @example\r\n   *\r\n   * // Pretend this is some complicated async factory\r\n   * var createUser = function(id, callback) {\r\n   *     callback(null, {\r\n   *         id: 'user' + id\r\n   *     });\r\n   * };\r\n   *\r\n   * // generate 5 users\r\n   * async.times(5, function(n, next) {\r\n   *     createUser(n, function(err, user) {\r\n   *         next(err, user);\r\n   *     });\r\n   * }, function(err, users) {\r\n   *     // we should now have 5 users\r\n   * });\r\n   */\n  var times = doLimit(timeLimit, Infinity);\n\n  /**\r\n   * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\r\n   *\r\n   * @name timesSeries\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.times]{@link module:ControlFlow.times}\r\n   * @category Control Flow\r\n   * @param {number} n - The number of times to run the function.\r\n   * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n   * Invoked with the iteration index and a callback: (n, next).\r\n   * @param {Function} callback - see {@link module:Collections.map}.\r\n   */\n  var timesSeries = doLimit(timeLimit, 1);\n\n  /**\r\n   * A relative of `reduce`.  Takes an Object or Array, and iterates over each\r\n   * element in series, each step potentially mutating an `accumulator` value.\r\n   * The type of the accumulator defaults to the type of collection passed in.\r\n   *\r\n   * @name transform\r\n   * @static\r\n   * @memberOf module:Collections\r\n   * @method\r\n   * @category Collection\r\n   * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n   * @param {*} [accumulator] - The initial state of the transform.  If omitted,\r\n   * it will default to an empty Object or Array, depending on the type of `coll`\r\n   * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n   * collection that potentially modifies the accumulator.\r\n   * Invoked with (accumulator, item, key, callback).\r\n   * @param {Function} [callback] - A callback which is called after all the\r\n   * `iteratee` functions have finished. Result is the transformed accumulator.\r\n   * Invoked with (err, result).\r\n   * @example\r\n   *\r\n   * async.transform([1,2,3], function(acc, item, index, callback) {\r\n   *     // pointless async:\r\n   *     process.nextTick(function() {\r\n   *         acc.push(item * 2)\r\n   *         callback(null)\r\n   *     });\r\n   * }, function(err, result) {\r\n   *     // result is now equal to [2, 4, 6]\r\n   * });\r\n   *\r\n   * @example\r\n   *\r\n   * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\r\n   *     setImmediate(function () {\r\n   *         obj[key] = val * 2;\r\n   *         callback();\r\n   *     })\r\n   * }, function (err, result) {\r\n   *     // result is equal to {a: 2, b: 4, c: 6}\r\n   * })\r\n   */\n  function transform(coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3) {\n      callback = iteratee;\n      iteratee = accumulator;\n      accumulator = isArray(coll) ? [] : {};\n    }\n    callback = once(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    eachOf(coll, function (v, k, cb) {\n      _iteratee(accumulator, v, k, cb);\n    }, function (err) {\n      callback(err, accumulator);\n    });\n  }\n\n  /**\r\n   * It runs each task in series but stops whenever any of the functions were\r\n   * successful. If one of the tasks were successful, the `callback` will be\r\n   * passed the result of the successful task. If all tasks fail, the callback\r\n   * will be passed the error and result (if any) of the final attempt.\r\n   *\r\n   * @name tryEach\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array|Iterable|Object} tasks - A collection containing functions to\r\n   * run, each function is passed a `callback(err, result)` it must call on\r\n   * completion with an error `err` (which can be `null`) and an optional `result`\r\n   * value.\r\n   * @param {Function} [callback] - An optional callback which is called when one\r\n   * of the tasks has succeeded, or all have failed. It receives the `err` and\r\n   * `result` arguments of the last attempt at completing the `task`. Invoked with\r\n   * (err, results).\r\n   * @example\r\n   * async.tryEach([\r\n   *     function getDataFromFirstWebsite(callback) {\r\n   *         // Try getting the data from the first website\r\n   *         callback(err, data);\r\n   *     },\r\n   *     function getDataFromSecondWebsite(callback) {\r\n   *         // First website failed,\r\n   *         // Try getting the data from the backup website\r\n   *         callback(err, data);\r\n   *     }\r\n   * ],\r\n   * // optional callback\r\n   * function(err, results) {\r\n   *     Now do something with the data.\r\n   * });\r\n   *\r\n   */\n  function tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    callback = callback || noop;\n    eachSeries(tasks, function (task, callback) {\n      wrapAsync(task)(function (err, res /*, ...args*/) {\n        if (arguments.length > 2) {\n          result = slice(arguments, 1);\n        } else {\n          result = res;\n        }\n        error = err;\n        callback(!err);\n      });\n    }, function () {\n      callback(error, result);\n    });\n  }\n\n  /**\r\n   * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\r\n   * unmemoized form. Handy for testing.\r\n   *\r\n   * @name unmemoize\r\n   * @static\r\n   * @memberOf module:Utils\r\n   * @method\r\n   * @see [async.memoize]{@link module:Utils.memoize}\r\n   * @category Util\r\n   * @param {AsyncFunction} fn - the memoized function\r\n   * @returns {AsyncFunction} a function that calls the original unmemoized function\r\n   */\n  function unmemoize(fn) {\n    return function () {\n      return (fn.unmemoized || fn).apply(null, arguments);\n    };\n  }\n\n  /**\r\n   * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\r\n   * stopped, or an error occurs.\r\n   *\r\n   * @name whilst\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Function} test - synchronous truth test to perform before each\r\n   * execution of `iteratee`. Invoked with ().\r\n   * @param {AsyncFunction} iteratee - An async function which is called each time\r\n   * `test` passes. Invoked with (callback).\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has failed and repeated execution of `iteratee` has stopped. `callback`\r\n   * will be passed an error and any arguments passed to the final `iteratee`'s\r\n   * callback. Invoked with (err, [results]);\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * var count = 0;\r\n   * async.whilst(\r\n   *     function() { return count < 5; },\r\n   *     function(callback) {\r\n   *         count++;\r\n   *         setTimeout(function() {\r\n   *             callback(null, count);\r\n   *         }, 1000);\r\n   *     },\r\n   *     function (err, n) {\r\n   *         // 5 seconds have passed, n = 5\r\n   *     }\r\n   * );\r\n   */\n  function whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback || noop);\n    var _iteratee = wrapAsync(iteratee);\n    if (!test()) return callback(null);\n    var next = function (err /*, ...args*/) {\n      if (err) return callback(err);\n      if (test()) return _iteratee(next);\n      var args = slice(arguments, 1);\n      callback.apply(null, [null].concat(args));\n    };\n    _iteratee(next);\n  }\n\n  /**\r\n   * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\r\n   * stopped, or an error occurs. `callback` will be passed an error and any\r\n   * arguments passed to the final `iteratee`'s callback.\r\n   *\r\n   * The inverse of [whilst]{@link module:ControlFlow.whilst}.\r\n   *\r\n   * @name until\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n   * @category Control Flow\r\n   * @param {Function} test - synchronous truth test to perform before each\r\n   * execution of `iteratee`. Invoked with ().\r\n   * @param {AsyncFunction} iteratee - An async function which is called each time\r\n   * `test` fails. Invoked with (callback).\r\n   * @param {Function} [callback] - A callback which is called after the test\r\n   * function has passed and repeated execution of `iteratee` has stopped. `callback`\r\n   * will be passed an error and any arguments passed to the final `iteratee`'s\r\n   * callback. Invoked with (err, [results]);\r\n   */\n  function until(test, iteratee, callback) {\n    whilst(function () {\n      return !test.apply(this, arguments);\n    }, iteratee, callback);\n  }\n\n  /**\r\n   * Runs the `tasks` array of functions in series, each passing their results to\r\n   * the next in the array. However, if any of the `tasks` pass an error to their\r\n   * own callback, the next function is not executed, and the main `callback` is\r\n   * immediately called with the error.\r\n   *\r\n   * @name waterfall\r\n   * @static\r\n   * @memberOf module:ControlFlow\r\n   * @method\r\n   * @category Control Flow\r\n   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\r\n   * to run.\r\n   * Each function should complete with any number of `result` values.\r\n   * The `result` values will be passed as arguments, in order, to the next task.\r\n   * @param {Function} [callback] - An optional callback to run once all the\r\n   * functions have completed. This will be passed the results of the last task's\r\n   * callback. Invoked with (err, [results]).\r\n   * @returns undefined\r\n   * @example\r\n   *\r\n   * async.waterfall([\r\n   *     function(callback) {\r\n   *         callback(null, 'one', 'two');\r\n   *     },\r\n   *     function(arg1, arg2, callback) {\r\n   *         // arg1 now equals 'one' and arg2 now equals 'two'\r\n   *         callback(null, 'three');\r\n   *     },\r\n   *     function(arg1, callback) {\r\n   *         // arg1 now equals 'three'\r\n   *         callback(null, 'done');\r\n   *     }\r\n   * ], function (err, result) {\r\n   *     // result now equals 'done'\r\n   * });\r\n   *\r\n   * // Or, with named functions:\r\n   * async.waterfall([\r\n   *     myFirstFunction,\r\n   *     mySecondFunction,\r\n   *     myLastFunction,\r\n   * ], function (err, result) {\r\n   *     // result now equals 'done'\r\n   * });\r\n   * function myFirstFunction(callback) {\r\n   *     callback(null, 'one', 'two');\r\n   * }\r\n   * function mySecondFunction(arg1, arg2, callback) {\r\n   *     // arg1 now equals 'one' and arg2 now equals 'two'\r\n   *     callback(null, 'three');\r\n   * }\r\n   * function myLastFunction(arg1, callback) {\r\n   *     // arg1 now equals 'three'\r\n   *     callback(null, 'done');\r\n   * }\r\n   */\n  var waterfall = function (tasks, callback) {\n    callback = once(callback || noop);\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n    function nextTask(args) {\n      var task = wrapAsync(tasks[taskIndex++]);\n      args.push(onlyOnce(next));\n      task.apply(null, args);\n    }\n    function next(err /*, ...args*/) {\n      if (err || taskIndex === tasks.length) {\n        return callback.apply(null, arguments);\n      }\n      nextTask(slice(arguments, 1));\n    }\n    nextTask([]);\n  };\n\n  /**\r\n   * An \"async function\" in the context of Async is an asynchronous function with\r\n   * a variable number of parameters, with the final parameter being a callback.\r\n   * (`function (arg1, arg2, ..., callback) {}`)\r\n   * The final callback is of the form `callback(err, results...)`, which must be\r\n   * called once the function is completed.  The callback should be called with a\r\n   * Error as its first argument to signal that an error occurred.\r\n   * Otherwise, if no error occurred, it should be called with `null` as the first\r\n   * argument, and any additional `result` arguments that may apply, to signal\r\n   * successful completion.\r\n   * The callback must be called exactly once, ideally on a later tick of the\r\n   * JavaScript event loop.\r\n   *\r\n   * This type of function is also referred to as a \"Node-style async function\",\r\n   * or a \"continuation passing-style function\" (CPS). Most of the methods of this\r\n   * library are themselves CPS/Node-style async functions, or functions that\r\n   * return CPS/Node-style async functions.\r\n   *\r\n   * Wherever we accept a Node-style async function, we also directly accept an\r\n   * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\r\n   * In this case, the `async` function will not be passed a final callback\r\n   * argument, and any thrown error will be used as the `err` argument of the\r\n   * implicit callback, and the return value will be used as the `result` value.\r\n   * (i.e. a `rejected` of the returned Promise becomes the `err` callback\r\n   * argument, and a `resolved` value becomes the `result`.)\r\n   *\r\n   * Note, due to JavaScript limitations, we can only detect native `async`\r\n   * functions and not transpilied implementations.\r\n   * Your environment must have `async`/`await` support for this to work.\r\n   * (e.g. Node > v7.6, or a recent version of a modern browser).\r\n   * If you are using `async` functions through a transpiler (e.g. Babel), you\r\n   * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\r\n   * because the `async function` will be compiled to an ordinary function that\r\n   * returns a promise.\r\n   *\r\n   * @typedef {Function} AsyncFunction\r\n   * @static\r\n   */\n\n  /**\r\n   * Async is a utility module which provides straight-forward, powerful functions\r\n   * for working with asynchronous JavaScript. Although originally designed for\r\n   * use with [Node.js](http://nodejs.org) and installable via\r\n   * `npm install --save async`, it can also be used directly in the browser.\r\n   * @module async\r\n   * @see AsyncFunction\r\n   */\n\n  /**\r\n   * A collection of `async` functions for manipulating collections, such as\r\n   * arrays and objects.\r\n   * @module Collections\r\n   */\n\n  /**\r\n   * A collection of `async` functions for controlling the flow through a script.\r\n   * @module ControlFlow\r\n   */\n\n  /**\r\n   * A collection of `async` utility functions.\r\n   * @module Utils\r\n   */\n\n  var index = {\n    apply: apply,\n    applyEach: applyEach,\n    applyEachSeries: applyEachSeries,\n    asyncify: asyncify,\n    auto: auto,\n    autoInject: autoInject,\n    cargo: cargo,\n    compose: compose,\n    concat: concat,\n    concatLimit: concatLimit,\n    concatSeries: concatSeries,\n    constant: constant,\n    detect: detect,\n    detectLimit: detectLimit,\n    detectSeries: detectSeries,\n    dir: dir,\n    doDuring: doDuring,\n    doUntil: doUntil,\n    doWhilst: doWhilst,\n    during: during,\n    each: eachLimit,\n    eachLimit: eachLimit$1,\n    eachOf: eachOf,\n    eachOfLimit: eachOfLimit,\n    eachOfSeries: eachOfSeries,\n    eachSeries: eachSeries,\n    ensureAsync: ensureAsync,\n    every: every,\n    everyLimit: everyLimit,\n    everySeries: everySeries,\n    filter: filter,\n    filterLimit: filterLimit,\n    filterSeries: filterSeries,\n    forever: forever,\n    groupBy: groupBy,\n    groupByLimit: groupByLimit,\n    groupBySeries: groupBySeries,\n    log: log,\n    map: map,\n    mapLimit: mapLimit,\n    mapSeries: mapSeries,\n    mapValues: mapValues,\n    mapValuesLimit: mapValuesLimit,\n    mapValuesSeries: mapValuesSeries,\n    memoize: memoize,\n    nextTick: nextTick,\n    parallel: parallelLimit,\n    parallelLimit: parallelLimit$1,\n    priorityQueue: priorityQueue,\n    queue: queue$1,\n    race: race,\n    reduce: reduce,\n    reduceRight: reduceRight,\n    reflect: reflect,\n    reflectAll: reflectAll,\n    reject: reject,\n    rejectLimit: rejectLimit,\n    rejectSeries: rejectSeries,\n    retry: retry,\n    retryable: retryable,\n    seq: seq,\n    series: series,\n    setImmediate: setImmediate$1,\n    some: some,\n    someLimit: someLimit,\n    someSeries: someSeries,\n    sortBy: sortBy,\n    timeout: timeout,\n    times: times,\n    timesLimit: timeLimit,\n    timesSeries: timesSeries,\n    transform: transform,\n    tryEach: tryEach,\n    unmemoize: unmemoize,\n    until: until,\n    waterfall: waterfall,\n    whilst: whilst,\n    // aliases\n    all: every,\n    allLimit: everyLimit,\n    allSeries: everySeries,\n    any: some,\n    anyLimit: someLimit,\n    anySeries: someSeries,\n    find: detect,\n    findLimit: detectLimit,\n    findSeries: detectSeries,\n    forEach: eachLimit,\n    forEachSeries: eachSeries,\n    forEachLimit: eachLimit$1,\n    forEachOf: eachOf,\n    forEachOfSeries: eachOfSeries,\n    forEachOfLimit: eachOfLimit,\n    inject: reduce,\n    foldl: reduce,\n    foldr: reduceRight,\n    select: filter,\n    selectLimit: filterLimit,\n    selectSeries: filterSeries,\n    wrapSync: asyncify\n  };\n  exports['default'] = index;\n  exports.apply = apply;\n  exports.applyEach = applyEach;\n  exports.applyEachSeries = applyEachSeries;\n  exports.asyncify = asyncify;\n  exports.auto = auto;\n  exports.autoInject = autoInject;\n  exports.cargo = cargo;\n  exports.compose = compose;\n  exports.concat = concat;\n  exports.concatLimit = concatLimit;\n  exports.concatSeries = concatSeries;\n  exports.constant = constant;\n  exports.detect = detect;\n  exports.detectLimit = detectLimit;\n  exports.detectSeries = detectSeries;\n  exports.dir = dir;\n  exports.doDuring = doDuring;\n  exports.doUntil = doUntil;\n  exports.doWhilst = doWhilst;\n  exports.during = during;\n  exports.each = eachLimit;\n  exports.eachLimit = eachLimit$1;\n  exports.eachOf = eachOf;\n  exports.eachOfLimit = eachOfLimit;\n  exports.eachOfSeries = eachOfSeries;\n  exports.eachSeries = eachSeries;\n  exports.ensureAsync = ensureAsync;\n  exports.every = every;\n  exports.everyLimit = everyLimit;\n  exports.everySeries = everySeries;\n  exports.filter = filter;\n  exports.filterLimit = filterLimit;\n  exports.filterSeries = filterSeries;\n  exports.forever = forever;\n  exports.groupBy = groupBy;\n  exports.groupByLimit = groupByLimit;\n  exports.groupBySeries = groupBySeries;\n  exports.log = log;\n  exports.map = map;\n  exports.mapLimit = mapLimit;\n  exports.mapSeries = mapSeries;\n  exports.mapValues = mapValues;\n  exports.mapValuesLimit = mapValuesLimit;\n  exports.mapValuesSeries = mapValuesSeries;\n  exports.memoize = memoize;\n  exports.nextTick = nextTick;\n  exports.parallel = parallelLimit;\n  exports.parallelLimit = parallelLimit$1;\n  exports.priorityQueue = priorityQueue;\n  exports.queue = queue$1;\n  exports.race = race;\n  exports.reduce = reduce;\n  exports.reduceRight = reduceRight;\n  exports.reflect = reflect;\n  exports.reflectAll = reflectAll;\n  exports.reject = reject;\n  exports.rejectLimit = rejectLimit;\n  exports.rejectSeries = rejectSeries;\n  exports.retry = retry;\n  exports.retryable = retryable;\n  exports.seq = seq;\n  exports.series = series;\n  exports.setImmediate = setImmediate$1;\n  exports.some = some;\n  exports.someLimit = someLimit;\n  exports.someSeries = someSeries;\n  exports.sortBy = sortBy;\n  exports.timeout = timeout;\n  exports.times = times;\n  exports.timesLimit = timeLimit;\n  exports.timesSeries = timesSeries;\n  exports.transform = transform;\n  exports.tryEach = tryEach;\n  exports.unmemoize = unmemoize;\n  exports.until = until;\n  exports.waterfall = waterfall;\n  exports.whilst = whilst;\n  exports.all = every;\n  exports.allLimit = everyLimit;\n  exports.allSeries = everySeries;\n  exports.any = some;\n  exports.anyLimit = someLimit;\n  exports.anySeries = someSeries;\n  exports.find = detect;\n  exports.findLimit = detectLimit;\n  exports.findSeries = detectSeries;\n  exports.forEach = eachLimit;\n  exports.forEachSeries = eachSeries;\n  exports.forEachLimit = eachLimit$1;\n  exports.forEachOf = eachOf;\n  exports.forEachOfSeries = eachOfSeries;\n  exports.forEachOfLimit = eachOfLimit;\n  exports.inject = reduce;\n  exports.foldl = reduce;\n  exports.foldr = reduceRight;\n  exports.select = filter;\n  exports.selectLimit = filterLimit;\n  exports.selectSeries = filterSeries;\n  exports.wrapSync = asyncify;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["global","factory","exports","module","define","amd","async","slice","arrayLike","start","newLen","Math","max","length","newArr","Array","idx","apply","fn","args","arguments","callArgs","concat","initialParams","callback","pop","call","isObject","value","type","hasSetImmediate","setImmediate","hasNextTick","process","nextTick","fallback","setTimeout","wrap","defer","_defer","setImmediate$1","asyncify","func","result","e","then","invokeCallback","err","message","Error","error","rethrow","supportsSymbol","Symbol","isAsync","toStringTag","wrapAsync","asyncFn","applyEach$1","eachfn","fns","go","that","cb","freeGlobal","Object","freeSelf","self","root","Function","Symbol$1","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag$1","undefined","getRawTag","isOwn","tag","unmasked","objectProto$1","nativeObjectToString$1","objectToString","nullTag","undefinedTag","symToStringTag","baseGetTag","asyncTag","funcTag","genTag","proxyTag","isFunction","MAX_SAFE_INTEGER","isLength","isArrayLike","breakLoop","noop","once","callFn","iteratorSymbol","iterator","getIterator","coll","baseTimes","n","iteratee","index","isObjectLike","argsTag","baseIsArguments","objectProto$3","hasOwnProperty$2","propertyIsEnumerable","isArguments","isArray","stubFalse","freeExports","nodeType","freeModule","moduleExports","Buffer","nativeIsBuffer","isBuffer","MAX_SAFE_INTEGER$1","reIsUint","isIndex","test","argsTag$1","arrayTag","boolTag","dateTag","errorTag","funcTag$1","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","typedArrayTags","baseIsTypedArray","baseUnary","freeExports$1","freeModule$1","moduleExports$1","freeProcess","nodeUtil","types","require","binding","nodeIsTypedArray","isTypedArray","objectProto$2","hasOwnProperty$1","arrayLikeKeys","inherited","isArr","isArg","isBuff","isType","skipIndexes","String","key","push","objectProto$5","isPrototype","Ctor","constructor","proto","overArg","transform","arg","nativeKeys","keys","objectProto$4","hasOwnProperty$3","baseKeys","object","createArrayIterator","i","len","next","createES2015Iterator","item","done","createObjectIterator","obj","okeys","onlyOnce","_eachOfLimit","limit","nextElem","running","looping","iterateeCallback","replenish","elem","eachOfLimit","doLimit","iterable","eachOfArrayLike","completed","iteratorCallback","eachOfGeneric","Infinity","eachOf","eachOfImplementation","doParallel","_asyncMap","arr","results","counter","_iteratee","_","v","map","applyEach","doParallelLimit","mapLimit","mapSeries","applyEachSeries","arrayEach","array","createBaseFor","fromRight","keysFunc","props","baseFor","baseForOwn","baseFindIndex","predicate","fromIndex","baseIsNaN","strictIndexOf","baseIndexOf","auto","tasks","concurrency","keys$$1","numTasks","runningTasks","hasError","listeners","create","readyTasks","readyToCheck","uncheckedDependencies","task","enqueueTask","dependencies","remainingDependencies","dependencyName","join","addListener","checkForDeadlocks","processQueue","runTask","run","shift","taskName","taskListeners","taskComplete","taskCallback","safeResults","val","rkey","taskFn","currentTask","getDependents","dependent","arrayMap","symbolTag","isSymbol","INFINITY","symbolProto","symbolToString","baseToString","baseSlice","end","castSlice","charsEndIndex","strSymbols","chrSymbols","charsStartIndex","asciiToArray","string","split","rsAstralRange","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsVarRange","rsZWJ","reHasUnicode","RegExp","hasUnicode","rsAstralRange$1","rsComboMarksRange$1","reComboHalfMarksRange$1","rsComboSymbolsRange$1","rsComboRange$1","rsVarRange$1","rsAstral","rsCombo","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","rsZWJ$1","reOptMod","rsOptVar","rsOptJoin","rsSeq","rsSymbol","reUnicode","unicodeToArray","match","stringToArray","reTrim","trim","chars","guard","replace","FN_ARGS","FN_ARG_SPLIT","FN_ARG","STRIP_COMMENTS","parseParams","autoInject","newTasks","params","fnIsAsync","hasNoDeps","newTask","taskCb","newArgs","name","DLL","head","tail","setInitial","dll","node","removeLink","prev","empty","insertAfter","newNode","insertBefore","unshift","toArray","curr","data","remove","testFn","queue","worker","payload","_worker","numRunning","workersList","processingScheduled","_insert","insertAtFront","q","started","idle","drain","l","_tasks","_next","splice","buffer","unsaturated","isProcessing","saturated","paused","kill","min","pause","resume","cargo","eachOfSeries","reduce","memo","x","seq","_functions","newargs","nextargs","compose","reverse","_concat","concatLimit","mapResults","concatSeries","constant","values","identity","_createTester","check","getResult","testPassed","testResult","_findGetResult","detect","detectLimit","detectSeries","consoleFunc","console","dir","doDuring","_fn","_test","truth","doWhilst","doUntil","during","_withoutIndex","eachLimit","eachLimit$1","eachSeries","ensureAsync","sync","innerArgs","notId","every","everyLimit","everySeries","baseProperty","filterArray","truthValues","filterGeneric","sort","a","b","_filter","filter","filterLimit","filterSeries","forever","errback","groupByLimit","groupBy","groupBySeries","log","mapValuesLimit","newObj","mapValues","mapValuesSeries","has","memoize","hasher","queues","memoized","unmemoized","_defer$1","_parallel","parallelLimit","parallelLimit$1","queue$1","items","priorityQueue","priority","nextNode","race","TypeError","reduceRight","reversed","reflect","reflectOn","reflectCallback","cbArg","reflectAll","reject$1","reject","rejectLimit","rejectSeries","constant$1","retry","opts","DEFAULT_TIMES","DEFAULT_INTERVAL","options","times","intervalFunc","parseTimes","acc","t","interval","errorFilter","_task","attempt","retryAttempt","retryable","series","some","Boolean","someLimit","someSeries","sortBy","criteria","comparator","left","right","timeout","milliseconds","info","timedOut","timer","timeoutCallback","code","clearTimeout","nativeCeil","ceil","nativeMax","baseRange","step","timeLimit","count","timesSeries","accumulator","k","tryEach","res","unmemoize","whilst","until","waterfall","taskIndex","nextTask","each","parallel","timesLimit","all","allLimit","allSeries","any","anyLimit","anySeries","find","findLimit","findSeries","forEach","forEachSeries","forEachLimit","forEachOf","forEachOfSeries","forEachOfLimit","inject","foldl","foldr","select","selectLimit","selectSeries","wrapSync","defineProperty"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/node_modules/schema-inspector/node_modules/async/dist/async.js"],"sourcesContent":["(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\r\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\r\n  (factory((global.async = global.async || {})));\r\n}(this, (function (exports) { 'use strict';\r\n\r\nfunction slice(arrayLike, start) {\r\n    start = start|0;\r\n    var newLen = Math.max(arrayLike.length - start, 0);\r\n    var newArr = Array(newLen);\r\n    for(var idx = 0; idx < newLen; idx++)  {\r\n        newArr[idx] = arrayLike[start + idx];\r\n    }\r\n    return newArr;\r\n}\r\n\r\n/**\r\n * Creates a continuation function with some arguments already applied.\r\n *\r\n * Useful as a shorthand when combined with other control flow functions. Any\r\n * arguments passed to the returned function are added to the arguments\r\n * originally passed to apply.\r\n *\r\n * @name apply\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {Function} fn - The function you want to eventually apply all\r\n * arguments to. Invokes with (arguments...).\r\n * @param {...*} arguments... - Any number of arguments to automatically apply\r\n * when the continuation is called.\r\n * @returns {Function} the partially-applied function\r\n * @example\r\n *\r\n * // using apply\r\n * async.parallel([\r\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\r\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\r\n * ]);\r\n *\r\n *\r\n * // the same process without using apply\r\n * async.parallel([\r\n *     function(callback) {\r\n *         fs.writeFile('testfile1', 'test1', callback);\r\n *     },\r\n *     function(callback) {\r\n *         fs.writeFile('testfile2', 'test2', callback);\r\n *     }\r\n * ]);\r\n *\r\n * // It's possible to pass any number of additional arguments when calling the\r\n * // continuation:\r\n *\r\n * node> var fn = async.apply(sys.puts, 'one');\r\n * node> fn('two', 'three');\r\n * one\r\n * two\r\n * three\r\n */\r\nvar apply = function(fn/*, ...args*/) {\r\n    var args = slice(arguments, 1);\r\n    return function(/*callArgs*/) {\r\n        var callArgs = slice(arguments);\r\n        return fn.apply(null, args.concat(callArgs));\r\n    };\r\n};\r\n\r\nvar initialParams = function (fn) {\r\n    return function (/*...args, callback*/) {\r\n        var args = slice(arguments);\r\n        var callback = args.pop();\r\n        fn.call(this, args, callback);\r\n    };\r\n};\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return value != null && (type == 'object' || type == 'function');\r\n}\r\n\r\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\r\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\r\n\r\nfunction fallback(fn) {\r\n    setTimeout(fn, 0);\r\n}\r\n\r\nfunction wrap(defer) {\r\n    return function (fn/*, ...args*/) {\r\n        var args = slice(arguments, 1);\r\n        defer(function () {\r\n            fn.apply(null, args);\r\n        });\r\n    };\r\n}\r\n\r\nvar _defer;\r\n\r\nif (hasSetImmediate) {\r\n    _defer = setImmediate;\r\n} else if (hasNextTick) {\r\n    _defer = process.nextTick;\r\n} else {\r\n    _defer = fallback;\r\n}\r\n\r\nvar setImmediate$1 = wrap(_defer);\r\n\r\n/**\r\n * Take a sync function and make it async, passing its return value to a\r\n * callback. This is useful for plugging sync functions into a waterfall,\r\n * series, or other async functions. Any arguments passed to the generated\r\n * function will be passed to the wrapped function (except for the final\r\n * callback argument). Errors thrown will be passed to the callback.\r\n *\r\n * If the function passed to `asyncify` returns a Promise, that promises's\r\n * resolved/rejected state will be used to call the callback, rather than simply\r\n * the synchronous return value.\r\n *\r\n * This also means you can asyncify ES2017 `async` functions.\r\n *\r\n * @name asyncify\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @alias wrapSync\r\n * @category Util\r\n * @param {Function} func - The synchronous function, or Promise-returning\r\n * function to convert to an {@link AsyncFunction}.\r\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\r\n * invoked with `(args..., callback)`.\r\n * @example\r\n *\r\n * // passing a regular synchronous function\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(JSON.parse),\r\n *     function (data, next) {\r\n *         // data is the result of parsing the text.\r\n *         // If there was a parsing error, it would have been caught.\r\n *     }\r\n * ], callback);\r\n *\r\n * // passing a function returning a promise\r\n * async.waterfall([\r\n *     async.apply(fs.readFile, filename, \"utf8\"),\r\n *     async.asyncify(function (contents) {\r\n *         return db.model.create(contents);\r\n *     }),\r\n *     function (model, next) {\r\n *         // `model` is the instantiated model object.\r\n *         // If there was an error, this function would be skipped.\r\n *     }\r\n * ], callback);\r\n *\r\n * // es2017 example, though `asyncify` is not needed if your JS environment\r\n * // supports async functions out of the box\r\n * var q = async.queue(async.asyncify(async function(file) {\r\n *     var intermediateStep = await processFile(file);\r\n *     return await somePromise(intermediateStep)\r\n * }));\r\n *\r\n * q.push(files);\r\n */\r\nfunction asyncify(func) {\r\n    return initialParams(function (args, callback) {\r\n        var result;\r\n        try {\r\n            result = func.apply(this, args);\r\n        } catch (e) {\r\n            return callback(e);\r\n        }\r\n        // if result is Promise object\r\n        if (isObject(result) && typeof result.then === 'function') {\r\n            result.then(function(value) {\r\n                invokeCallback(callback, null, value);\r\n            }, function(err) {\r\n                invokeCallback(callback, err.message ? err : new Error(err));\r\n            });\r\n        } else {\r\n            callback(null, result);\r\n        }\r\n    });\r\n}\r\n\r\nfunction invokeCallback(callback, error, value) {\r\n    try {\r\n        callback(error, value);\r\n    } catch (e) {\r\n        setImmediate$1(rethrow, e);\r\n    }\r\n}\r\n\r\nfunction rethrow(error) {\r\n    throw error;\r\n}\r\n\r\nvar supportsSymbol = typeof Symbol === 'function';\r\n\r\nfunction isAsync(fn) {\r\n    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';\r\n}\r\n\r\nfunction wrapAsync(asyncFn) {\r\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\r\n}\r\n\r\nfunction applyEach$1(eachfn) {\r\n    return function(fns/*, ...args*/) {\r\n        var args = slice(arguments, 1);\r\n        var go = initialParams(function(args, callback) {\r\n            var that = this;\r\n            return eachfn(fns, function (fn, cb) {\r\n                wrapAsync(fn).apply(that, args.concat(cb));\r\n            }, callback);\r\n        });\r\n        if (args.length) {\r\n            return go.apply(this, args);\r\n        }\r\n        else {\r\n            return go;\r\n        }\r\n    };\r\n}\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Built-in value references. */\r\nvar Symbol$1 = root.Symbol;\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar nativeObjectToString = objectProto.toString;\r\n\r\n/** Built-in value references. */\r\nvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\r\n\r\n/**\r\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the raw `toStringTag`.\r\n */\r\nfunction getRawTag(value) {\r\n  var isOwn = hasOwnProperty.call(value, symToStringTag$1),\r\n      tag = value[symToStringTag$1];\r\n\r\n  try {\r\n    value[symToStringTag$1] = undefined;\r\n    var unmasked = true;\r\n  } catch (e) {}\r\n\r\n  var result = nativeObjectToString.call(value);\r\n  if (unmasked) {\r\n    if (isOwn) {\r\n      value[symToStringTag$1] = tag;\r\n    } else {\r\n      delete value[symToStringTag$1];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto$1 = Object.prototype;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar nativeObjectToString$1 = objectProto$1.toString;\r\n\r\n/**\r\n * Converts `value` to a string using `Object.prototype.toString`.\r\n *\r\n * @private\r\n * @param {*} value The value to convert.\r\n * @returns {string} Returns the converted string.\r\n */\r\nfunction objectToString(value) {\r\n  return nativeObjectToString$1.call(value);\r\n}\r\n\r\n/** `Object#toString` result references. */\r\nvar nullTag = '[object Null]';\r\nvar undefinedTag = '[object Undefined]';\r\n\r\n/** Built-in value references. */\r\nvar symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;\r\n\r\n/**\r\n * The base implementation of `getTag` without fallbacks for buggy environments.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nfunction baseGetTag(value) {\r\n  if (value == null) {\r\n    return value === undefined ? undefinedTag : nullTag;\r\n  }\r\n  return (symToStringTag && symToStringTag in Object(value))\r\n    ? getRawTag(value)\r\n    : objectToString(value);\r\n}\r\n\r\n/** `Object#toString` result references. */\r\nvar asyncTag = '[object AsyncFunction]';\r\nvar funcTag = '[object Function]';\r\nvar genTag = '[object GeneratorFunction]';\r\nvar proxyTag = '[object Proxy]';\r\n\r\n/**\r\n * Checks if `value` is classified as a `Function` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n * @example\r\n *\r\n * _.isFunction(_);\r\n * // => true\r\n *\r\n * _.isFunction(/abc/);\r\n * // => false\r\n */\r\nfunction isFunction(value) {\r\n  if (!isObject(value)) {\r\n    return false;\r\n  }\r\n  // The use of `Object#toString` avoids issues with the `typeof` operator\r\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\r\n  var tag = baseGetTag(value);\r\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\r\n}\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/**\r\n * Checks if `value` is a valid array-like length.\r\n *\r\n * **Note:** This method is loosely based on\r\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n * @example\r\n *\r\n * _.isLength(3);\r\n * // => true\r\n *\r\n * _.isLength(Number.MIN_VALUE);\r\n * // => false\r\n *\r\n * _.isLength(Infinity);\r\n * // => false\r\n *\r\n * _.isLength('3');\r\n * // => false\r\n */\r\nfunction isLength(value) {\r\n  return typeof value == 'number' &&\r\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n}\r\n\r\n/**\r\n * Checks if `value` is array-like. A value is considered array-like if it's\r\n * not a function and has a `value.length` that's an integer greater than or\r\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n * @example\r\n *\r\n * _.isArrayLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLike(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLike('abc');\r\n * // => true\r\n *\r\n * _.isArrayLike(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLike(value) {\r\n  return value != null && isLength(value.length) && !isFunction(value);\r\n}\r\n\r\n// A temporary value used to identify if the loop should be broken.\r\n// See #1064, #1293\r\nvar breakLoop = {};\r\n\r\n/**\r\n * This method returns `undefined`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 2.3.0\r\n * @category Util\r\n * @example\r\n *\r\n * _.times(2, _.noop);\r\n * // => [undefined, undefined]\r\n */\r\nfunction noop() {\r\n  // No operation performed.\r\n}\r\n\r\nfunction once(fn) {\r\n    return function () {\r\n        if (fn === null) return;\r\n        var callFn = fn;\r\n        fn = null;\r\n        callFn.apply(this, arguments);\r\n    };\r\n}\r\n\r\nvar iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;\r\n\r\nvar getIterator = function (coll) {\r\n    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();\r\n};\r\n\r\n/**\r\n * The base implementation of `_.times` without support for iteratee shorthands\r\n * or max array length checks.\r\n *\r\n * @private\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n */\r\nfunction baseTimes(n, iteratee) {\r\n  var index = -1,\r\n      result = Array(n);\r\n\r\n  while (++index < n) {\r\n    result[index] = iteratee(index);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return value != null && typeof value == 'object';\r\n}\r\n\r\n/** `Object#toString` result references. */\r\nvar argsTag = '[object Arguments]';\r\n\r\n/**\r\n * The base implementation of `_.isArguments`.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n */\r\nfunction baseIsArguments(value) {\r\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto$3 = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty$2 = objectProto$3.hasOwnProperty;\r\n\r\n/** Built-in value references. */\r\nvar propertyIsEnumerable = objectProto$3.propertyIsEnumerable;\r\n\r\n/**\r\n * Checks if `value` is likely an `arguments` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArguments(function() { return arguments; }());\r\n * // => true\r\n *\r\n * _.isArguments([1, 2, 3]);\r\n * // => false\r\n */\r\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\r\n  return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') &&\r\n    !propertyIsEnumerable.call(value, 'callee');\r\n};\r\n\r\n/**\r\n * Checks if `value` is classified as an `Array` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n * @example\r\n *\r\n * _.isArray([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArray(document.body.children);\r\n * // => false\r\n *\r\n * _.isArray('abc');\r\n * // => false\r\n *\r\n * _.isArray(_.noop);\r\n * // => false\r\n */\r\nvar isArray = Array.isArray;\r\n\r\n/**\r\n * This method returns `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {boolean} Returns `false`.\r\n * @example\r\n *\r\n * _.times(2, _.stubFalse);\r\n * // => [false, false]\r\n */\r\nfunction stubFalse() {\r\n  return false;\r\n}\r\n\r\n/** Detect free variable `exports`. */\r\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n/** Detect free variable `module`. */\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n\r\n/** Built-in value references. */\r\nvar Buffer = moduleExports ? root.Buffer : undefined;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\r\n\r\n/**\r\n * Checks if `value` is a buffer.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.3.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n * @example\r\n *\r\n * _.isBuffer(new Buffer(2));\r\n * // => true\r\n *\r\n * _.isBuffer(new Uint8Array(2));\r\n * // => false\r\n */\r\nvar isBuffer = nativeIsBuffer || stubFalse;\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER$1 = 9007199254740991;\r\n\r\n/** Used to detect unsigned integer values. */\r\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\nfunction isIndex(value, length) {\r\n  var type = typeof value;\r\n  length = length == null ? MAX_SAFE_INTEGER$1 : length;\r\n\r\n  return !!length &&\r\n    (type == 'number' ||\r\n      (type != 'symbol' && reIsUint.test(value))) &&\r\n        (value > -1 && value % 1 == 0 && value < length);\r\n}\r\n\r\n/** `Object#toString` result references. */\r\nvar argsTag$1 = '[object Arguments]';\r\nvar arrayTag = '[object Array]';\r\nvar boolTag = '[object Boolean]';\r\nvar dateTag = '[object Date]';\r\nvar errorTag = '[object Error]';\r\nvar funcTag$1 = '[object Function]';\r\nvar mapTag = '[object Map]';\r\nvar numberTag = '[object Number]';\r\nvar objectTag = '[object Object]';\r\nvar regexpTag = '[object RegExp]';\r\nvar setTag = '[object Set]';\r\nvar stringTag = '[object String]';\r\nvar weakMapTag = '[object WeakMap]';\r\n\r\nvar arrayBufferTag = '[object ArrayBuffer]';\r\nvar dataViewTag = '[object DataView]';\r\nvar float32Tag = '[object Float32Array]';\r\nvar float64Tag = '[object Float64Array]';\r\nvar int8Tag = '[object Int8Array]';\r\nvar int16Tag = '[object Int16Array]';\r\nvar int32Tag = '[object Int32Array]';\r\nvar uint8Tag = '[object Uint8Array]';\r\nvar uint8ClampedTag = '[object Uint8ClampedArray]';\r\nvar uint16Tag = '[object Uint16Array]';\r\nvar uint32Tag = '[object Uint32Array]';\r\n\r\n/** Used to identify `toStringTag` values of typed arrays. */\r\nvar typedArrayTags = {};\r\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\r\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\r\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\r\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\r\ntypedArrayTags[uint32Tag] = true;\r\ntypedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =\r\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\r\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\r\ntypedArrayTags[errorTag] = typedArrayTags[funcTag$1] =\r\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\r\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\r\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\r\ntypedArrayTags[weakMapTag] = false;\r\n\r\n/**\r\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n */\r\nfunction baseIsTypedArray(value) {\r\n  return isObjectLike(value) &&\r\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\r\n}\r\n\r\n/**\r\n * The base implementation of `_.unary` without support for storing metadata.\r\n *\r\n * @private\r\n * @param {Function} func The function to cap arguments for.\r\n * @returns {Function} Returns the new capped function.\r\n */\r\nfunction baseUnary(func) {\r\n  return function(value) {\r\n    return func(value);\r\n  };\r\n}\r\n\r\n/** Detect free variable `exports`. */\r\nvar freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n/** Detect free variable `module`. */\r\nvar freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\nvar moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\r\n\r\n/** Detect free variable `process` from Node.js. */\r\nvar freeProcess = moduleExports$1 && freeGlobal.process;\r\n\r\n/** Used to access faster Node.js helpers. */\r\nvar nodeUtil = (function() {\r\n  try {\r\n    // Use `util.types` for Node.js 10+.\r\n    var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;\r\n\r\n    if (types) {\r\n      return types;\r\n    }\r\n\r\n    // Legacy `process.binding('util')` for Node.js < 10.\r\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\r\n  } catch (e) {}\r\n}());\r\n\r\n/* Node.js helper references. */\r\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\r\n\r\n/**\r\n * Checks if `value` is classified as a typed array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n * @example\r\n *\r\n * _.isTypedArray(new Uint8Array);\r\n * // => true\r\n *\r\n * _.isTypedArray([]);\r\n * // => false\r\n */\r\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto$2 = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty$1 = objectProto$2.hasOwnProperty;\r\n\r\n/**\r\n * Creates an array of the enumerable property names of the array-like `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @param {boolean} inherited Specify returning inherited property names.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction arrayLikeKeys(value, inherited) {\r\n  var isArr = isArray(value),\r\n      isArg = !isArr && isArguments(value),\r\n      isBuff = !isArr && !isArg && isBuffer(value),\r\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\r\n      skipIndexes = isArr || isArg || isBuff || isType,\r\n      result = skipIndexes ? baseTimes(value.length, String) : [],\r\n      length = result.length;\r\n\r\n  for (var key in value) {\r\n    if ((inherited || hasOwnProperty$1.call(value, key)) &&\r\n        !(skipIndexes && (\r\n           // Safari 9 has enumerable `arguments.length` in strict mode.\r\n           key == 'length' ||\r\n           // Node.js 0.10 has enumerable non-index properties on buffers.\r\n           (isBuff && (key == 'offset' || key == 'parent')) ||\r\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\r\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\r\n           // Skip index properties.\r\n           isIndex(key, length)\r\n        ))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto$5 = Object.prototype;\r\n\r\n/**\r\n * Checks if `value` is likely a prototype object.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n */\r\nfunction isPrototype(value) {\r\n  var Ctor = value && value.constructor,\r\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;\r\n\r\n  return value === proto;\r\n}\r\n\r\n/**\r\n * Creates a unary function that invokes `func` with its argument transformed.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {Function} transform The argument transform.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction overArg(func, transform) {\r\n  return function(arg) {\r\n    return func(transform(arg));\r\n  };\r\n}\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeKeys = overArg(Object.keys, Object);\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto$4 = Object.prototype;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty$3 = objectProto$4.hasOwnProperty;\r\n\r\n/**\r\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction baseKeys(object) {\r\n  if (!isPrototype(object)) {\r\n    return nativeKeys(object);\r\n  }\r\n  var result = [];\r\n  for (var key in Object(object)) {\r\n    if (hasOwnProperty$3.call(object, key) && key != 'constructor') {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects. See the\r\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n * for more details.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keys(new Foo);\r\n * // => ['a', 'b'] (iteration order is not guaranteed)\r\n *\r\n * _.keys('hi');\r\n * // => ['0', '1']\r\n */\r\nfunction keys(object) {\r\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\r\n}\r\n\r\nfunction createArrayIterator(coll) {\r\n    var i = -1;\r\n    var len = coll.length;\r\n    return function next() {\r\n        return ++i < len ? {value: coll[i], key: i} : null;\r\n    }\r\n}\r\n\r\nfunction createES2015Iterator(iterator) {\r\n    var i = -1;\r\n    return function next() {\r\n        var item = iterator.next();\r\n        if (item.done)\r\n            return null;\r\n        i++;\r\n        return {value: item.value, key: i};\r\n    }\r\n}\r\n\r\nfunction createObjectIterator(obj) {\r\n    var okeys = keys(obj);\r\n    var i = -1;\r\n    var len = okeys.length;\r\n    return function next() {\r\n        var key = okeys[++i];\r\n        if (key === '__proto__') {\r\n            return next();\r\n        }\r\n        return i < len ? {value: obj[key], key: key} : null;\r\n    };\r\n}\r\n\r\nfunction iterator(coll) {\r\n    if (isArrayLike(coll)) {\r\n        return createArrayIterator(coll);\r\n    }\r\n\r\n    var iterator = getIterator(coll);\r\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\r\n}\r\n\r\nfunction onlyOnce(fn) {\r\n    return function() {\r\n        if (fn === null) throw new Error(\"Callback was already called.\");\r\n        var callFn = fn;\r\n        fn = null;\r\n        callFn.apply(this, arguments);\r\n    };\r\n}\r\n\r\nfunction _eachOfLimit(limit) {\r\n    return function (obj, iteratee, callback) {\r\n        callback = once(callback || noop);\r\n        if (limit <= 0 || !obj) {\r\n            return callback(null);\r\n        }\r\n        var nextElem = iterator(obj);\r\n        var done = false;\r\n        var running = 0;\r\n        var looping = false;\r\n\r\n        function iterateeCallback(err, value) {\r\n            running -= 1;\r\n            if (err) {\r\n                done = true;\r\n                callback(err);\r\n            }\r\n            else if (value === breakLoop || (done && running <= 0)) {\r\n                done = true;\r\n                return callback(null);\r\n            }\r\n            else if (!looping) {\r\n                replenish();\r\n            }\r\n        }\r\n\r\n        function replenish () {\r\n            looping = true;\r\n            while (running < limit && !done) {\r\n                var elem = nextElem();\r\n                if (elem === null) {\r\n                    done = true;\r\n                    if (running <= 0) {\r\n                        callback(null);\r\n                    }\r\n                    return;\r\n                }\r\n                running += 1;\r\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\r\n            }\r\n            looping = false;\r\n        }\r\n\r\n        replenish();\r\n    };\r\n}\r\n\r\n/**\r\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name eachOfLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.eachOf]{@link module:Collections.eachOf}\r\n * @alias forEachOfLimit\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each\r\n * item in `coll`. The `key` is the item's key, or index in the case of an\r\n * array.\r\n * Invoked with (item, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n */\r\nfunction eachOfLimit(coll, limit, iteratee, callback) {\r\n    _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\r\n}\r\n\r\nfunction doLimit(fn, limit) {\r\n    return function (iterable, iteratee, callback) {\r\n        return fn(iterable, limit, iteratee, callback);\r\n    };\r\n}\r\n\r\n// eachOf implementation optimized for array-likes\r\nfunction eachOfArrayLike(coll, iteratee, callback) {\r\n    callback = once(callback || noop);\r\n    var index = 0,\r\n        completed = 0,\r\n        length = coll.length;\r\n    if (length === 0) {\r\n        callback(null);\r\n    }\r\n\r\n    function iteratorCallback(err, value) {\r\n        if (err) {\r\n            callback(err);\r\n        } else if ((++completed === length) || value === breakLoop) {\r\n            callback(null);\r\n        }\r\n    }\r\n\r\n    for (; index < length; index++) {\r\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\r\n    }\r\n}\r\n\r\n// a generic version of eachOf which can handle array, object, and iterator cases.\r\nvar eachOfGeneric = doLimit(eachOfLimit, Infinity);\r\n\r\n/**\r\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\r\n * to the iteratee.\r\n *\r\n * @name eachOf\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias forEachOf\r\n * @category Collection\r\n * @see [async.each]{@link module:Collections.each}\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A function to apply to each\r\n * item in `coll`.\r\n * The `key` is the item's key, or index in the case of an array.\r\n * Invoked with (item, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n * @example\r\n *\r\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\r\n * var configs = {};\r\n *\r\n * async.forEachOf(obj, function (value, key, callback) {\r\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\r\n *         if (err) return callback(err);\r\n *         try {\r\n *             configs[key] = JSON.parse(data);\r\n *         } catch (e) {\r\n *             return callback(e);\r\n *         }\r\n *         callback();\r\n *     });\r\n * }, function (err) {\r\n *     if (err) console.error(err.message);\r\n *     // configs is now a map of JSON data\r\n *     doSomethingWith(configs);\r\n * });\r\n */\r\nvar eachOf = function(coll, iteratee, callback) {\r\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\r\n    eachOfImplementation(coll, wrapAsync(iteratee), callback);\r\n};\r\n\r\nfunction doParallel(fn) {\r\n    return function (obj, iteratee, callback) {\r\n        return fn(eachOf, obj, wrapAsync(iteratee), callback);\r\n    };\r\n}\r\n\r\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\r\n    callback = callback || noop;\r\n    arr = arr || [];\r\n    var results = [];\r\n    var counter = 0;\r\n    var _iteratee = wrapAsync(iteratee);\r\n\r\n    eachfn(arr, function (value, _, callback) {\r\n        var index = counter++;\r\n        _iteratee(value, function (err, v) {\r\n            results[index] = v;\r\n            callback(err);\r\n        });\r\n    }, function (err) {\r\n        callback(err, results);\r\n    });\r\n}\r\n\r\n/**\r\n * Produces a new collection of values by mapping each value in `coll` through\r\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\r\n * and a callback for when it has finished processing. Each of these callback\r\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\r\n * `iteratee` passes an error to its callback, the main `callback` (for the\r\n * `map` function) is immediately called with the error.\r\n *\r\n * Note, that since this function applies the `iteratee` to each item in\r\n * parallel, there is no guarantee that the `iteratee` functions will complete\r\n * in order. However, the results array will be in the same order as the\r\n * original `coll`.\r\n *\r\n * If `map` is passed an Object, the results will be an Array.  The results\r\n * will roughly be in the order of the original Objects' keys (but this can\r\n * vary across JavaScript engines).\r\n *\r\n * @name map\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with the transformed item.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Results is an Array of the\r\n * transformed items from the `coll`. Invoked with (err, results).\r\n * @example\r\n *\r\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\r\n *     // results is now an array of stats for each file\r\n * });\r\n */\r\nvar map = doParallel(_asyncMap);\r\n\r\n/**\r\n * Applies the provided arguments to each function in the array, calling\r\n * `callback` after all functions have completed. If you only provide the first\r\n * argument, `fns`, then it will return a function which lets you pass in the\r\n * arguments as if it were a single function call. If more arguments are\r\n * provided, `callback` is required while `args` is still optional.\r\n *\r\n * @name applyEach\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s\r\n * to all call with the same arguments\r\n * @param {...*} [args] - any number of separate arguments to pass to the\r\n * function.\r\n * @param {Function} [callback] - the final argument should be the callback,\r\n * called when all functions have completed processing.\r\n * @returns {Function} - If only the first argument, `fns`, is provided, it will\r\n * return a function which lets you pass in the arguments as if it were a single\r\n * function call. The signature is `(..args, callback)`. If invoked with any\r\n * arguments, `callback` is required.\r\n * @example\r\n *\r\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\r\n *\r\n * // partial application example:\r\n * async.each(\r\n *     buckets,\r\n *     async.applyEach([enableSearch, updateSchema]),\r\n *     callback\r\n * );\r\n */\r\nvar applyEach = applyEach$1(map);\r\n\r\nfunction doParallelLimit(fn) {\r\n    return function (obj, limit, iteratee, callback) {\r\n        return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);\r\n    };\r\n}\r\n\r\n/**\r\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name mapLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.map]{@link module:Collections.map}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with the transformed item.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Results is an array of the\r\n * transformed items from the `coll`. Invoked with (err, results).\r\n */\r\nvar mapLimit = doParallelLimit(_asyncMap);\r\n\r\n/**\r\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\r\n *\r\n * @name mapSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.map]{@link module:Collections.map}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with the transformed item.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Results is an array of the\r\n * transformed items from the `coll`. Invoked with (err, results).\r\n */\r\nvar mapSeries = doLimit(mapLimit, 1);\r\n\r\n/**\r\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\r\n *\r\n * @name applyEachSeries\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} fns - A collection of {@link AsyncFunction}s to all\r\n * call with the same arguments\r\n * @param {...*} [args] - any number of separate arguments to pass to the\r\n * function.\r\n * @param {Function} [callback] - the final argument should be the callback,\r\n * called when all functions have completed processing.\r\n * @returns {Function} - If only the first argument is provided, it will return\r\n * a function which lets you pass in the arguments as if it were a single\r\n * function call.\r\n */\r\nvar applyEachSeries = applyEach$1(mapSeries);\r\n\r\n/**\r\n * A specialized version of `_.forEach` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayEach(array, iteratee) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length;\r\n\r\n  while (++index < length) {\r\n    if (iteratee(array[index], index, array) === false) {\r\n      break;\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\r\n *\r\n * @private\r\n * @param {boolean} [fromRight] Specify iterating from right to left.\r\n * @returns {Function} Returns the new base function.\r\n */\r\nfunction createBaseFor(fromRight) {\r\n  return function(object, iteratee, keysFunc) {\r\n    var index = -1,\r\n        iterable = Object(object),\r\n        props = keysFunc(object),\r\n        length = props.length;\r\n\r\n    while (length--) {\r\n      var key = props[fromRight ? length : ++index];\r\n      if (iteratee(iterable[key], key, iterable) === false) {\r\n        break;\r\n      }\r\n    }\r\n    return object;\r\n  };\r\n}\r\n\r\n/**\r\n * The base implementation of `baseForOwn` which iterates over `object`\r\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\r\n * Iteratee functions may exit iteration early by explicitly returning `false`.\r\n *\r\n * @private\r\n * @param {Object} object The object to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @param {Function} keysFunc The function to get the keys of `object`.\r\n * @returns {Object} Returns `object`.\r\n */\r\nvar baseFor = createBaseFor();\r\n\r\n/**\r\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Object} object The object to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction baseForOwn(object, iteratee) {\r\n  return object && baseFor(object, iteratee, keys);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n * support for iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {Function} predicate The function invoked per iteration.\r\n * @param {number} fromIndex The index to search from.\r\n * @param {boolean} [fromRight] Specify iterating from right to left.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n  var length = array.length,\r\n      index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n  while ((fromRight ? index-- : ++index < length)) {\r\n    if (predicate(array[index], index, array)) {\r\n      return index;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isNaN` without support for number objects.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n */\r\nfunction baseIsNaN(value) {\r\n  return value !== value;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.indexOf` which performs strict equality\r\n * comparisons of values, i.e. `===`.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} value The value to search for.\r\n * @param {number} fromIndex The index to search from.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction strictIndexOf(array, value, fromIndex) {\r\n  var index = fromIndex - 1,\r\n      length = array.length;\r\n\r\n  while (++index < length) {\r\n    if (array[index] === value) {\r\n      return index;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} value The value to search for.\r\n * @param {number} fromIndex The index to search from.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction baseIndexOf(array, value, fromIndex) {\r\n  return value === value\r\n    ? strictIndexOf(array, value, fromIndex)\r\n    : baseFindIndex(array, baseIsNaN, fromIndex);\r\n}\r\n\r\n/**\r\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\r\n * their requirements. Each function can optionally depend on other functions\r\n * being completed first, and each function is run as soon as its requirements\r\n * are satisfied.\r\n *\r\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\r\n * will stop. Further tasks will not execute (so any other functions depending\r\n * on it will not run), and the main `callback` is immediately called with the\r\n * error.\r\n *\r\n * {@link AsyncFunction}s also receive an object containing the results of functions which\r\n * have completed so far as the first argument, if they have dependencies. If a\r\n * task function has no dependencies, it will only be passed a callback.\r\n *\r\n * @name auto\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Object} tasks - An object. Each of its properties is either a\r\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\r\n * in the array. The object's key of a property serves as the name of the task\r\n * defined by that property, i.e. can be used when specifying requirements for\r\n * other tasks. The function receives one or two arguments:\r\n * * a `results` object, containing the results of the previously executed\r\n *   functions, only passed if the task has any dependencies,\r\n * * a `callback(err, result)` function, which must be called when finished,\r\n *   passing an `error` (which can be `null`) and the result of the function's\r\n *   execution.\r\n * @param {number} [concurrency=Infinity] - An optional `integer` for\r\n * determining the maximum number of tasks that can be run in parallel. By\r\n * default, as many as possible.\r\n * @param {Function} [callback] - An optional callback which is called when all\r\n * the tasks have been completed. It receives the `err` argument if any `tasks`\r\n * pass an error to their callback. Results are always returned; however, if an\r\n * error occurs, no further `tasks` will be performed, and the results object\r\n * will only contain partial results. Invoked with (err, results).\r\n * @returns undefined\r\n * @example\r\n *\r\n * async.auto({\r\n *     // this function will just be passed a callback\r\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\r\n *     showData: ['readData', function(results, cb) {\r\n *         // results.readData is the file's contents\r\n *         // ...\r\n *     }]\r\n * }, callback);\r\n *\r\n * async.auto({\r\n *     get_data: function(callback) {\r\n *         console.log('in get_data');\r\n *         // async code to get some data\r\n *         callback(null, 'data', 'converted to array');\r\n *     },\r\n *     make_folder: function(callback) {\r\n *         console.log('in make_folder');\r\n *         // async code to create a directory to store a file in\r\n *         // this is run at the same time as getting the data\r\n *         callback(null, 'folder');\r\n *     },\r\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\r\n *         console.log('in write_file', JSON.stringify(results));\r\n *         // once there is some data and the directory exists,\r\n *         // write the data to a file in the directory\r\n *         callback(null, 'filename');\r\n *     }],\r\n *     email_link: ['write_file', function(results, callback) {\r\n *         console.log('in email_link', JSON.stringify(results));\r\n *         // once the file is written let's email a link to it...\r\n *         // results.write_file contains the filename returned by write_file.\r\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\r\n *     }]\r\n * }, function(err, results) {\r\n *     console.log('err = ', err);\r\n *     console.log('results = ', results);\r\n * });\r\n */\r\nvar auto = function (tasks, concurrency, callback) {\r\n    if (typeof concurrency === 'function') {\r\n        // concurrency is optional, shift the args.\r\n        callback = concurrency;\r\n        concurrency = null;\r\n    }\r\n    callback = once(callback || noop);\r\n    var keys$$1 = keys(tasks);\r\n    var numTasks = keys$$1.length;\r\n    if (!numTasks) {\r\n        return callback(null);\r\n    }\r\n    if (!concurrency) {\r\n        concurrency = numTasks;\r\n    }\r\n\r\n    var results = {};\r\n    var runningTasks = 0;\r\n    var hasError = false;\r\n\r\n    var listeners = Object.create(null);\r\n\r\n    var readyTasks = [];\r\n\r\n    // for cycle detection:\r\n    var readyToCheck = []; // tasks that have been identified as reachable\r\n    // without the possibility of returning to an ancestor task\r\n    var uncheckedDependencies = {};\r\n\r\n    baseForOwn(tasks, function (task, key) {\r\n        if (!isArray(task)) {\r\n            // no dependencies\r\n            enqueueTask(key, [task]);\r\n            readyToCheck.push(key);\r\n            return;\r\n        }\r\n\r\n        var dependencies = task.slice(0, task.length - 1);\r\n        var remainingDependencies = dependencies.length;\r\n        if (remainingDependencies === 0) {\r\n            enqueueTask(key, task);\r\n            readyToCheck.push(key);\r\n            return;\r\n        }\r\n        uncheckedDependencies[key] = remainingDependencies;\r\n\r\n        arrayEach(dependencies, function (dependencyName) {\r\n            if (!tasks[dependencyName]) {\r\n                throw new Error('async.auto task `' + key +\r\n                    '` has a non-existent dependency `' +\r\n                    dependencyName + '` in ' +\r\n                    dependencies.join(', '));\r\n            }\r\n            addListener(dependencyName, function () {\r\n                remainingDependencies--;\r\n                if (remainingDependencies === 0) {\r\n                    enqueueTask(key, task);\r\n                }\r\n            });\r\n        });\r\n    });\r\n\r\n    checkForDeadlocks();\r\n    processQueue();\r\n\r\n    function enqueueTask(key, task) {\r\n        readyTasks.push(function () {\r\n            runTask(key, task);\r\n        });\r\n    }\r\n\r\n    function processQueue() {\r\n        if (readyTasks.length === 0 && runningTasks === 0) {\r\n            return callback(null, results);\r\n        }\r\n        while(readyTasks.length && runningTasks < concurrency) {\r\n            var run = readyTasks.shift();\r\n            run();\r\n        }\r\n\r\n    }\r\n\r\n    function addListener(taskName, fn) {\r\n        var taskListeners = listeners[taskName];\r\n        if (!taskListeners) {\r\n            taskListeners = listeners[taskName] = [];\r\n        }\r\n\r\n        taskListeners.push(fn);\r\n    }\r\n\r\n    function taskComplete(taskName) {\r\n        var taskListeners = listeners[taskName] || [];\r\n        arrayEach(taskListeners, function (fn) {\r\n            fn();\r\n        });\r\n        processQueue();\r\n    }\r\n\r\n\r\n    function runTask(key, task) {\r\n        if (hasError) return;\r\n\r\n        var taskCallback = onlyOnce(function(err, result) {\r\n            runningTasks--;\r\n            if (arguments.length > 2) {\r\n                result = slice(arguments, 1);\r\n            }\r\n            if (err) {\r\n                var safeResults = {};\r\n                baseForOwn(results, function(val, rkey) {\r\n                    safeResults[rkey] = val;\r\n                });\r\n                safeResults[key] = result;\r\n                hasError = true;\r\n                listeners = Object.create(null);\r\n\r\n                callback(err, safeResults);\r\n            } else {\r\n                results[key] = result;\r\n                taskComplete(key);\r\n            }\r\n        });\r\n\r\n        runningTasks++;\r\n        var taskFn = wrapAsync(task[task.length - 1]);\r\n        if (task.length > 1) {\r\n            taskFn(results, taskCallback);\r\n        } else {\r\n            taskFn(taskCallback);\r\n        }\r\n    }\r\n\r\n    function checkForDeadlocks() {\r\n        // Kahn's algorithm\r\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\r\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\r\n        var currentTask;\r\n        var counter = 0;\r\n        while (readyToCheck.length) {\r\n            currentTask = readyToCheck.pop();\r\n            counter++;\r\n            arrayEach(getDependents(currentTask), function (dependent) {\r\n                if (--uncheckedDependencies[dependent] === 0) {\r\n                    readyToCheck.push(dependent);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (counter !== numTasks) {\r\n            throw new Error(\r\n                'async.auto cannot execute tasks due to a recursive dependency'\r\n            );\r\n        }\r\n    }\r\n\r\n    function getDependents(taskName) {\r\n        var result = [];\r\n        baseForOwn(tasks, function (task, key) {\r\n            if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {\r\n                result.push(key);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n};\r\n\r\n/**\r\n * A specialized version of `_.map` for arrays without support for iteratee\r\n * shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the new mapped array.\r\n */\r\nfunction arrayMap(array, iteratee) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length,\r\n      result = Array(length);\r\n\r\n  while (++index < length) {\r\n    result[index] = iteratee(array[index], index, array);\r\n  }\r\n  return result;\r\n}\r\n\r\n/** `Object#toString` result references. */\r\nvar symbolTag = '[object Symbol]';\r\n\r\n/**\r\n * Checks if `value` is classified as a `Symbol` primitive or object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n * @example\r\n *\r\n * _.isSymbol(Symbol.iterator);\r\n * // => true\r\n *\r\n * _.isSymbol('abc');\r\n * // => false\r\n */\r\nfunction isSymbol(value) {\r\n  return typeof value == 'symbol' ||\r\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\r\n}\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar INFINITY = 1 / 0;\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol$1 ? Symbol$1.prototype : undefined;\r\nvar symbolToString = symbolProto ? symbolProto.toString : undefined;\r\n\r\n/**\r\n * The base implementation of `_.toString` which doesn't convert nullish\r\n * values to empty strings.\r\n *\r\n * @private\r\n * @param {*} value The value to process.\r\n * @returns {string} Returns the string.\r\n */\r\nfunction baseToString(value) {\r\n  // Exit early for strings to avoid a performance hit in some environments.\r\n  if (typeof value == 'string') {\r\n    return value;\r\n  }\r\n  if (isArray(value)) {\r\n    // Recursively convert values (susceptible to call stack limits).\r\n    return arrayMap(value, baseToString) + '';\r\n  }\r\n  if (isSymbol(value)) {\r\n    return symbolToString ? symbolToString.call(value) : '';\r\n  }\r\n  var result = (value + '');\r\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.slice` without an iteratee call guard.\r\n *\r\n * @private\r\n * @param {Array} array The array to slice.\r\n * @param {number} [start=0] The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns the slice of `array`.\r\n */\r\nfunction baseSlice(array, start, end) {\r\n  var index = -1,\r\n      length = array.length;\r\n\r\n  if (start < 0) {\r\n    start = -start > length ? 0 : (length + start);\r\n  }\r\n  end = end > length ? length : end;\r\n  if (end < 0) {\r\n    end += length;\r\n  }\r\n  length = start > end ? 0 : ((end - start) >>> 0);\r\n  start >>>= 0;\r\n\r\n  var result = Array(length);\r\n  while (++index < length) {\r\n    result[index] = array[index + start];\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Casts `array` to a slice if it's needed.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {number} start The start position.\r\n * @param {number} [end=array.length] The end position.\r\n * @returns {Array} Returns the cast slice.\r\n */\r\nfunction castSlice(array, start, end) {\r\n  var length = array.length;\r\n  end = end === undefined ? length : end;\r\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\r\n}\r\n\r\n/**\r\n * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol\r\n * that is not found in the character symbols.\r\n *\r\n * @private\r\n * @param {Array} strSymbols The string symbols to inspect.\r\n * @param {Array} chrSymbols The character symbols to find.\r\n * @returns {number} Returns the index of the last unmatched string symbol.\r\n */\r\nfunction charsEndIndex(strSymbols, chrSymbols) {\r\n  var index = strSymbols.length;\r\n\r\n  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\r\n  return index;\r\n}\r\n\r\n/**\r\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\r\n * that is not found in the character symbols.\r\n *\r\n * @private\r\n * @param {Array} strSymbols The string symbols to inspect.\r\n * @param {Array} chrSymbols The character symbols to find.\r\n * @returns {number} Returns the index of the first unmatched string symbol.\r\n */\r\nfunction charsStartIndex(strSymbols, chrSymbols) {\r\n  var index = -1,\r\n      length = strSymbols.length;\r\n\r\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\r\n  return index;\r\n}\r\n\r\n/**\r\n * Converts an ASCII `string` to an array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the converted array.\r\n */\r\nfunction asciiToArray(string) {\r\n  return string.split('');\r\n}\r\n\r\n/** Used to compose unicode character classes. */\r\nvar rsAstralRange = '\\\\ud800-\\\\udfff';\r\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f';\r\nvar reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f';\r\nvar rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff';\r\nvar rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\r\nvar rsVarRange = '\\\\ufe0e\\\\ufe0f';\r\n\r\n/** Used to compose unicode capture groups. */\r\nvar rsZWJ = '\\\\u200d';\r\n\r\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\r\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\r\n\r\n/**\r\n * Checks if `string` contains Unicode symbols.\r\n *\r\n * @private\r\n * @param {string} string The string to inspect.\r\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\r\n */\r\nfunction hasUnicode(string) {\r\n  return reHasUnicode.test(string);\r\n}\r\n\r\n/** Used to compose unicode character classes. */\r\nvar rsAstralRange$1 = '\\\\ud800-\\\\udfff';\r\nvar rsComboMarksRange$1 = '\\\\u0300-\\\\u036f';\r\nvar reComboHalfMarksRange$1 = '\\\\ufe20-\\\\ufe2f';\r\nvar rsComboSymbolsRange$1 = '\\\\u20d0-\\\\u20ff';\r\nvar rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;\r\nvar rsVarRange$1 = '\\\\ufe0e\\\\ufe0f';\r\n\r\n/** Used to compose unicode capture groups. */\r\nvar rsAstral = '[' + rsAstralRange$1 + ']';\r\nvar rsCombo = '[' + rsComboRange$1 + ']';\r\nvar rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\r\nvar rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';\r\nvar rsNonAstral = '[^' + rsAstralRange$1 + ']';\r\nvar rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\r\nvar rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\r\nvar rsZWJ$1 = '\\\\u200d';\r\n\r\n/** Used to compose unicode regexes. */\r\nvar reOptMod = rsModifier + '?';\r\nvar rsOptVar = '[' + rsVarRange$1 + ']?';\r\nvar rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';\r\nvar rsSeq = rsOptVar + reOptMod + rsOptJoin;\r\nvar rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\r\n\r\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\r\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\r\n\r\n/**\r\n * Converts a Unicode `string` to an array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the converted array.\r\n */\r\nfunction unicodeToArray(string) {\r\n  return string.match(reUnicode) || [];\r\n}\r\n\r\n/**\r\n * Converts `string` to an array.\r\n *\r\n * @private\r\n * @param {string} string The string to convert.\r\n * @returns {Array} Returns the converted array.\r\n */\r\nfunction stringToArray(string) {\r\n  return hasUnicode(string)\r\n    ? unicodeToArray(string)\r\n    : asciiToArray(string);\r\n}\r\n\r\n/**\r\n * Converts `value` to a string. An empty string is returned for `null`\r\n * and `undefined` values. The sign of `-0` is preserved.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to convert.\r\n * @returns {string} Returns the converted string.\r\n * @example\r\n *\r\n * _.toString(null);\r\n * // => ''\r\n *\r\n * _.toString(-0);\r\n * // => '-0'\r\n *\r\n * _.toString([1, 2, 3]);\r\n * // => '1,2,3'\r\n */\r\nfunction toString(value) {\r\n  return value == null ? '' : baseToString(value);\r\n}\r\n\r\n/** Used to match leading and trailing whitespace. */\r\nvar reTrim = /^\\s+|\\s+$/g;\r\n\r\n/**\r\n * Removes leading and trailing whitespace or specified characters from `string`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category String\r\n * @param {string} [string=''] The string to trim.\r\n * @param {string} [chars=whitespace] The characters to trim.\r\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\r\n * @returns {string} Returns the trimmed string.\r\n * @example\r\n *\r\n * _.trim('  abc  ');\r\n * // => 'abc'\r\n *\r\n * _.trim('-_-abc-_-', '_-');\r\n * // => 'abc'\r\n *\r\n * _.map(['  foo  ', '  bar  '], _.trim);\r\n * // => ['foo', 'bar']\r\n */\r\nfunction trim(string, chars, guard) {\r\n  string = toString(string);\r\n  if (string && (guard || chars === undefined)) {\r\n    return string.replace(reTrim, '');\r\n  }\r\n  if (!string || !(chars = baseToString(chars))) {\r\n    return string;\r\n  }\r\n  var strSymbols = stringToArray(string),\r\n      chrSymbols = stringToArray(chars),\r\n      start = charsStartIndex(strSymbols, chrSymbols),\r\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\r\n\r\n  return castSlice(strSymbols, start, end).join('');\r\n}\r\n\r\nvar FN_ARGS = /^(?:async\\s+)?(function)?\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m;\r\nvar FN_ARG_SPLIT = /,/;\r\nvar FN_ARG = /(=.+)?(\\s*)$/;\r\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n\r\nfunction parseParams(func) {\r\n    func = func.toString().replace(STRIP_COMMENTS, '');\r\n    func = func.match(FN_ARGS)[2].replace(' ', '');\r\n    func = func ? func.split(FN_ARG_SPLIT) : [];\r\n    func = func.map(function (arg){\r\n        return trim(arg.replace(FN_ARG, ''));\r\n    });\r\n    return func;\r\n}\r\n\r\n/**\r\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\r\n * tasks are specified as parameters to the function, after the usual callback\r\n * parameter, with the parameter names matching the names of the tasks it\r\n * depends on. This can provide even more readable task graphs which can be\r\n * easier to maintain.\r\n *\r\n * If a final callback is specified, the task results are similarly injected,\r\n * specified as named parameters after the initial error parameter.\r\n *\r\n * The autoInject function is purely syntactic sugar and its semantics are\r\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\r\n *\r\n * @name autoInject\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.auto]{@link module:ControlFlow.auto}\r\n * @category Control Flow\r\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\r\n * the form 'func([dependencies...], callback). The object's key of a property\r\n * serves as the name of the task defined by that property, i.e. can be used\r\n * when specifying requirements for other tasks.\r\n * * The `callback` parameter is a `callback(err, result)` which must be called\r\n *   when finished, passing an `error` (which can be `null`) and the result of\r\n *   the function's execution. The remaining parameters name other tasks on\r\n *   which the task is dependent, and the results from those tasks are the\r\n *   arguments of those parameters.\r\n * @param {Function} [callback] - An optional callback which is called when all\r\n * the tasks have been completed. It receives the `err` argument if any `tasks`\r\n * pass an error to their callback, and a `results` object with any completed\r\n * task results, similar to `auto`.\r\n * @example\r\n *\r\n * //  The example from `auto` can be rewritten as follows:\r\n * async.autoInject({\r\n *     get_data: function(callback) {\r\n *         // async code to get some data\r\n *         callback(null, 'data', 'converted to array');\r\n *     },\r\n *     make_folder: function(callback) {\r\n *         // async code to create a directory to store a file in\r\n *         // this is run at the same time as getting the data\r\n *         callback(null, 'folder');\r\n *     },\r\n *     write_file: function(get_data, make_folder, callback) {\r\n *         // once there is some data and the directory exists,\r\n *         // write the data to a file in the directory\r\n *         callback(null, 'filename');\r\n *     },\r\n *     email_link: function(write_file, callback) {\r\n *         // once the file is written let's email a link to it...\r\n *         // write_file contains the filename returned by write_file.\r\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\r\n *     }\r\n * }, function(err, results) {\r\n *     console.log('err = ', err);\r\n *     console.log('email_link = ', results.email_link);\r\n * });\r\n *\r\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\r\n * // will not work with plain functions, since the parameter names will be\r\n * // collapsed to a single letter identifier.  To work around this, you can\r\n * // explicitly specify the names of the parameters your task function needs\r\n * // in an array, similar to Angular.js dependency injection.\r\n *\r\n * // This still has an advantage over plain `auto`, since the results a task\r\n * // depends on are still spread into arguments.\r\n * async.autoInject({\r\n *     //...\r\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\r\n *         callback(null, 'filename');\r\n *     }],\r\n *     email_link: ['write_file', function(write_file, callback) {\r\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\r\n *     }]\r\n *     //...\r\n * }, function(err, results) {\r\n *     console.log('err = ', err);\r\n *     console.log('email_link = ', results.email_link);\r\n * });\r\n */\r\nfunction autoInject(tasks, callback) {\r\n    var newTasks = {};\r\n\r\n    baseForOwn(tasks, function (taskFn, key) {\r\n        var params;\r\n        var fnIsAsync = isAsync(taskFn);\r\n        var hasNoDeps =\r\n            (!fnIsAsync && taskFn.length === 1) ||\r\n            (fnIsAsync && taskFn.length === 0);\r\n\r\n        if (isArray(taskFn)) {\r\n            params = taskFn.slice(0, -1);\r\n            taskFn = taskFn[taskFn.length - 1];\r\n\r\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\r\n        } else if (hasNoDeps) {\r\n            // no dependencies, use the function as-is\r\n            newTasks[key] = taskFn;\r\n        } else {\r\n            params = parseParams(taskFn);\r\n            if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {\r\n                throw new Error(\"autoInject task functions require explicit parameters.\");\r\n            }\r\n\r\n            // remove callback param\r\n            if (!fnIsAsync) params.pop();\r\n\r\n            newTasks[key] = params.concat(newTask);\r\n        }\r\n\r\n        function newTask(results, taskCb) {\r\n            var newArgs = arrayMap(params, function (name) {\r\n                return results[name];\r\n            });\r\n            newArgs.push(taskCb);\r\n            wrapAsync(taskFn).apply(null, newArgs);\r\n        }\r\n    });\r\n\r\n    auto(newTasks, callback);\r\n}\r\n\r\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\r\n// used for queues. This implementation assumes that the node provided by the user can be modified\r\n// to adjust the next and last properties. We implement only the minimal functionality\r\n// for queue support.\r\nfunction DLL() {\r\n    this.head = this.tail = null;\r\n    this.length = 0;\r\n}\r\n\r\nfunction setInitial(dll, node) {\r\n    dll.length = 1;\r\n    dll.head = dll.tail = node;\r\n}\r\n\r\nDLL.prototype.removeLink = function(node) {\r\n    if (node.prev) node.prev.next = node.next;\r\n    else this.head = node.next;\r\n    if (node.next) node.next.prev = node.prev;\r\n    else this.tail = node.prev;\r\n\r\n    node.prev = node.next = null;\r\n    this.length -= 1;\r\n    return node;\r\n};\r\n\r\nDLL.prototype.empty = function () {\r\n    while(this.head) this.shift();\r\n    return this;\r\n};\r\n\r\nDLL.prototype.insertAfter = function(node, newNode) {\r\n    newNode.prev = node;\r\n    newNode.next = node.next;\r\n    if (node.next) node.next.prev = newNode;\r\n    else this.tail = newNode;\r\n    node.next = newNode;\r\n    this.length += 1;\r\n};\r\n\r\nDLL.prototype.insertBefore = function(node, newNode) {\r\n    newNode.prev = node.prev;\r\n    newNode.next = node;\r\n    if (node.prev) node.prev.next = newNode;\r\n    else this.head = newNode;\r\n    node.prev = newNode;\r\n    this.length += 1;\r\n};\r\n\r\nDLL.prototype.unshift = function(node) {\r\n    if (this.head) this.insertBefore(this.head, node);\r\n    else setInitial(this, node);\r\n};\r\n\r\nDLL.prototype.push = function(node) {\r\n    if (this.tail) this.insertAfter(this.tail, node);\r\n    else setInitial(this, node);\r\n};\r\n\r\nDLL.prototype.shift = function() {\r\n    return this.head && this.removeLink(this.head);\r\n};\r\n\r\nDLL.prototype.pop = function() {\r\n    return this.tail && this.removeLink(this.tail);\r\n};\r\n\r\nDLL.prototype.toArray = function () {\r\n    var arr = Array(this.length);\r\n    var curr = this.head;\r\n    for(var idx = 0; idx < this.length; idx++) {\r\n        arr[idx] = curr.data;\r\n        curr = curr.next;\r\n    }\r\n    return arr;\r\n};\r\n\r\nDLL.prototype.remove = function (testFn) {\r\n    var curr = this.head;\r\n    while(!!curr) {\r\n        var next = curr.next;\r\n        if (testFn(curr)) {\r\n            this.removeLink(curr);\r\n        }\r\n        curr = next;\r\n    }\r\n    return this;\r\n};\r\n\r\nfunction queue(worker, concurrency, payload) {\r\n    if (concurrency == null) {\r\n        concurrency = 1;\r\n    }\r\n    else if(concurrency === 0) {\r\n        throw new Error('Concurrency must not be zero');\r\n    }\r\n\r\n    var _worker = wrapAsync(worker);\r\n    var numRunning = 0;\r\n    var workersList = [];\r\n\r\n    var processingScheduled = false;\r\n    function _insert(data, insertAtFront, callback) {\r\n        if (callback != null && typeof callback !== 'function') {\r\n            throw new Error('task callback must be a function');\r\n        }\r\n        q.started = true;\r\n        if (!isArray(data)) {\r\n            data = [data];\r\n        }\r\n        if (data.length === 0 && q.idle()) {\r\n            // call drain immediately if there are no tasks\r\n            return setImmediate$1(function() {\r\n                q.drain();\r\n            });\r\n        }\r\n\r\n        for (var i = 0, l = data.length; i < l; i++) {\r\n            var item = {\r\n                data: data[i],\r\n                callback: callback || noop\r\n            };\r\n\r\n            if (insertAtFront) {\r\n                q._tasks.unshift(item);\r\n            } else {\r\n                q._tasks.push(item);\r\n            }\r\n        }\r\n\r\n        if (!processingScheduled) {\r\n            processingScheduled = true;\r\n            setImmediate$1(function() {\r\n                processingScheduled = false;\r\n                q.process();\r\n            });\r\n        }\r\n    }\r\n\r\n    function _next(tasks) {\r\n        return function(err){\r\n            numRunning -= 1;\r\n\r\n            for (var i = 0, l = tasks.length; i < l; i++) {\r\n                var task = tasks[i];\r\n\r\n                var index = baseIndexOf(workersList, task, 0);\r\n                if (index === 0) {\r\n                    workersList.shift();\r\n                } else if (index > 0) {\r\n                    workersList.splice(index, 1);\r\n                }\r\n\r\n                task.callback.apply(task, arguments);\r\n\r\n                if (err != null) {\r\n                    q.error(err, task.data);\r\n                }\r\n            }\r\n\r\n            if (numRunning <= (q.concurrency - q.buffer) ) {\r\n                q.unsaturated();\r\n            }\r\n\r\n            if (q.idle()) {\r\n                q.drain();\r\n            }\r\n            q.process();\r\n        };\r\n    }\r\n\r\n    var isProcessing = false;\r\n    var q = {\r\n        _tasks: new DLL(),\r\n        concurrency: concurrency,\r\n        payload: payload,\r\n        saturated: noop,\r\n        unsaturated:noop,\r\n        buffer: concurrency / 4,\r\n        empty: noop,\r\n        drain: noop,\r\n        error: noop,\r\n        started: false,\r\n        paused: false,\r\n        push: function (data, callback) {\r\n            _insert(data, false, callback);\r\n        },\r\n        kill: function () {\r\n            q.drain = noop;\r\n            q._tasks.empty();\r\n        },\r\n        unshift: function (data, callback) {\r\n            _insert(data, true, callback);\r\n        },\r\n        remove: function (testFn) {\r\n            q._tasks.remove(testFn);\r\n        },\r\n        process: function () {\r\n            // Avoid trying to start too many processing operations. This can occur\r\n            // when callbacks resolve synchronously (#1267).\r\n            if (isProcessing) {\r\n                return;\r\n            }\r\n            isProcessing = true;\r\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\r\n                var tasks = [], data = [];\r\n                var l = q._tasks.length;\r\n                if (q.payload) l = Math.min(l, q.payload);\r\n                for (var i = 0; i < l; i++) {\r\n                    var node = q._tasks.shift();\r\n                    tasks.push(node);\r\n                    workersList.push(node);\r\n                    data.push(node.data);\r\n                }\r\n\r\n                numRunning += 1;\r\n\r\n                if (q._tasks.length === 0) {\r\n                    q.empty();\r\n                }\r\n\r\n                if (numRunning === q.concurrency) {\r\n                    q.saturated();\r\n                }\r\n\r\n                var cb = onlyOnce(_next(tasks));\r\n                _worker(data, cb);\r\n            }\r\n            isProcessing = false;\r\n        },\r\n        length: function () {\r\n            return q._tasks.length;\r\n        },\r\n        running: function () {\r\n            return numRunning;\r\n        },\r\n        workersList: function () {\r\n            return workersList;\r\n        },\r\n        idle: function() {\r\n            return q._tasks.length + numRunning === 0;\r\n        },\r\n        pause: function () {\r\n            q.paused = true;\r\n        },\r\n        resume: function () {\r\n            if (q.paused === false) { return; }\r\n            q.paused = false;\r\n            setImmediate$1(q.process);\r\n        }\r\n    };\r\n    return q;\r\n}\r\n\r\n/**\r\n * A cargo of tasks for the worker function to complete. Cargo inherits all of\r\n * the same methods and event callbacks as [`queue`]{@link module:ControlFlow.queue}.\r\n * @typedef {Object} CargoObject\r\n * @memberOf module:ControlFlow\r\n * @property {Function} length - A function returning the number of items\r\n * waiting to be processed. Invoke like `cargo.length()`.\r\n * @property {number} payload - An `integer` for determining how many tasks\r\n * should be process per round. This property can be changed after a `cargo` is\r\n * created to alter the payload on-the-fly.\r\n * @property {Function} push - Adds `task` to the `queue`. The callback is\r\n * called once the `worker` has finished processing the task. Instead of a\r\n * single task, an array of `tasks` can be submitted. The respective callback is\r\n * used for every task in the list. Invoke like `cargo.push(task, [callback])`.\r\n * @property {Function} saturated - A callback that is called when the\r\n * `queue.length()` hits the concurrency and further tasks will be queued.\r\n * @property {Function} empty - A callback that is called when the last item\r\n * from the `queue` is given to a `worker`.\r\n * @property {Function} drain - A callback that is called when the last item\r\n * from the `queue` has returned from the `worker`.\r\n * @property {Function} idle - a function returning false if there are items\r\n * waiting or being processed, or true if not. Invoke like `cargo.idle()`.\r\n * @property {Function} pause - a function that pauses the processing of tasks\r\n * until `resume()` is called. Invoke like `cargo.pause()`.\r\n * @property {Function} resume - a function that resumes the processing of\r\n * queued tasks when the queue is paused. Invoke like `cargo.resume()`.\r\n * @property {Function} kill - a function that removes the `drain` callback and\r\n * empties remaining tasks from the queue forcing it to go idle. Invoke like `cargo.kill()`.\r\n */\r\n\r\n/**\r\n * Creates a `cargo` object with the specified payload. Tasks added to the\r\n * cargo will be processed altogether (up to the `payload` limit). If the\r\n * `worker` is in progress, the task is queued until it becomes available. Once\r\n * the `worker` has completed some tasks, each callback of those tasks is\r\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\r\n * for how `cargo` and `queue` work.\r\n *\r\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\r\n * at a time, cargo passes an array of tasks to a single worker, repeating\r\n * when the worker is finished.\r\n *\r\n * @name cargo\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.queue]{@link module:ControlFlow.queue}\r\n * @category Control Flow\r\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\r\n * of queued tasks. Invoked with `(tasks, callback)`.\r\n * @param {number} [payload=Infinity] - An optional `integer` for determining\r\n * how many tasks should be processed per round; if omitted, the default is\r\n * unlimited.\r\n * @returns {module:ControlFlow.CargoObject} A cargo object to manage the tasks. Callbacks can\r\n * attached as certain properties to listen for specific events during the\r\n * lifecycle of the cargo and inner queue.\r\n * @example\r\n *\r\n * // create a cargo object with payload 2\r\n * var cargo = async.cargo(function(tasks, callback) {\r\n *     for (var i=0; i<tasks.length; i++) {\r\n *         console.log('hello ' + tasks[i].name);\r\n *     }\r\n *     callback();\r\n * }, 2);\r\n *\r\n * // add some items\r\n * cargo.push({name: 'foo'}, function(err) {\r\n *     console.log('finished processing foo');\r\n * });\r\n * cargo.push({name: 'bar'}, function(err) {\r\n *     console.log('finished processing bar');\r\n * });\r\n * cargo.push({name: 'baz'}, function(err) {\r\n *     console.log('finished processing baz');\r\n * });\r\n */\r\nfunction cargo(worker, payload) {\r\n    return queue(worker, 1, payload);\r\n}\r\n\r\n/**\r\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\r\n *\r\n * @name eachOfSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.eachOf]{@link module:Collections.eachOf}\r\n * @alias forEachOfSeries\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * Invoked with (item, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Invoked with (err).\r\n */\r\nvar eachOfSeries = doLimit(eachOfLimit, 1);\r\n\r\n/**\r\n * Reduces `coll` into a single value using an async `iteratee` to return each\r\n * successive step. `memo` is the initial state of the reduction. This function\r\n * only operates in series.\r\n *\r\n * For performance reasons, it may make sense to split a call to this function\r\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\r\n * results. This function is for situations where each step in the reduction\r\n * needs to be async; if you can get the data before reducing it, then it's\r\n * probably a good idea to do so.\r\n *\r\n * @name reduce\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias inject\r\n * @alias foldl\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {*} memo - The initial state of the reduction.\r\n * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n * array to produce the next step in the reduction.\r\n * The `iteratee` should complete with the next state of the reduction.\r\n * If the iteratee complete with an error, the reduction is stopped and the\r\n * main `callback` is immediately called with the error.\r\n * Invoked with (memo, item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\r\n * (err, result).\r\n * @example\r\n *\r\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\r\n *     // pointless async:\r\n *     process.nextTick(function() {\r\n *         callback(null, memo + item)\r\n *     });\r\n * }, function(err, result) {\r\n *     // result is now equal to the last value of memo, which is 6\r\n * });\r\n */\r\nfunction reduce(coll, memo, iteratee, callback) {\r\n    callback = once(callback || noop);\r\n    var _iteratee = wrapAsync(iteratee);\r\n    eachOfSeries(coll, function(x, i, callback) {\r\n        _iteratee(memo, x, function(err, v) {\r\n            memo = v;\r\n            callback(err);\r\n        });\r\n    }, function(err) {\r\n        callback(err, memo);\r\n    });\r\n}\r\n\r\n/**\r\n * Version of the compose function that is more natural to read. Each function\r\n * consumes the return value of the previous function. It is the equivalent of\r\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\r\n *\r\n * Each function is executed with the `this` binding of the composed function.\r\n *\r\n * @name seq\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.compose]{@link module:ControlFlow.compose}\r\n * @category Control Flow\r\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\r\n * @returns {Function} a function that composes the `functions` in order\r\n * @example\r\n *\r\n * // Requires lodash (or underscore), express3 and dresende's orm2.\r\n * // Part of an app, that fetches cats of the logged user.\r\n * // This example uses `seq` function to avoid overnesting and error\r\n * // handling clutter.\r\n * app.get('/cats', function(request, response) {\r\n *     var User = request.models.User;\r\n *     async.seq(\r\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\r\n *         function(user, fn) {\r\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\r\n *         }\r\n *     )(req.session.user_id, function (err, cats) {\r\n *         if (err) {\r\n *             console.error(err);\r\n *             response.json({ status: 'error', message: err.message });\r\n *         } else {\r\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\r\n *         }\r\n *     });\r\n * });\r\n */\r\nfunction seq(/*...functions*/) {\r\n    var _functions = arrayMap(arguments, wrapAsync);\r\n    return function(/*...args*/) {\r\n        var args = slice(arguments);\r\n        var that = this;\r\n\r\n        var cb = args[args.length - 1];\r\n        if (typeof cb == 'function') {\r\n            args.pop();\r\n        } else {\r\n            cb = noop;\r\n        }\r\n\r\n        reduce(_functions, args, function(newargs, fn, cb) {\r\n            fn.apply(that, newargs.concat(function(err/*, ...nextargs*/) {\r\n                var nextargs = slice(arguments, 1);\r\n                cb(err, nextargs);\r\n            }));\r\n        },\r\n        function(err, results) {\r\n            cb.apply(that, [err].concat(results));\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a function which is a composition of the passed asynchronous\r\n * functions. Each function consumes the return value of the function that\r\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\r\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\r\n *\r\n * Each function is executed with the `this` binding of the composed function.\r\n *\r\n * @name compose\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\r\n * @returns {Function} an asynchronous function that is the composed\r\n * asynchronous `functions`\r\n * @example\r\n *\r\n * function add1(n, callback) {\r\n *     setTimeout(function () {\r\n *         callback(null, n + 1);\r\n *     }, 10);\r\n * }\r\n *\r\n * function mul3(n, callback) {\r\n *     setTimeout(function () {\r\n *         callback(null, n * 3);\r\n *     }, 10);\r\n * }\r\n *\r\n * var add1mul3 = async.compose(mul3, add1);\r\n * add1mul3(4, function (err, result) {\r\n *     // result now equals 15\r\n * });\r\n */\r\nvar compose = function(/*...args*/) {\r\n    return seq.apply(null, slice(arguments).reverse());\r\n};\r\n\r\nvar _concat = Array.prototype.concat;\r\n\r\n/**\r\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name concatLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.concat]{@link module:Collections.concat}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\r\n * which should use an array as its result. Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished, or an error occurs. Results is an array\r\n * containing the concatenated results of the `iteratee` function. Invoked with\r\n * (err, results).\r\n */\r\nvar concatLimit = function(coll, limit, iteratee, callback) {\r\n    callback = callback || noop;\r\n    var _iteratee = wrapAsync(iteratee);\r\n    mapLimit(coll, limit, function(val, callback) {\r\n        _iteratee(val, function(err /*, ...args*/) {\r\n            if (err) return callback(err);\r\n            return callback(null, slice(arguments, 1));\r\n        });\r\n    }, function(err, mapResults) {\r\n        var result = [];\r\n        for (var i = 0; i < mapResults.length; i++) {\r\n            if (mapResults[i]) {\r\n                result = _concat.apply(result, mapResults[i]);\r\n            }\r\n        }\r\n\r\n        return callback(err, result);\r\n    });\r\n};\r\n\r\n/**\r\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\r\n * the concatenated list. The `iteratee`s are called in parallel, and the\r\n * results are concatenated as they return. There is no guarantee that the\r\n * results array will be returned in the original order of `coll` passed to the\r\n * `iteratee` function.\r\n *\r\n * @name concat\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\r\n * which should use an array as its result. Invoked with (item, callback).\r\n * @param {Function} [callback(err)] - A callback which is called after all the\r\n * `iteratee` functions have finished, or an error occurs. Results is an array\r\n * containing the concatenated results of the `iteratee` function. Invoked with\r\n * (err, results).\r\n * @example\r\n *\r\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\r\n *     // files is now a list of filenames that exist in the 3 directories\r\n * });\r\n */\r\nvar concat = doLimit(concatLimit, Infinity);\r\n\r\n/**\r\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\r\n *\r\n * @name concatSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.concat]{@link module:Collections.concat}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\r\n * The iteratee should complete with an array an array of results.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback(err)] - A callback which is called after all the\r\n * `iteratee` functions have finished, or an error occurs. Results is an array\r\n * containing the concatenated results of the `iteratee` function. Invoked with\r\n * (err, results).\r\n */\r\nvar concatSeries = doLimit(concatLimit, 1);\r\n\r\n/**\r\n * Returns a function that when called, calls-back with the values provided.\r\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\r\n * [`auto`]{@link module:ControlFlow.auto}.\r\n *\r\n * @name constant\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {...*} arguments... - Any number of arguments to automatically invoke\r\n * callback with.\r\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\r\n * invokes the callback with the previous given arguments.\r\n * @example\r\n *\r\n * async.waterfall([\r\n *     async.constant(42),\r\n *     function (value, next) {\r\n *         // value === 42\r\n *     },\r\n *     //...\r\n * ], callback);\r\n *\r\n * async.waterfall([\r\n *     async.constant(filename, \"utf8\"),\r\n *     fs.readFile,\r\n *     function (fileData, next) {\r\n *         //...\r\n *     }\r\n *     //...\r\n * ], callback);\r\n *\r\n * async.auto({\r\n *     hostname: async.constant(\"https://server.net/\"),\r\n *     port: findFreePort,\r\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\r\n *         startServer(options, cb);\r\n *     }],\r\n *     //...\r\n * }, callback);\r\n */\r\nvar constant = function(/*...values*/) {\r\n    var values = slice(arguments);\r\n    var args = [null].concat(values);\r\n    return function (/*...ignoredArgs, callback*/) {\r\n        var callback = arguments[arguments.length - 1];\r\n        return callback.apply(this, args);\r\n    };\r\n};\r\n\r\n/**\r\n * This method returns the first argument it receives.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Util\r\n * @param {*} value Any value.\r\n * @returns {*} Returns `value`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n *\r\n * console.log(_.identity(object) === object);\r\n * // => true\r\n */\r\nfunction identity(value) {\r\n  return value;\r\n}\r\n\r\nfunction _createTester(check, getResult) {\r\n    return function(eachfn, arr, iteratee, cb) {\r\n        cb = cb || noop;\r\n        var testPassed = false;\r\n        var testResult;\r\n        eachfn(arr, function(value, _, callback) {\r\n            iteratee(value, function(err, result) {\r\n                if (err) {\r\n                    callback(err);\r\n                } else if (check(result) && !testResult) {\r\n                    testPassed = true;\r\n                    testResult = getResult(true, value);\r\n                    callback(null, breakLoop);\r\n                } else {\r\n                    callback();\r\n                }\r\n            });\r\n        }, function(err) {\r\n            if (err) {\r\n                cb(err);\r\n            } else {\r\n                cb(null, testPassed ? testResult : getResult(false));\r\n            }\r\n        });\r\n    };\r\n}\r\n\r\nfunction _findGetResult(v, x) {\r\n    return x;\r\n}\r\n\r\n/**\r\n * Returns the first value in `coll` that passes an async truth test. The\r\n * `iteratee` is applied in parallel, meaning the first iteratee to return\r\n * `true` will fire the detect `callback` with that result. That means the\r\n * result might not be the first item in the original `coll` (in terms of order)\r\n * that passes the test.\r\n\r\n * If order within the original `coll` is important, then look at\r\n * [`detectSeries`]{@link module:Collections.detectSeries}.\r\n *\r\n * @name detect\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias find\r\n * @category Collections\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n * The iteratee must complete with a boolean value as its result.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n * Result will be the first item in the array that passes the truth test\r\n * (iteratee) or the value `undefined` if none passed. Invoked with\r\n * (err, result).\r\n * @example\r\n *\r\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\r\n *     fs.access(filePath, function(err) {\r\n *         callback(null, !err)\r\n *     });\r\n * }, function(err, result) {\r\n *     // result now equals the first file in the list that exists\r\n * });\r\n */\r\nvar detect = doParallel(_createTester(identity, _findGetResult));\r\n\r\n/**\r\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name detectLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.detect]{@link module:Collections.detect}\r\n * @alias findLimit\r\n * @category Collections\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n * The iteratee must complete with a boolean value as its result.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n * Result will be the first item in the array that passes the truth test\r\n * (iteratee) or the value `undefined` if none passed. Invoked with\r\n * (err, result).\r\n */\r\nvar detectLimit = doParallelLimit(_createTester(identity, _findGetResult));\r\n\r\n/**\r\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\r\n *\r\n * @name detectSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.detect]{@link module:Collections.detect}\r\n * @alias findSeries\r\n * @category Collections\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\r\n * The iteratee must complete with a boolean value as its result.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\r\n * Result will be the first item in the array that passes the truth test\r\n * (iteratee) or the value `undefined` if none passed. Invoked with\r\n * (err, result).\r\n */\r\nvar detectSeries = doLimit(detectLimit, 1);\r\n\r\nfunction consoleFunc(name) {\r\n    return function (fn/*, ...args*/) {\r\n        var args = slice(arguments, 1);\r\n        args.push(function (err/*, ...args*/) {\r\n            var args = slice(arguments, 1);\r\n            if (typeof console === 'object') {\r\n                if (err) {\r\n                    if (console.error) {\r\n                        console.error(err);\r\n                    }\r\n                } else if (console[name]) {\r\n                    arrayEach(args, function (x) {\r\n                        console[name](x);\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        wrapAsync(fn).apply(null, args);\r\n    };\r\n}\r\n\r\n/**\r\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\r\n * `console` using `console.dir` to display the properties of the resulting object.\r\n * Only works in Node.js or in browsers that support `console.dir` and\r\n * `console.error` (such as FF and Chrome).\r\n * If multiple arguments are returned from the async function,\r\n * `console.dir` is called on each argument in order.\r\n *\r\n * @name dir\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} function - The function you want to eventually apply\r\n * all arguments to.\r\n * @param {...*} arguments... - Any number of arguments to apply to the function.\r\n * @example\r\n *\r\n * // in a module\r\n * var hello = function(name, callback) {\r\n *     setTimeout(function() {\r\n *         callback(null, {hello: name});\r\n *     }, 1000);\r\n * };\r\n *\r\n * // in the node repl\r\n * node> async.dir(hello, 'world');\r\n * {hello: 'world'}\r\n */\r\nvar dir = consoleFunc('dir');\r\n\r\n/**\r\n * The post-check version of [`during`]{@link module:ControlFlow.during}. To reflect the difference in\r\n * the order of operations, the arguments `test` and `fn` are switched.\r\n *\r\n * Also a version of [`doWhilst`]{@link module:ControlFlow.doWhilst} with asynchronous `test` function.\r\n * @name doDuring\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.during]{@link module:ControlFlow.during}\r\n * @category Control Flow\r\n * @param {AsyncFunction} fn - An async function which is called each time\r\n * `test` passes. Invoked with (callback).\r\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\r\n * execution of `fn`. Invoked with (...args, callback), where `...args` are the\r\n * non-error args from the previous callback of `fn`.\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has failed and repeated execution of `fn` has stopped. `callback`\r\n * will be passed an error if one occurred, otherwise `null`.\r\n */\r\nfunction doDuring(fn, test, callback) {\r\n    callback = onlyOnce(callback || noop);\r\n    var _fn = wrapAsync(fn);\r\n    var _test = wrapAsync(test);\r\n\r\n    function next(err/*, ...args*/) {\r\n        if (err) return callback(err);\r\n        var args = slice(arguments, 1);\r\n        args.push(check);\r\n        _test.apply(this, args);\r\n    }\r\n\r\n    function check(err, truth) {\r\n        if (err) return callback(err);\r\n        if (!truth) return callback(null);\r\n        _fn(next);\r\n    }\r\n\r\n    check(null, true);\r\n\r\n}\r\n\r\n/**\r\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\r\n * the order of operations, the arguments `test` and `iteratee` are switched.\r\n *\r\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\r\n *\r\n * @name doWhilst\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n * @category Control Flow\r\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\r\n * passes. Invoked with (callback).\r\n * @param {Function} test - synchronous truth test to perform after each\r\n * execution of `iteratee`. Invoked with any non-error callback results of\r\n * `iteratee`.\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has failed and repeated execution of `iteratee` has stopped.\r\n * `callback` will be passed an error and any arguments passed to the final\r\n * `iteratee`'s callback. Invoked with (err, [results]);\r\n */\r\nfunction doWhilst(iteratee, test, callback) {\r\n    callback = onlyOnce(callback || noop);\r\n    var _iteratee = wrapAsync(iteratee);\r\n    var next = function(err/*, ...args*/) {\r\n        if (err) return callback(err);\r\n        var args = slice(arguments, 1);\r\n        if (test.apply(this, args)) return _iteratee(next);\r\n        callback.apply(null, [null].concat(args));\r\n    };\r\n    _iteratee(next);\r\n}\r\n\r\n/**\r\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\r\n * argument ordering differs from `until`.\r\n *\r\n * @name doUntil\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\r\n * @category Control Flow\r\n * @param {AsyncFunction} iteratee - An async function which is called each time\r\n * `test` fails. Invoked with (callback).\r\n * @param {Function} test - synchronous truth test to perform after each\r\n * execution of `iteratee`. Invoked with any non-error callback results of\r\n * `iteratee`.\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\r\n * will be passed an error and any arguments passed to the final `iteratee`'s\r\n * callback. Invoked with (err, [results]);\r\n */\r\nfunction doUntil(iteratee, test, callback) {\r\n    doWhilst(iteratee, function() {\r\n        return !test.apply(this, arguments);\r\n    }, callback);\r\n}\r\n\r\n/**\r\n * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\r\n * is passed a callback in the form of `function (err, truth)`. If error is\r\n * passed to `test` or `fn`, the main callback is immediately called with the\r\n * value of the error.\r\n *\r\n * @name during\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n * @category Control Flow\r\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\r\n * execution of `fn`. Invoked with (callback).\r\n * @param {AsyncFunction} fn - An async function which is called each time\r\n * `test` passes. Invoked with (callback).\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has failed and repeated execution of `fn` has stopped. `callback`\r\n * will be passed an error, if one occurred, otherwise `null`.\r\n * @example\r\n *\r\n * var count = 0;\r\n *\r\n * async.during(\r\n *     function (callback) {\r\n *         return callback(null, count < 5);\r\n *     },\r\n *     function (callback) {\r\n *         count++;\r\n *         setTimeout(callback, 1000);\r\n *     },\r\n *     function (err) {\r\n *         // 5 seconds have passed\r\n *     }\r\n * );\r\n */\r\nfunction during(test, fn, callback) {\r\n    callback = onlyOnce(callback || noop);\r\n    var _fn = wrapAsync(fn);\r\n    var _test = wrapAsync(test);\r\n\r\n    function next(err) {\r\n        if (err) return callback(err);\r\n        _test(check);\r\n    }\r\n\r\n    function check(err, truth) {\r\n        if (err) return callback(err);\r\n        if (!truth) return callback(null);\r\n        _fn(next);\r\n    }\r\n\r\n    _test(check);\r\n}\r\n\r\nfunction _withoutIndex(iteratee) {\r\n    return function (value, index, callback) {\r\n        return iteratee(value, callback);\r\n    };\r\n}\r\n\r\n/**\r\n * Applies the function `iteratee` to each item in `coll`, in parallel.\r\n * The `iteratee` is called with an item from the list, and a callback for when\r\n * it has finished. If the `iteratee` passes an error to its `callback`, the\r\n * main `callback` (for the `each` function) is immediately called with the\r\n * error.\r\n *\r\n * Note, that since this function applies `iteratee` to each item in parallel,\r\n * there is no guarantee that the iteratee functions will complete in order.\r\n *\r\n * @name each\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias forEach\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to\r\n * each item in `coll`. Invoked with (item, callback).\r\n * The array index is not passed to the iteratee.\r\n * If you need the index, use `eachOf`.\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n * @example\r\n *\r\n * // assuming openFiles is an array of file names and saveFile is a function\r\n * // to save the modified contents of that file:\r\n *\r\n * async.each(openFiles, saveFile, function(err){\r\n *   // if any of the saves produced an error, err would equal that error\r\n * });\r\n *\r\n * // assuming openFiles is an array of file names\r\n * async.each(openFiles, function(file, callback) {\r\n *\r\n *     // Perform operation on file here.\r\n *     console.log('Processing file ' + file);\r\n *\r\n *     if( file.length > 32 ) {\r\n *       console.log('This file name is too long');\r\n *       callback('File name too long');\r\n *     } else {\r\n *       // Do work to process file here\r\n *       console.log('File processed');\r\n *       callback();\r\n *     }\r\n * }, function(err) {\r\n *     // if any of the file processing produced an error, err would equal that error\r\n *     if( err ) {\r\n *       // One of the iterations produced an error.\r\n *       // All processing will now stop.\r\n *       console.log('A file failed to process');\r\n *     } else {\r\n *       console.log('All files have been processed successfully');\r\n *     }\r\n * });\r\n */\r\nfunction eachLimit(coll, iteratee, callback) {\r\n    eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);\r\n}\r\n\r\n/**\r\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name eachLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.each]{@link module:Collections.each}\r\n * @alias forEachLimit\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The array index is not passed to the iteratee.\r\n * If you need the index, use `eachOfLimit`.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n */\r\nfunction eachLimit$1(coll, limit, iteratee, callback) {\r\n    _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\r\n}\r\n\r\n/**\r\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\r\n *\r\n * @name eachSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.each]{@link module:Collections.each}\r\n * @alias forEachSeries\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each\r\n * item in `coll`.\r\n * The array index is not passed to the iteratee.\r\n * If you need the index, use `eachOfSeries`.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called when all\r\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\r\n */\r\nvar eachSeries = doLimit(eachLimit$1, 1);\r\n\r\n/**\r\n * Wrap an async function and ensure it calls its callback on a later tick of\r\n * the event loop.  If the function already calls its callback on a next tick,\r\n * no extra deferral is added. This is useful for preventing stack overflows\r\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\r\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\r\n * contained. ES2017 `async` functions are returned as-is -- they are immune\r\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\r\n *\r\n * @name ensureAsync\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\r\n * callback as its last argument.\r\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\r\n * signature as the function passed in.\r\n * @example\r\n *\r\n * function sometimesAsync(arg, callback) {\r\n *     if (cache[arg]) {\r\n *         return callback(null, cache[arg]); // this would be synchronous!!\r\n *     } else {\r\n *         doSomeIO(arg, callback); // this IO would be asynchronous\r\n *     }\r\n * }\r\n *\r\n * // this has a risk of stack overflows if many results are cached in a row\r\n * async.mapSeries(args, sometimesAsync, done);\r\n *\r\n * // this will defer sometimesAsync's callback if necessary,\r\n * // preventing stack overflows\r\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\r\n */\r\nfunction ensureAsync(fn) {\r\n    if (isAsync(fn)) return fn;\r\n    return initialParams(function (args, callback) {\r\n        var sync = true;\r\n        args.push(function () {\r\n            var innerArgs = arguments;\r\n            if (sync) {\r\n                setImmediate$1(function () {\r\n                    callback.apply(null, innerArgs);\r\n                });\r\n            } else {\r\n                callback.apply(null, innerArgs);\r\n            }\r\n        });\r\n        fn.apply(this, args);\r\n        sync = false;\r\n    });\r\n}\r\n\r\nfunction notId(v) {\r\n    return !v;\r\n}\r\n\r\n/**\r\n * Returns `true` if every element in `coll` satisfies an async test. If any\r\n * iteratee call returns `false`, the main `callback` is immediately called.\r\n *\r\n * @name every\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias all\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collection in parallel.\r\n * The iteratee must complete with a boolean result value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result will be either `true` or `false`\r\n * depending on the values of the async tests. Invoked with (err, result).\r\n * @example\r\n *\r\n * async.every(['file1','file2','file3'], function(filePath, callback) {\r\n *     fs.access(filePath, function(err) {\r\n *         callback(null, !err)\r\n *     });\r\n * }, function(err, result) {\r\n *     // if result is true then every file exists\r\n * });\r\n */\r\nvar every = doParallel(_createTester(notId, notId));\r\n\r\n/**\r\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name everyLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.every]{@link module:Collections.every}\r\n * @alias allLimit\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collection in parallel.\r\n * The iteratee must complete with a boolean result value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result will be either `true` or `false`\r\n * depending on the values of the async tests. Invoked with (err, result).\r\n */\r\nvar everyLimit = doParallelLimit(_createTester(notId, notId));\r\n\r\n/**\r\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\r\n *\r\n * @name everySeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.every]{@link module:Collections.every}\r\n * @alias allSeries\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collection in series.\r\n * The iteratee must complete with a boolean result value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result will be either `true` or `false`\r\n * depending on the values of the async tests. Invoked with (err, result).\r\n */\r\nvar everySeries = doLimit(everyLimit, 1);\r\n\r\n/**\r\n * The base implementation of `_.property` without support for deep paths.\r\n *\r\n * @private\r\n * @param {string} key The key of the property to get.\r\n * @returns {Function} Returns the new accessor function.\r\n */\r\nfunction baseProperty(key) {\r\n  return function(object) {\r\n    return object == null ? undefined : object[key];\r\n  };\r\n}\r\n\r\nfunction filterArray(eachfn, arr, iteratee, callback) {\r\n    var truthValues = new Array(arr.length);\r\n    eachfn(arr, function (x, index, callback) {\r\n        iteratee(x, function (err, v) {\r\n            truthValues[index] = !!v;\r\n            callback(err);\r\n        });\r\n    }, function (err) {\r\n        if (err) return callback(err);\r\n        var results = [];\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (truthValues[i]) results.push(arr[i]);\r\n        }\r\n        callback(null, results);\r\n    });\r\n}\r\n\r\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\r\n    var results = [];\r\n    eachfn(coll, function (x, index, callback) {\r\n        iteratee(x, function (err, v) {\r\n            if (err) {\r\n                callback(err);\r\n            } else {\r\n                if (v) {\r\n                    results.push({index: index, value: x});\r\n                }\r\n                callback();\r\n            }\r\n        });\r\n    }, function (err) {\r\n        if (err) {\r\n            callback(err);\r\n        } else {\r\n            callback(null, arrayMap(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), baseProperty('value')));\r\n        }\r\n    });\r\n}\r\n\r\nfunction _filter(eachfn, coll, iteratee, callback) {\r\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\r\n    filter(eachfn, coll, wrapAsync(iteratee), callback || noop);\r\n}\r\n\r\n/**\r\n * Returns a new array of all the values in `coll` which pass an async truth\r\n * test. This operation is performed in parallel, but the results array will be\r\n * in the same order as the original.\r\n *\r\n * @name filter\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias select\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n * with a boolean argument once it has completed. Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results).\r\n * @example\r\n *\r\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\r\n *     fs.access(filePath, function(err) {\r\n *         callback(null, !err)\r\n *     });\r\n * }, function(err, results) {\r\n *     // results now equals an array of the existing files\r\n * });\r\n */\r\nvar filter = doParallel(_filter);\r\n\r\n/**\r\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name filterLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.filter]{@link module:Collections.filter}\r\n * @alias selectLimit\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n * with a boolean argument once it has completed. Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results).\r\n */\r\nvar filterLimit = doParallelLimit(_filter);\r\n\r\n/**\r\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\r\n *\r\n * @name filterSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.filter]{@link module:Collections.filter}\r\n * @alias selectSeries\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\r\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\r\n * with a boolean argument once it has completed. Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results)\r\n */\r\nvar filterSeries = doLimit(filterLimit, 1);\r\n\r\n/**\r\n * Calls the asynchronous function `fn` with a callback parameter that allows it\r\n * to call itself again, in series, indefinitely.\r\n\r\n * If an error is passed to the callback then `errback` is called with the\r\n * error, and execution stops, otherwise it will never be called.\r\n *\r\n * @name forever\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {AsyncFunction} fn - an async function to call repeatedly.\r\n * Invoked with (next).\r\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\r\n * this function will be called, and execution stops. Invoked with (err).\r\n * @example\r\n *\r\n * async.forever(\r\n *     function(next) {\r\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\r\n *         // it will result in this function being called again.\r\n *     },\r\n *     function(err) {\r\n *         // if next is called with a value in its first parameter, it will appear\r\n *         // in here as 'err', and execution will stop.\r\n *     }\r\n * );\r\n */\r\nfunction forever(fn, errback) {\r\n    var done = onlyOnce(errback || noop);\r\n    var task = wrapAsync(ensureAsync(fn));\r\n\r\n    function next(err) {\r\n        if (err) return done(err);\r\n        task(next);\r\n    }\r\n    next();\r\n}\r\n\r\n/**\r\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name groupByLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.groupBy]{@link module:Collections.groupBy}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with a `key` to group the value under.\r\n * Invoked with (value, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Result is an `Object` whoses\r\n * properties are arrays of values which returned the corresponding key.\r\n */\r\nvar groupByLimit = function(coll, limit, iteratee, callback) {\r\n    callback = callback || noop;\r\n    var _iteratee = wrapAsync(iteratee);\r\n    mapLimit(coll, limit, function(val, callback) {\r\n        _iteratee(val, function(err, key) {\r\n            if (err) return callback(err);\r\n            return callback(null, {key: key, val: val});\r\n        });\r\n    }, function(err, mapResults) {\r\n        var result = {};\r\n        // from MDN, handle object having an `hasOwnProperty` prop\r\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n        for (var i = 0; i < mapResults.length; i++) {\r\n            if (mapResults[i]) {\r\n                var key = mapResults[i].key;\r\n                var val = mapResults[i].val;\r\n\r\n                if (hasOwnProperty.call(result, key)) {\r\n                    result[key].push(val);\r\n                } else {\r\n                    result[key] = [val];\r\n                }\r\n            }\r\n        }\r\n\r\n        return callback(err, result);\r\n    });\r\n};\r\n\r\n/**\r\n * Returns a new object, where each value corresponds to an array of items, from\r\n * `coll`, that returned the corresponding key. That is, the keys of the object\r\n * correspond to the values passed to the `iteratee` callback.\r\n *\r\n * Note: Since this function applies the `iteratee` to each item in parallel,\r\n * there is no guarantee that the `iteratee` functions will complete in order.\r\n * However, the values for each key in the `result` will be in the same order as\r\n * the original `coll`. For Objects, the values will roughly be in the order of\r\n * the original Objects' keys (but this can vary across JavaScript engines).\r\n *\r\n * @name groupBy\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with a `key` to group the value under.\r\n * Invoked with (value, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Result is an `Object` whoses\r\n * properties are arrays of values which returned the corresponding key.\r\n * @example\r\n *\r\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\r\n *     db.findById(userId, function(err, user) {\r\n *         if (err) return callback(err);\r\n *         return callback(null, user.age);\r\n *     });\r\n * }, function(err, result) {\r\n *     // result is object containing the userIds grouped by age\r\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\r\n * });\r\n */\r\nvar groupBy = doLimit(groupByLimit, Infinity);\r\n\r\n/**\r\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\r\n *\r\n * @name groupBySeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.groupBy]{@link module:Collections.groupBy}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with a `key` to group the value under.\r\n * Invoked with (value, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. Result is an `Object` whoses\r\n * properties are arrays of values which returned the corresponding key.\r\n */\r\nvar groupBySeries = doLimit(groupByLimit, 1);\r\n\r\n/**\r\n * Logs the result of an `async` function to the `console`. Only works in\r\n * Node.js or in browsers that support `console.log` and `console.error` (such\r\n * as FF and Chrome). If multiple arguments are returned from the async\r\n * function, `console.log` is called on each argument in order.\r\n *\r\n * @name log\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} function - The function you want to eventually apply\r\n * all arguments to.\r\n * @param {...*} arguments... - Any number of arguments to apply to the function.\r\n * @example\r\n *\r\n * // in a module\r\n * var hello = function(name, callback) {\r\n *     setTimeout(function() {\r\n *         callback(null, 'hello ' + name);\r\n *     }, 1000);\r\n * };\r\n *\r\n * // in the node repl\r\n * node> async.log(hello, 'world');\r\n * 'hello world'\r\n */\r\nvar log = consoleFunc('log');\r\n\r\n/**\r\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name mapValuesLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.mapValues]{@link module:Collections.mapValues}\r\n * @category Collection\r\n * @param {Object} obj - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n * in `coll`.\r\n * The iteratee should complete with the transformed value as its result.\r\n * Invoked with (value, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. `result` is a new object consisting\r\n * of each key from `obj`, with each transformed value on the right-hand side.\r\n * Invoked with (err, result).\r\n */\r\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\r\n    callback = once(callback || noop);\r\n    var newObj = {};\r\n    var _iteratee = wrapAsync(iteratee);\r\n    eachOfLimit(obj, limit, function(val, key, next) {\r\n        _iteratee(val, key, function (err, result) {\r\n            if (err) return next(err);\r\n            newObj[key] = result;\r\n            next();\r\n        });\r\n    }, function (err) {\r\n        callback(err, newObj);\r\n    });\r\n}\r\n\r\n/**\r\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\r\n *\r\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\r\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\r\n * callback for when it has finished processing. Each of these callbacks takes\r\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\r\n * passes an error to its callback, the main `callback` (for the `mapValues`\r\n * function) is immediately called with the error.\r\n *\r\n * Note, the order of the keys in the result is not guaranteed.  The keys will\r\n * be roughly in the order they complete, (but this is very engine-specific)\r\n *\r\n * @name mapValues\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Object} obj - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n * in `coll`.\r\n * The iteratee should complete with the transformed value as its result.\r\n * Invoked with (value, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. `result` is a new object consisting\r\n * of each key from `obj`, with each transformed value on the right-hand side.\r\n * Invoked with (err, result).\r\n * @example\r\n *\r\n * async.mapValues({\r\n *     f1: 'file1',\r\n *     f2: 'file2',\r\n *     f3: 'file3'\r\n * }, function (file, key, callback) {\r\n *   fs.stat(file, callback);\r\n * }, function(err, result) {\r\n *     // result is now a map of stats for each file, e.g.\r\n *     // {\r\n *     //     f1: [stats for file1],\r\n *     //     f2: [stats for file2],\r\n *     //     f3: [stats for file3]\r\n *     // }\r\n * });\r\n */\r\n\r\nvar mapValues = doLimit(mapValuesLimit, Infinity);\r\n\r\n/**\r\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\r\n *\r\n * @name mapValuesSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.mapValues]{@link module:Collections.mapValues}\r\n * @category Collection\r\n * @param {Object} obj - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\r\n * in `coll`.\r\n * The iteratee should complete with the transformed value as its result.\r\n * Invoked with (value, key, callback).\r\n * @param {Function} [callback] - A callback which is called when all `iteratee`\r\n * functions have finished, or an error occurs. `result` is a new object consisting\r\n * of each key from `obj`, with each transformed value on the right-hand side.\r\n * Invoked with (err, result).\r\n */\r\nvar mapValuesSeries = doLimit(mapValuesLimit, 1);\r\n\r\nfunction has(obj, key) {\r\n    return key in obj;\r\n}\r\n\r\n/**\r\n * Caches the results of an async function. When creating a hash to store\r\n * function results against, the callback is omitted from the hash and an\r\n * optional hash function can be used.\r\n *\r\n * If no hash function is specified, the first argument is used as a hash key,\r\n * which may work reasonably if it is a string or a data type that converts to a\r\n * distinct string. Note that objects and arrays will not behave reasonably.\r\n * Neither will cases where the other arguments are significant. In such cases,\r\n * specify your own hash function.\r\n *\r\n * The cache of results is exposed as the `memo` property of the function\r\n * returned by `memoize`.\r\n *\r\n * @name memoize\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\r\n * @param {Function} hasher - An optional function for generating a custom hash\r\n * for storing results. It has all the arguments applied to it apart from the\r\n * callback, and must be synchronous.\r\n * @returns {AsyncFunction} a memoized version of `fn`\r\n * @example\r\n *\r\n * var slow_fn = function(name, callback) {\r\n *     // do something\r\n *     callback(null, result);\r\n * };\r\n * var fn = async.memoize(slow_fn);\r\n *\r\n * // fn can now be used as if it were slow_fn\r\n * fn('some name', function() {\r\n *     // callback\r\n * });\r\n */\r\nfunction memoize(fn, hasher) {\r\n    var memo = Object.create(null);\r\n    var queues = Object.create(null);\r\n    hasher = hasher || identity;\r\n    var _fn = wrapAsync(fn);\r\n    var memoized = initialParams(function memoized(args, callback) {\r\n        var key = hasher.apply(null, args);\r\n        if (has(memo, key)) {\r\n            setImmediate$1(function() {\r\n                callback.apply(null, memo[key]);\r\n            });\r\n        } else if (has(queues, key)) {\r\n            queues[key].push(callback);\r\n        } else {\r\n            queues[key] = [callback];\r\n            _fn.apply(null, args.concat(function(/*args*/) {\r\n                var args = slice(arguments);\r\n                memo[key] = args;\r\n                var q = queues[key];\r\n                delete queues[key];\r\n                for (var i = 0, l = q.length; i < l; i++) {\r\n                    q[i].apply(null, args);\r\n                }\r\n            }));\r\n        }\r\n    });\r\n    memoized.memo = memo;\r\n    memoized.unmemoized = fn;\r\n    return memoized;\r\n}\r\n\r\n/**\r\n * Calls `callback` on a later loop around the event loop. In Node.js this just\r\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\r\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\r\n * priority events may precede the execution of `callback`.\r\n *\r\n * This is used internally for browser-compatibility purposes.\r\n *\r\n * @name nextTick\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\r\n * @category Util\r\n * @param {Function} callback - The function to call on a later loop around\r\n * the event loop. Invoked with (args...).\r\n * @param {...*} args... - any number of additional arguments to pass to the\r\n * callback on the next tick.\r\n * @example\r\n *\r\n * var call_order = [];\r\n * async.nextTick(function() {\r\n *     call_order.push('two');\r\n *     // call_order now equals ['one','two']\r\n * });\r\n * call_order.push('one');\r\n *\r\n * async.setImmediate(function (a, b, c) {\r\n *     // a, b, and c equal 1, 2, and 3\r\n * }, 1, 2, 3);\r\n */\r\nvar _defer$1;\r\n\r\nif (hasNextTick) {\r\n    _defer$1 = process.nextTick;\r\n} else if (hasSetImmediate) {\r\n    _defer$1 = setImmediate;\r\n} else {\r\n    _defer$1 = fallback;\r\n}\r\n\r\nvar nextTick = wrap(_defer$1);\r\n\r\nfunction _parallel(eachfn, tasks, callback) {\r\n    callback = callback || noop;\r\n    var results = isArrayLike(tasks) ? [] : {};\r\n\r\n    eachfn(tasks, function (task, key, callback) {\r\n        wrapAsync(task)(function (err, result) {\r\n            if (arguments.length > 2) {\r\n                result = slice(arguments, 1);\r\n            }\r\n            results[key] = result;\r\n            callback(err);\r\n        });\r\n    }, function (err) {\r\n        callback(err, results);\r\n    });\r\n}\r\n\r\n/**\r\n * Run the `tasks` collection of functions in parallel, without waiting until\r\n * the previous function has completed. If any of the functions pass an error to\r\n * its callback, the main `callback` is immediately called with the value of the\r\n * error. Once the `tasks` have completed, the results are passed to the final\r\n * `callback` as an array.\r\n *\r\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\r\n * parallel execution of code.  If your tasks do not use any timers or perform\r\n * any I/O, they will actually be executed in series.  Any synchronous setup\r\n * sections for each task will happen one after the other.  JavaScript remains\r\n * single-threaded.\r\n *\r\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\r\n * execution of other tasks when a task fails.\r\n *\r\n * It is also possible to use an object instead of an array. Each property will\r\n * be run as a function and the results will be passed to the final `callback`\r\n * as an object instead of an array. This can be a more readable way of handling\r\n * results from {@link async.parallel}.\r\n *\r\n * @name parallel\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} tasks - A collection of\r\n * [async functions]{@link AsyncFunction} to run.\r\n * Each async function can complete with any number of optional `result` values.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed successfully. This function gets a results array\r\n * (or object) containing all the result arguments passed to the task callbacks.\r\n * Invoked with (err, results).\r\n *\r\n * @example\r\n * async.parallel([\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'one');\r\n *         }, 200);\r\n *     },\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'two');\r\n *         }, 100);\r\n *     }\r\n * ],\r\n * // optional callback\r\n * function(err, results) {\r\n *     // the results array will equal ['one','two'] even though\r\n *     // the second function had a shorter timeout.\r\n * });\r\n *\r\n * // an example using an object instead of an array\r\n * async.parallel({\r\n *     one: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 1);\r\n *         }, 200);\r\n *     },\r\n *     two: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 2);\r\n *         }, 100);\r\n *     }\r\n * }, function(err, results) {\r\n *     // results is now equals to: {one: 1, two: 2}\r\n * });\r\n */\r\nfunction parallelLimit(tasks, callback) {\r\n    _parallel(eachOf, tasks, callback);\r\n}\r\n\r\n/**\r\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name parallelLimit\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.parallel]{@link module:ControlFlow.parallel}\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} tasks - A collection of\r\n * [async functions]{@link AsyncFunction} to run.\r\n * Each async function can complete with any number of optional `result` values.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed successfully. This function gets a results array\r\n * (or object) containing all the result arguments passed to the task callbacks.\r\n * Invoked with (err, results).\r\n */\r\nfunction parallelLimit$1(tasks, limit, callback) {\r\n    _parallel(_eachOfLimit(limit), tasks, callback);\r\n}\r\n\r\n/**\r\n * A queue of tasks for the worker function to complete.\r\n * @typedef {Object} QueueObject\r\n * @memberOf module:ControlFlow\r\n * @property {Function} length - a function returning the number of items\r\n * waiting to be processed. Invoke with `queue.length()`.\r\n * @property {boolean} started - a boolean indicating whether or not any\r\n * items have been pushed and processed by the queue.\r\n * @property {Function} running - a function returning the number of items\r\n * currently being processed. Invoke with `queue.running()`.\r\n * @property {Function} workersList - a function returning the array of items\r\n * currently being processed. Invoke with `queue.workersList()`.\r\n * @property {Function} idle - a function returning false if there are items\r\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\r\n * @property {number} concurrency - an integer for determining how many `worker`\r\n * functions should be run in parallel. This property can be changed after a\r\n * `queue` is created to alter the concurrency on-the-fly.\r\n * @property {Function} push - add a new task to the `queue`. Calls `callback`\r\n * once the `worker` has finished processing the task. Instead of a single task,\r\n * a `tasks` array can be submitted. The respective callback is used for every\r\n * task in the list. Invoke with `queue.push(task, [callback])`,\r\n * @property {Function} unshift - add a new task to the front of the `queue`.\r\n * Invoke with `queue.unshift(task, [callback])`.\r\n * @property {Function} remove - remove items from the queue that match a test\r\n * function.  The test function will be passed an object with a `data` property,\r\n * and a `priority` property, if this is a\r\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\r\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\r\n * `function ({data, priority}) {}` and returns a Boolean.\r\n * @property {Function} saturated - a callback that is called when the number of\r\n * running workers hits the `concurrency` limit, and further tasks will be\r\n * queued.\r\n * @property {Function} unsaturated - a callback that is called when the number\r\n * of running workers is less than the `concurrency` & `buffer` limits, and\r\n * further tasks will not be queued.\r\n * @property {number} buffer - A minimum threshold buffer in order to say that\r\n * the `queue` is `unsaturated`.\r\n * @property {Function} empty - a callback that is called when the last item\r\n * from the `queue` is given to a `worker`.\r\n * @property {Function} drain - a callback that is called when the last item\r\n * from the `queue` has returned from the `worker`.\r\n * @property {Function} error - a callback that is called when a task errors.\r\n * Has the signature `function(error, task)`.\r\n * @property {boolean} paused - a boolean for determining whether the queue is\r\n * in a paused state.\r\n * @property {Function} pause - a function that pauses the processing of tasks\r\n * until `resume()` is called. Invoke with `queue.pause()`.\r\n * @property {Function} resume - a function that resumes the processing of\r\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\r\n * @property {Function} kill - a function that removes the `drain` callback and\r\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\r\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\r\n */\r\n\r\n/**\r\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\r\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\r\n * `worker`s are in progress, the task is queued until one becomes available.\r\n * Once a `worker` completes a `task`, that `task`'s callback is called.\r\n *\r\n * @name queue\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {AsyncFunction} worker - An async function for processing a queued task.\r\n * If you want to handle errors from an individual task, pass a callback to\r\n * `q.push()`. Invoked with (task, callback).\r\n * @param {number} [concurrency=1] - An `integer` for determining how many\r\n * `worker` functions should be run in parallel.  If omitted, the concurrency\r\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\r\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can\r\n * attached as certain properties to listen for specific events during the\r\n * lifecycle of the queue.\r\n * @example\r\n *\r\n * // create a queue object with concurrency 2\r\n * var q = async.queue(function(task, callback) {\r\n *     console.log('hello ' + task.name);\r\n *     callback();\r\n * }, 2);\r\n *\r\n * // assign a callback\r\n * q.drain = function() {\r\n *     console.log('all items have been processed');\r\n * };\r\n *\r\n * // add some items to the queue\r\n * q.push({name: 'foo'}, function(err) {\r\n *     console.log('finished processing foo');\r\n * });\r\n * q.push({name: 'bar'}, function (err) {\r\n *     console.log('finished processing bar');\r\n * });\r\n *\r\n * // add some items to the queue (batch-wise)\r\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\r\n *     console.log('finished processing item');\r\n * });\r\n *\r\n * // add some items to the front of the queue\r\n * q.unshift({name: 'bar'}, function (err) {\r\n *     console.log('finished processing bar');\r\n * });\r\n */\r\nvar queue$1 = function (worker, concurrency) {\r\n    var _worker = wrapAsync(worker);\r\n    return queue(function (items, cb) {\r\n        _worker(items[0], cb);\r\n    }, concurrency, 1);\r\n};\r\n\r\n/**\r\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\r\n * completed in ascending priority order.\r\n *\r\n * @name priorityQueue\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.queue]{@link module:ControlFlow.queue}\r\n * @category Control Flow\r\n * @param {AsyncFunction} worker - An async function for processing a queued task.\r\n * If you want to handle errors from an individual task, pass a callback to\r\n * `q.push()`.\r\n * Invoked with (task, callback).\r\n * @param {number} concurrency - An `integer` for determining how many `worker`\r\n * functions should be run in parallel.  If omitted, the concurrency defaults to\r\n * `1`.  If the concurrency is `0`, an error is thrown.\r\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\r\n * differences between `queue` and `priorityQueue` objects:\r\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\r\n *   array of `tasks` is given, all tasks will be assigned the same priority.\r\n * * The `unshift` method was removed.\r\n */\r\nvar priorityQueue = function(worker, concurrency) {\r\n    // Start with a normal queue\r\n    var q = queue$1(worker, concurrency);\r\n\r\n    // Override push to accept second parameter representing priority\r\n    q.push = function(data, priority, callback) {\r\n        if (callback == null) callback = noop;\r\n        if (typeof callback !== 'function') {\r\n            throw new Error('task callback must be a function');\r\n        }\r\n        q.started = true;\r\n        if (!isArray(data)) {\r\n            data = [data];\r\n        }\r\n        if (data.length === 0) {\r\n            // call drain immediately if there are no tasks\r\n            return setImmediate$1(function() {\r\n                q.drain();\r\n            });\r\n        }\r\n\r\n        priority = priority || 0;\r\n        var nextNode = q._tasks.head;\r\n        while (nextNode && priority >= nextNode.priority) {\r\n            nextNode = nextNode.next;\r\n        }\r\n\r\n        for (var i = 0, l = data.length; i < l; i++) {\r\n            var item = {\r\n                data: data[i],\r\n                priority: priority,\r\n                callback: callback\r\n            };\r\n\r\n            if (nextNode) {\r\n                q._tasks.insertBefore(nextNode, item);\r\n            } else {\r\n                q._tasks.push(item);\r\n            }\r\n        }\r\n        setImmediate$1(q.process);\r\n    };\r\n\r\n    // Remove unshift function\r\n    delete q.unshift;\r\n\r\n    return q;\r\n};\r\n\r\n/**\r\n * Runs the `tasks` array of functions in parallel, without waiting until the\r\n * previous function has completed. Once any of the `tasks` complete or pass an\r\n * error to its callback, the main `callback` is immediately called. It's\r\n * equivalent to `Promise.race()`.\r\n *\r\n * @name race\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\r\n * to run. Each function can complete with an optional `result` value.\r\n * @param {Function} callback - A callback to run once any of the functions have\r\n * completed. This function gets an error or result from the first function that\r\n * completed. Invoked with (err, result).\r\n * @returns undefined\r\n * @example\r\n *\r\n * async.race([\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'one');\r\n *         }, 200);\r\n *     },\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'two');\r\n *         }, 100);\r\n *     }\r\n * ],\r\n * // main callback\r\n * function(err, result) {\r\n *     // the result will be equal to 'two' as it finishes earlier\r\n * });\r\n */\r\nfunction race(tasks, callback) {\r\n    callback = once(callback || noop);\r\n    if (!isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\r\n    if (!tasks.length) return callback();\r\n    for (var i = 0, l = tasks.length; i < l; i++) {\r\n        wrapAsync(tasks[i])(callback);\r\n    }\r\n}\r\n\r\n/**\r\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\r\n *\r\n * @name reduceRight\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.reduce]{@link module:Collections.reduce}\r\n * @alias foldr\r\n * @category Collection\r\n * @param {Array} array - A collection to iterate over.\r\n * @param {*} memo - The initial state of the reduction.\r\n * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n * array to produce the next step in the reduction.\r\n * The `iteratee` should complete with the next state of the reduction.\r\n * If the iteratee complete with an error, the reduction is stopped and the\r\n * main `callback` is immediately called with the error.\r\n * Invoked with (memo, item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\r\n * (err, result).\r\n */\r\nfunction reduceRight (array, memo, iteratee, callback) {\r\n    var reversed = slice(array).reverse();\r\n    reduce(reversed, memo, iteratee, callback);\r\n}\r\n\r\n/**\r\n * Wraps the async function in another function that always completes with a\r\n * result object, even when it errors.\r\n *\r\n * The result object has either the property `error` or `value`.\r\n *\r\n * @name reflect\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} fn - The async function you want to wrap\r\n * @returns {Function} - A function that always passes null to it's callback as\r\n * the error. The second argument to the callback will be an `object` with\r\n * either an `error` or a `value` property.\r\n * @example\r\n *\r\n * async.parallel([\r\n *     async.reflect(function(callback) {\r\n *         // do some stuff ...\r\n *         callback(null, 'one');\r\n *     }),\r\n *     async.reflect(function(callback) {\r\n *         // do some more stuff but error ...\r\n *         callback('bad stuff happened');\r\n *     }),\r\n *     async.reflect(function(callback) {\r\n *         // do some more stuff ...\r\n *         callback(null, 'two');\r\n *     })\r\n * ],\r\n * // optional callback\r\n * function(err, results) {\r\n *     // values\r\n *     // results[0].value = 'one'\r\n *     // results[1].error = 'bad stuff happened'\r\n *     // results[2].value = 'two'\r\n * });\r\n */\r\nfunction reflect(fn) {\r\n    var _fn = wrapAsync(fn);\r\n    return initialParams(function reflectOn(args, reflectCallback) {\r\n        args.push(function callback(error, cbArg) {\r\n            if (error) {\r\n                reflectCallback(null, { error: error });\r\n            } else {\r\n                var value;\r\n                if (arguments.length <= 2) {\r\n                    value = cbArg;\r\n                } else {\r\n                    value = slice(arguments, 1);\r\n                }\r\n                reflectCallback(null, { value: value });\r\n            }\r\n        });\r\n\r\n        return _fn.apply(this, args);\r\n    });\r\n}\r\n\r\n/**\r\n * A helper function that wraps an array or an object of functions with `reflect`.\r\n *\r\n * @name reflectAll\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @see [async.reflect]{@link module:Utils.reflect}\r\n * @category Util\r\n * @param {Array|Object|Iterable} tasks - The collection of\r\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\r\n * @returns {Array} Returns an array of async functions, each wrapped in\r\n * `async.reflect`\r\n * @example\r\n *\r\n * let tasks = [\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'one');\r\n *         }, 200);\r\n *     },\r\n *     function(callback) {\r\n *         // do some more stuff but error ...\r\n *         callback(new Error('bad stuff happened'));\r\n *     },\r\n *     function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'two');\r\n *         }, 100);\r\n *     }\r\n * ];\r\n *\r\n * async.parallel(async.reflectAll(tasks),\r\n * // optional callback\r\n * function(err, results) {\r\n *     // values\r\n *     // results[0].value = 'one'\r\n *     // results[1].error = Error('bad stuff happened')\r\n *     // results[2].value = 'two'\r\n * });\r\n *\r\n * // an example using an object instead of an array\r\n * let tasks = {\r\n *     one: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'one');\r\n *         }, 200);\r\n *     },\r\n *     two: function(callback) {\r\n *         callback('two');\r\n *     },\r\n *     three: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 'three');\r\n *         }, 100);\r\n *     }\r\n * };\r\n *\r\n * async.parallel(async.reflectAll(tasks),\r\n * // optional callback\r\n * function(err, results) {\r\n *     // values\r\n *     // results.one.value = 'one'\r\n *     // results.two.error = 'two'\r\n *     // results.three.value = 'three'\r\n * });\r\n */\r\nfunction reflectAll(tasks) {\r\n    var results;\r\n    if (isArray(tasks)) {\r\n        results = arrayMap(tasks, reflect);\r\n    } else {\r\n        results = {};\r\n        baseForOwn(tasks, function(task, key) {\r\n            results[key] = reflect.call(this, task);\r\n        });\r\n    }\r\n    return results;\r\n}\r\n\r\nfunction reject$1(eachfn, arr, iteratee, callback) {\r\n    _filter(eachfn, arr, function(value, cb) {\r\n        iteratee(value, function(err, v) {\r\n            cb(err, !v);\r\n        });\r\n    }, callback);\r\n}\r\n\r\n/**\r\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\r\n *\r\n * @name reject\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.filter]{@link module:Collections.filter}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {Function} iteratee - An async truth test to apply to each item in\r\n * `coll`.\r\n * The should complete with a boolean value as its `result`.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results).\r\n * @example\r\n *\r\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\r\n *     fs.access(filePath, function(err) {\r\n *         callback(null, !err)\r\n *     });\r\n * }, function(err, results) {\r\n *     // results now equals an array of missing files\r\n *     createFiles(results);\r\n * });\r\n */\r\nvar reject = doParallel(reject$1);\r\n\r\n/**\r\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name rejectLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.reject]{@link module:Collections.reject}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {Function} iteratee - An async truth test to apply to each item in\r\n * `coll`.\r\n * The should complete with a boolean value as its `result`.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results).\r\n */\r\nvar rejectLimit = doParallelLimit(reject$1);\r\n\r\n/**\r\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\r\n *\r\n * @name rejectSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.reject]{@link module:Collections.reject}\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {Function} iteratee - An async truth test to apply to each item in\r\n * `coll`.\r\n * The should complete with a boolean value as its `result`.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Invoked with (err, results).\r\n */\r\nvar rejectSeries = doLimit(rejectLimit, 1);\r\n\r\n/**\r\n * Creates a function that returns `value`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 2.4.0\r\n * @category Util\r\n * @param {*} value The value to return from the new function.\r\n * @returns {Function} Returns the new constant function.\r\n * @example\r\n *\r\n * var objects = _.times(2, _.constant({ 'a': 1 }));\r\n *\r\n * console.log(objects);\r\n * // => [{ 'a': 1 }, { 'a': 1 }]\r\n *\r\n * console.log(objects[0] === objects[1]);\r\n * // => true\r\n */\r\nfunction constant$1(value) {\r\n  return function() {\r\n    return value;\r\n  };\r\n}\r\n\r\n/**\r\n * Attempts to get a successful response from `task` no more than `times` times\r\n * before returning an error. If the task is successful, the `callback` will be\r\n * passed the result of the successful task. If all attempts fail, the callback\r\n * will be passed the error and result (if any) of the final attempt.\r\n *\r\n * @name retry\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @see [async.retryable]{@link module:ControlFlow.retryable}\r\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\r\n * object with `times` and `interval` or a number.\r\n * * `times` - The number of attempts to make before giving up.  The default\r\n *   is `5`.\r\n * * `interval` - The time to wait between retries, in milliseconds.  The\r\n *   default is `0`. The interval may also be specified as a function of the\r\n *   retry count (see example).\r\n * * `errorFilter` - An optional synchronous function that is invoked on\r\n *   erroneous result. If it returns `true` the retry attempts will continue;\r\n *   if the function returns `false` the retry flow is aborted with the current\r\n *   attempt's error and result being returned to the final callback.\r\n *   Invoked with (err).\r\n * * If `opts` is a number, the number specifies the number of times to retry,\r\n *   with the default interval of `0`.\r\n * @param {AsyncFunction} task - An async function to retry.\r\n * Invoked with (callback).\r\n * @param {Function} [callback] - An optional callback which is called when the\r\n * task has succeeded, or after the final failed attempt. It receives the `err`\r\n * and `result` arguments of the last attempt at completing the `task`. Invoked\r\n * with (err, results).\r\n *\r\n * @example\r\n *\r\n * // The `retry` function can be used as a stand-alone control flow by passing\r\n * // a callback, as shown below:\r\n *\r\n * // try calling apiMethod 3 times\r\n * async.retry(3, apiMethod, function(err, result) {\r\n *     // do something with the result\r\n * });\r\n *\r\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\r\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\r\n *     // do something with the result\r\n * });\r\n *\r\n * // try calling apiMethod 10 times with exponential backoff\r\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\r\n * async.retry({\r\n *   times: 10,\r\n *   interval: function(retryCount) {\r\n *     return 50 * Math.pow(2, retryCount);\r\n *   }\r\n * }, apiMethod, function(err, result) {\r\n *     // do something with the result\r\n * });\r\n *\r\n * // try calling apiMethod the default 5 times no delay between each retry\r\n * async.retry(apiMethod, function(err, result) {\r\n *     // do something with the result\r\n * });\r\n *\r\n * // try calling apiMethod only when error condition satisfies, all other\r\n * // errors will abort the retry control flow and return to final callback\r\n * async.retry({\r\n *   errorFilter: function(err) {\r\n *     return err.message === 'Temporary error'; // only retry on a specific error\r\n *   }\r\n * }, apiMethod, function(err, result) {\r\n *     // do something with the result\r\n * });\r\n *\r\n * // to retry individual methods that are not as reliable within other\r\n * // control flow functions, use the `retryable` wrapper:\r\n * async.auto({\r\n *     users: api.getUsers.bind(api),\r\n *     payments: async.retryable(3, api.getPayments.bind(api))\r\n * }, function(err, results) {\r\n *     // do something with the results\r\n * });\r\n *\r\n */\r\nfunction retry(opts, task, callback) {\r\n    var DEFAULT_TIMES = 5;\r\n    var DEFAULT_INTERVAL = 0;\r\n\r\n    var options = {\r\n        times: DEFAULT_TIMES,\r\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\r\n    };\r\n\r\n    function parseTimes(acc, t) {\r\n        if (typeof t === 'object') {\r\n            acc.times = +t.times || DEFAULT_TIMES;\r\n\r\n            acc.intervalFunc = typeof t.interval === 'function' ?\r\n                t.interval :\r\n                constant$1(+t.interval || DEFAULT_INTERVAL);\r\n\r\n            acc.errorFilter = t.errorFilter;\r\n        } else if (typeof t === 'number' || typeof t === 'string') {\r\n            acc.times = +t || DEFAULT_TIMES;\r\n        } else {\r\n            throw new Error(\"Invalid arguments for async.retry\");\r\n        }\r\n    }\r\n\r\n    if (arguments.length < 3 && typeof opts === 'function') {\r\n        callback = task || noop;\r\n        task = opts;\r\n    } else {\r\n        parseTimes(options, opts);\r\n        callback = callback || noop;\r\n    }\r\n\r\n    if (typeof task !== 'function') {\r\n        throw new Error(\"Invalid arguments for async.retry\");\r\n    }\r\n\r\n    var _task = wrapAsync(task);\r\n\r\n    var attempt = 1;\r\n    function retryAttempt() {\r\n        _task(function(err) {\r\n            if (err && attempt++ < options.times &&\r\n                (typeof options.errorFilter != 'function' ||\r\n                    options.errorFilter(err))) {\r\n                setTimeout(retryAttempt, options.intervalFunc(attempt));\r\n            } else {\r\n                callback.apply(null, arguments);\r\n            }\r\n        });\r\n    }\r\n\r\n    retryAttempt();\r\n}\r\n\r\n/**\r\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\r\n * wraps a task and makes it retryable, rather than immediately calling it\r\n * with retries.\r\n *\r\n * @name retryable\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.retry]{@link module:ControlFlow.retry}\r\n * @category Control Flow\r\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\r\n * options, exactly the same as from `retry`\r\n * @param {AsyncFunction} task - the asynchronous function to wrap.\r\n * This function will be passed any arguments passed to the returned wrapper.\r\n * Invoked with (...args, callback).\r\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\r\n * retry on an error, based on the parameters specified in `opts`.\r\n * This function will accept the same parameters as `task`.\r\n * @example\r\n *\r\n * async.auto({\r\n *     dep1: async.retryable(3, getFromFlakyService),\r\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\r\n *         maybeProcessData(results.dep1, cb);\r\n *     })]\r\n * }, callback);\r\n */\r\nvar retryable = function (opts, task) {\r\n    if (!task) {\r\n        task = opts;\r\n        opts = null;\r\n    }\r\n    var _task = wrapAsync(task);\r\n    return initialParams(function (args, callback) {\r\n        function taskFn(cb) {\r\n            _task.apply(null, args.concat(cb));\r\n        }\r\n\r\n        if (opts) retry(opts, taskFn, callback);\r\n        else retry(taskFn, callback);\r\n\r\n    });\r\n};\r\n\r\n/**\r\n * Run the functions in the `tasks` collection in series, each one running once\r\n * the previous function has completed. If any functions in the series pass an\r\n * error to its callback, no more functions are run, and `callback` is\r\n * immediately called with the value of the error. Otherwise, `callback`\r\n * receives an array of results when `tasks` have completed.\r\n *\r\n * It is also possible to use an object instead of an array. Each property will\r\n * be run as a function, and the results will be passed to the final `callback`\r\n * as an object instead of an array. This can be a more readable way of handling\r\n *  results from {@link async.series}.\r\n *\r\n * **Note** that while many implementations preserve the order of object\r\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\r\n * explicitly states that\r\n *\r\n * > The mechanics and order of enumerating the properties is not specified.\r\n *\r\n * So if you rely on the order in which your series of functions are executed,\r\n * and want this to work on all platforms, consider using an array.\r\n *\r\n * @name series\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} tasks - A collection containing\r\n * [async functions]{@link AsyncFunction} to run in series.\r\n * Each function can complete with any number of optional `result` values.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed. This function gets a results array (or object)\r\n * containing all the result arguments passed to the `task` callbacks. Invoked\r\n * with (err, result).\r\n * @example\r\n * async.series([\r\n *     function(callback) {\r\n *         // do some stuff ...\r\n *         callback(null, 'one');\r\n *     },\r\n *     function(callback) {\r\n *         // do some more stuff ...\r\n *         callback(null, 'two');\r\n *     }\r\n * ],\r\n * // optional callback\r\n * function(err, results) {\r\n *     // results is now equal to ['one', 'two']\r\n * });\r\n *\r\n * async.series({\r\n *     one: function(callback) {\r\n *         setTimeout(function() {\r\n *             callback(null, 1);\r\n *         }, 200);\r\n *     },\r\n *     two: function(callback){\r\n *         setTimeout(function() {\r\n *             callback(null, 2);\r\n *         }, 100);\r\n *     }\r\n * }, function(err, results) {\r\n *     // results is now equal to: {one: 1, two: 2}\r\n * });\r\n */\r\nfunction series(tasks, callback) {\r\n    _parallel(eachOfSeries, tasks, callback);\r\n}\r\n\r\n/**\r\n * Returns `true` if at least one element in the `coll` satisfies an async test.\r\n * If any iteratee call returns `true`, the main `callback` is immediately\r\n * called.\r\n *\r\n * @name some\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @alias any\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collections in parallel.\r\n * The iteratee should complete with a boolean `result` value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the iteratee functions have finished.\r\n * Result will be either `true` or `false` depending on the values of the async\r\n * tests. Invoked with (err, result).\r\n * @example\r\n *\r\n * async.some(['file1','file2','file3'], function(filePath, callback) {\r\n *     fs.access(filePath, function(err) {\r\n *         callback(null, !err)\r\n *     });\r\n * }, function(err, result) {\r\n *     // if result is true then at least one of the files exists\r\n * });\r\n */\r\nvar some = doParallel(_createTester(Boolean, identity));\r\n\r\n/**\r\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\r\n *\r\n * @name someLimit\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.some]{@link module:Collections.some}\r\n * @alias anyLimit\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collections in parallel.\r\n * The iteratee should complete with a boolean `result` value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the iteratee functions have finished.\r\n * Result will be either `true` or `false` depending on the values of the async\r\n * tests. Invoked with (err, result).\r\n */\r\nvar someLimit = doParallelLimit(_createTester(Boolean, identity));\r\n\r\n/**\r\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\r\n *\r\n * @name someSeries\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @see [async.some]{@link module:Collections.some}\r\n * @alias anySeries\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\r\n * in the collections in series.\r\n * The iteratee should complete with a boolean `result` value.\r\n * Invoked with (item, callback).\r\n * @param {Function} [callback] - A callback which is called as soon as any\r\n * iteratee returns `true`, or after all the iteratee functions have finished.\r\n * Result will be either `true` or `false` depending on the values of the async\r\n * tests. Invoked with (err, result).\r\n */\r\nvar someSeries = doLimit(someLimit, 1);\r\n\r\n/**\r\n * Sorts a list by the results of running each `coll` value through an async\r\n * `iteratee`.\r\n *\r\n * @name sortBy\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\r\n * `coll`.\r\n * The iteratee should complete with a value to use as the sort criteria as\r\n * its `result`.\r\n * Invoked with (item, callback).\r\n * @param {Function} callback - A callback which is called after all the\r\n * `iteratee` functions have finished, or an error occurs. Results is the items\r\n * from the original `coll` sorted by the values returned by the `iteratee`\r\n * calls. Invoked with (err, results).\r\n * @example\r\n *\r\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\r\n *     fs.stat(file, function(err, stats) {\r\n *         callback(err, stats.mtime);\r\n *     });\r\n * }, function(err, results) {\r\n *     // results is now the original array of files sorted by\r\n *     // modified date\r\n * });\r\n *\r\n * // By modifying the callback parameter the\r\n * // sorting order can be influenced:\r\n *\r\n * // ascending order\r\n * async.sortBy([1,9,3,5], function(x, callback) {\r\n *     callback(null, x);\r\n * }, function(err,result) {\r\n *     // result callback\r\n * });\r\n *\r\n * // descending order\r\n * async.sortBy([1,9,3,5], function(x, callback) {\r\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\r\n * }, function(err,result) {\r\n *     // result callback\r\n * });\r\n */\r\nfunction sortBy (coll, iteratee, callback) {\r\n    var _iteratee = wrapAsync(iteratee);\r\n    map(coll, function (x, callback) {\r\n        _iteratee(x, function (err, criteria) {\r\n            if (err) return callback(err);\r\n            callback(null, {value: x, criteria: criteria});\r\n        });\r\n    }, function (err, results) {\r\n        if (err) return callback(err);\r\n        callback(null, arrayMap(results.sort(comparator), baseProperty('value')));\r\n    });\r\n\r\n    function comparator(left, right) {\r\n        var a = left.criteria, b = right.criteria;\r\n        return a < b ? -1 : a > b ? 1 : 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Sets a time limit on an asynchronous function. If the function does not call\r\n * its callback within the specified milliseconds, it will be called with a\r\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\r\n *\r\n * @name timeout\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @category Util\r\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\r\n * @param {number} milliseconds - The specified time limit.\r\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\r\n * to timeout Error for more information..\r\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\r\n * of the control flow functions.\r\n * Invoke this function with the same parameters as you would `asyncFunc`.\r\n * @example\r\n *\r\n * function myFunction(foo, callback) {\r\n *     doAsyncTask(foo, function(err, data) {\r\n *         // handle errors\r\n *         if (err) return callback(err);\r\n *\r\n *         // do some stuff ...\r\n *\r\n *         // return processed data\r\n *         return callback(null, data);\r\n *     });\r\n * }\r\n *\r\n * var wrapped = async.timeout(myFunction, 1000);\r\n *\r\n * // call `wrapped` as you would `myFunction`\r\n * wrapped({ bar: 'bar' }, function(err, data) {\r\n *     // if `myFunction` takes < 1000 ms to execute, `err`\r\n *     // and `data` will have their expected values\r\n *\r\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\r\n * });\r\n */\r\nfunction timeout(asyncFn, milliseconds, info) {\r\n    var fn = wrapAsync(asyncFn);\r\n\r\n    return initialParams(function (args, callback) {\r\n        var timedOut = false;\r\n        var timer;\r\n\r\n        function timeoutCallback() {\r\n            var name = asyncFn.name || 'anonymous';\r\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\r\n            error.code = 'ETIMEDOUT';\r\n            if (info) {\r\n                error.info = info;\r\n            }\r\n            timedOut = true;\r\n            callback(error);\r\n        }\r\n\r\n        args.push(function () {\r\n            if (!timedOut) {\r\n                callback.apply(null, arguments);\r\n                clearTimeout(timer);\r\n            }\r\n        });\r\n\r\n        // setup timer and call original function\r\n        timer = setTimeout(timeoutCallback, milliseconds);\r\n        fn.apply(null, args);\r\n    });\r\n}\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeCeil = Math.ceil;\r\nvar nativeMax = Math.max;\r\n\r\n/**\r\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\r\n * coerce arguments.\r\n *\r\n * @private\r\n * @param {number} start The start of the range.\r\n * @param {number} end The end of the range.\r\n * @param {number} step The value to increment or decrement by.\r\n * @param {boolean} [fromRight] Specify iterating from right to left.\r\n * @returns {Array} Returns the range of numbers.\r\n */\r\nfunction baseRange(start, end, step, fromRight) {\r\n  var index = -1,\r\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\r\n      result = Array(length);\r\n\r\n  while (length--) {\r\n    result[fromRight ? length : ++index] = start;\r\n    start += step;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\r\n * time.\r\n *\r\n * @name timesLimit\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.times]{@link module:ControlFlow.times}\r\n * @category Control Flow\r\n * @param {number} count - The number of times to run the function.\r\n * @param {number} limit - The maximum number of async operations at a time.\r\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n * Invoked with the iteration index and a callback: (n, next).\r\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\r\n */\r\nfunction timeLimit(count, limit, iteratee, callback) {\r\n    var _iteratee = wrapAsync(iteratee);\r\n    mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);\r\n}\r\n\r\n/**\r\n * Calls the `iteratee` function `n` times, and accumulates results in the same\r\n * manner you would use with [map]{@link module:Collections.map}.\r\n *\r\n * @name times\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.map]{@link module:Collections.map}\r\n * @category Control Flow\r\n * @param {number} n - The number of times to run the function.\r\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n * Invoked with the iteration index and a callback: (n, next).\r\n * @param {Function} callback - see {@link module:Collections.map}.\r\n * @example\r\n *\r\n * // Pretend this is some complicated async factory\r\n * var createUser = function(id, callback) {\r\n *     callback(null, {\r\n *         id: 'user' + id\r\n *     });\r\n * };\r\n *\r\n * // generate 5 users\r\n * async.times(5, function(n, next) {\r\n *     createUser(n, function(err, user) {\r\n *         next(err, user);\r\n *     });\r\n * }, function(err, users) {\r\n *     // we should now have 5 users\r\n * });\r\n */\r\nvar times = doLimit(timeLimit, Infinity);\r\n\r\n/**\r\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\r\n *\r\n * @name timesSeries\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.times]{@link module:ControlFlow.times}\r\n * @category Control Flow\r\n * @param {number} n - The number of times to run the function.\r\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\r\n * Invoked with the iteration index and a callback: (n, next).\r\n * @param {Function} callback - see {@link module:Collections.map}.\r\n */\r\nvar timesSeries = doLimit(timeLimit, 1);\r\n\r\n/**\r\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\r\n * element in series, each step potentially mutating an `accumulator` value.\r\n * The type of the accumulator defaults to the type of collection passed in.\r\n *\r\n * @name transform\r\n * @static\r\n * @memberOf module:Collections\r\n * @method\r\n * @category Collection\r\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\r\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\r\n * it will default to an empty Object or Array, depending on the type of `coll`\r\n * @param {AsyncFunction} iteratee - A function applied to each item in the\r\n * collection that potentially modifies the accumulator.\r\n * Invoked with (accumulator, item, key, callback).\r\n * @param {Function} [callback] - A callback which is called after all the\r\n * `iteratee` functions have finished. Result is the transformed accumulator.\r\n * Invoked with (err, result).\r\n * @example\r\n *\r\n * async.transform([1,2,3], function(acc, item, index, callback) {\r\n *     // pointless async:\r\n *     process.nextTick(function() {\r\n *         acc.push(item * 2)\r\n *         callback(null)\r\n *     });\r\n * }, function(err, result) {\r\n *     // result is now equal to [2, 4, 6]\r\n * });\r\n *\r\n * @example\r\n *\r\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\r\n *     setImmediate(function () {\r\n *         obj[key] = val * 2;\r\n *         callback();\r\n *     })\r\n * }, function (err, result) {\r\n *     // result is equal to {a: 2, b: 4, c: 6}\r\n * })\r\n */\r\nfunction transform (coll, accumulator, iteratee, callback) {\r\n    if (arguments.length <= 3) {\r\n        callback = iteratee;\r\n        iteratee = accumulator;\r\n        accumulator = isArray(coll) ? [] : {};\r\n    }\r\n    callback = once(callback || noop);\r\n    var _iteratee = wrapAsync(iteratee);\r\n\r\n    eachOf(coll, function(v, k, cb) {\r\n        _iteratee(accumulator, v, k, cb);\r\n    }, function(err) {\r\n        callback(err, accumulator);\r\n    });\r\n}\r\n\r\n/**\r\n * It runs each task in series but stops whenever any of the functions were\r\n * successful. If one of the tasks were successful, the `callback` will be\r\n * passed the result of the successful task. If all tasks fail, the callback\r\n * will be passed the error and result (if any) of the final attempt.\r\n *\r\n * @name tryEach\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array|Iterable|Object} tasks - A collection containing functions to\r\n * run, each function is passed a `callback(err, result)` it must call on\r\n * completion with an error `err` (which can be `null`) and an optional `result`\r\n * value.\r\n * @param {Function} [callback] - An optional callback which is called when one\r\n * of the tasks has succeeded, or all have failed. It receives the `err` and\r\n * `result` arguments of the last attempt at completing the `task`. Invoked with\r\n * (err, results).\r\n * @example\r\n * async.tryEach([\r\n *     function getDataFromFirstWebsite(callback) {\r\n *         // Try getting the data from the first website\r\n *         callback(err, data);\r\n *     },\r\n *     function getDataFromSecondWebsite(callback) {\r\n *         // First website failed,\r\n *         // Try getting the data from the backup website\r\n *         callback(err, data);\r\n *     }\r\n * ],\r\n * // optional callback\r\n * function(err, results) {\r\n *     Now do something with the data.\r\n * });\r\n *\r\n */\r\nfunction tryEach(tasks, callback) {\r\n    var error = null;\r\n    var result;\r\n    callback = callback || noop;\r\n    eachSeries(tasks, function(task, callback) {\r\n        wrapAsync(task)(function (err, res/*, ...args*/) {\r\n            if (arguments.length > 2) {\r\n                result = slice(arguments, 1);\r\n            } else {\r\n                result = res;\r\n            }\r\n            error = err;\r\n            callback(!err);\r\n        });\r\n    }, function () {\r\n        callback(error, result);\r\n    });\r\n}\r\n\r\n/**\r\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\r\n * unmemoized form. Handy for testing.\r\n *\r\n * @name unmemoize\r\n * @static\r\n * @memberOf module:Utils\r\n * @method\r\n * @see [async.memoize]{@link module:Utils.memoize}\r\n * @category Util\r\n * @param {AsyncFunction} fn - the memoized function\r\n * @returns {AsyncFunction} a function that calls the original unmemoized function\r\n */\r\nfunction unmemoize(fn) {\r\n    return function () {\r\n        return (fn.unmemoized || fn).apply(null, arguments);\r\n    };\r\n}\r\n\r\n/**\r\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\r\n * stopped, or an error occurs.\r\n *\r\n * @name whilst\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Function} test - synchronous truth test to perform before each\r\n * execution of `iteratee`. Invoked with ().\r\n * @param {AsyncFunction} iteratee - An async function which is called each time\r\n * `test` passes. Invoked with (callback).\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\r\n * will be passed an error and any arguments passed to the final `iteratee`'s\r\n * callback. Invoked with (err, [results]);\r\n * @returns undefined\r\n * @example\r\n *\r\n * var count = 0;\r\n * async.whilst(\r\n *     function() { return count < 5; },\r\n *     function(callback) {\r\n *         count++;\r\n *         setTimeout(function() {\r\n *             callback(null, count);\r\n *         }, 1000);\r\n *     },\r\n *     function (err, n) {\r\n *         // 5 seconds have passed, n = 5\r\n *     }\r\n * );\r\n */\r\nfunction whilst(test, iteratee, callback) {\r\n    callback = onlyOnce(callback || noop);\r\n    var _iteratee = wrapAsync(iteratee);\r\n    if (!test()) return callback(null);\r\n    var next = function(err/*, ...args*/) {\r\n        if (err) return callback(err);\r\n        if (test()) return _iteratee(next);\r\n        var args = slice(arguments, 1);\r\n        callback.apply(null, [null].concat(args));\r\n    };\r\n    _iteratee(next);\r\n}\r\n\r\n/**\r\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\r\n * stopped, or an error occurs. `callback` will be passed an error and any\r\n * arguments passed to the final `iteratee`'s callback.\r\n *\r\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\r\n *\r\n * @name until\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @see [async.whilst]{@link module:ControlFlow.whilst}\r\n * @category Control Flow\r\n * @param {Function} test - synchronous truth test to perform before each\r\n * execution of `iteratee`. Invoked with ().\r\n * @param {AsyncFunction} iteratee - An async function which is called each time\r\n * `test` fails. Invoked with (callback).\r\n * @param {Function} [callback] - A callback which is called after the test\r\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\r\n * will be passed an error and any arguments passed to the final `iteratee`'s\r\n * callback. Invoked with (err, [results]);\r\n */\r\nfunction until(test, iteratee, callback) {\r\n    whilst(function() {\r\n        return !test.apply(this, arguments);\r\n    }, iteratee, callback);\r\n}\r\n\r\n/**\r\n * Runs the `tasks` array of functions in series, each passing their results to\r\n * the next in the array. However, if any of the `tasks` pass an error to their\r\n * own callback, the next function is not executed, and the main `callback` is\r\n * immediately called with the error.\r\n *\r\n * @name waterfall\r\n * @static\r\n * @memberOf module:ControlFlow\r\n * @method\r\n * @category Control Flow\r\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\r\n * to run.\r\n * Each function should complete with any number of `result` values.\r\n * The `result` values will be passed as arguments, in order, to the next task.\r\n * @param {Function} [callback] - An optional callback to run once all the\r\n * functions have completed. This will be passed the results of the last task's\r\n * callback. Invoked with (err, [results]).\r\n * @returns undefined\r\n * @example\r\n *\r\n * async.waterfall([\r\n *     function(callback) {\r\n *         callback(null, 'one', 'two');\r\n *     },\r\n *     function(arg1, arg2, callback) {\r\n *         // arg1 now equals 'one' and arg2 now equals 'two'\r\n *         callback(null, 'three');\r\n *     },\r\n *     function(arg1, callback) {\r\n *         // arg1 now equals 'three'\r\n *         callback(null, 'done');\r\n *     }\r\n * ], function (err, result) {\r\n *     // result now equals 'done'\r\n * });\r\n *\r\n * // Or, with named functions:\r\n * async.waterfall([\r\n *     myFirstFunction,\r\n *     mySecondFunction,\r\n *     myLastFunction,\r\n * ], function (err, result) {\r\n *     // result now equals 'done'\r\n * });\r\n * function myFirstFunction(callback) {\r\n *     callback(null, 'one', 'two');\r\n * }\r\n * function mySecondFunction(arg1, arg2, callback) {\r\n *     // arg1 now equals 'one' and arg2 now equals 'two'\r\n *     callback(null, 'three');\r\n * }\r\n * function myLastFunction(arg1, callback) {\r\n *     // arg1 now equals 'three'\r\n *     callback(null, 'done');\r\n * }\r\n */\r\nvar waterfall = function(tasks, callback) {\r\n    callback = once(callback || noop);\r\n    if (!isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\r\n    if (!tasks.length) return callback();\r\n    var taskIndex = 0;\r\n\r\n    function nextTask(args) {\r\n        var task = wrapAsync(tasks[taskIndex++]);\r\n        args.push(onlyOnce(next));\r\n        task.apply(null, args);\r\n    }\r\n\r\n    function next(err/*, ...args*/) {\r\n        if (err || taskIndex === tasks.length) {\r\n            return callback.apply(null, arguments);\r\n        }\r\n        nextTask(slice(arguments, 1));\r\n    }\r\n\r\n    nextTask([]);\r\n};\r\n\r\n/**\r\n * An \"async function\" in the context of Async is an asynchronous function with\r\n * a variable number of parameters, with the final parameter being a callback.\r\n * (`function (arg1, arg2, ..., callback) {}`)\r\n * The final callback is of the form `callback(err, results...)`, which must be\r\n * called once the function is completed.  The callback should be called with a\r\n * Error as its first argument to signal that an error occurred.\r\n * Otherwise, if no error occurred, it should be called with `null` as the first\r\n * argument, and any additional `result` arguments that may apply, to signal\r\n * successful completion.\r\n * The callback must be called exactly once, ideally on a later tick of the\r\n * JavaScript event loop.\r\n *\r\n * This type of function is also referred to as a \"Node-style async function\",\r\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\r\n * library are themselves CPS/Node-style async functions, or functions that\r\n * return CPS/Node-style async functions.\r\n *\r\n * Wherever we accept a Node-style async function, we also directly accept an\r\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\r\n * In this case, the `async` function will not be passed a final callback\r\n * argument, and any thrown error will be used as the `err` argument of the\r\n * implicit callback, and the return value will be used as the `result` value.\r\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\r\n * argument, and a `resolved` value becomes the `result`.)\r\n *\r\n * Note, due to JavaScript limitations, we can only detect native `async`\r\n * functions and not transpilied implementations.\r\n * Your environment must have `async`/`await` support for this to work.\r\n * (e.g. Node > v7.6, or a recent version of a modern browser).\r\n * If you are using `async` functions through a transpiler (e.g. Babel), you\r\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\r\n * because the `async function` will be compiled to an ordinary function that\r\n * returns a promise.\r\n *\r\n * @typedef {Function} AsyncFunction\r\n * @static\r\n */\r\n\r\n/**\r\n * Async is a utility module which provides straight-forward, powerful functions\r\n * for working with asynchronous JavaScript. Although originally designed for\r\n * use with [Node.js](http://nodejs.org) and installable via\r\n * `npm install --save async`, it can also be used directly in the browser.\r\n * @module async\r\n * @see AsyncFunction\r\n */\r\n\r\n\r\n/**\r\n * A collection of `async` functions for manipulating collections, such as\r\n * arrays and objects.\r\n * @module Collections\r\n */\r\n\r\n/**\r\n * A collection of `async` functions for controlling the flow through a script.\r\n * @module ControlFlow\r\n */\r\n\r\n/**\r\n * A collection of `async` utility functions.\r\n * @module Utils\r\n */\r\n\r\nvar index = {\r\n    apply: apply,\r\n    applyEach: applyEach,\r\n    applyEachSeries: applyEachSeries,\r\n    asyncify: asyncify,\r\n    auto: auto,\r\n    autoInject: autoInject,\r\n    cargo: cargo,\r\n    compose: compose,\r\n    concat: concat,\r\n    concatLimit: concatLimit,\r\n    concatSeries: concatSeries,\r\n    constant: constant,\r\n    detect: detect,\r\n    detectLimit: detectLimit,\r\n    detectSeries: detectSeries,\r\n    dir: dir,\r\n    doDuring: doDuring,\r\n    doUntil: doUntil,\r\n    doWhilst: doWhilst,\r\n    during: during,\r\n    each: eachLimit,\r\n    eachLimit: eachLimit$1,\r\n    eachOf: eachOf,\r\n    eachOfLimit: eachOfLimit,\r\n    eachOfSeries: eachOfSeries,\r\n    eachSeries: eachSeries,\r\n    ensureAsync: ensureAsync,\r\n    every: every,\r\n    everyLimit: everyLimit,\r\n    everySeries: everySeries,\r\n    filter: filter,\r\n    filterLimit: filterLimit,\r\n    filterSeries: filterSeries,\r\n    forever: forever,\r\n    groupBy: groupBy,\r\n    groupByLimit: groupByLimit,\r\n    groupBySeries: groupBySeries,\r\n    log: log,\r\n    map: map,\r\n    mapLimit: mapLimit,\r\n    mapSeries: mapSeries,\r\n    mapValues: mapValues,\r\n    mapValuesLimit: mapValuesLimit,\r\n    mapValuesSeries: mapValuesSeries,\r\n    memoize: memoize,\r\n    nextTick: nextTick,\r\n    parallel: parallelLimit,\r\n    parallelLimit: parallelLimit$1,\r\n    priorityQueue: priorityQueue,\r\n    queue: queue$1,\r\n    race: race,\r\n    reduce: reduce,\r\n    reduceRight: reduceRight,\r\n    reflect: reflect,\r\n    reflectAll: reflectAll,\r\n    reject: reject,\r\n    rejectLimit: rejectLimit,\r\n    rejectSeries: rejectSeries,\r\n    retry: retry,\r\n    retryable: retryable,\r\n    seq: seq,\r\n    series: series,\r\n    setImmediate: setImmediate$1,\r\n    some: some,\r\n    someLimit: someLimit,\r\n    someSeries: someSeries,\r\n    sortBy: sortBy,\r\n    timeout: timeout,\r\n    times: times,\r\n    timesLimit: timeLimit,\r\n    timesSeries: timesSeries,\r\n    transform: transform,\r\n    tryEach: tryEach,\r\n    unmemoize: unmemoize,\r\n    until: until,\r\n    waterfall: waterfall,\r\n    whilst: whilst,\r\n\r\n    // aliases\r\n    all: every,\r\n    allLimit: everyLimit,\r\n    allSeries: everySeries,\r\n    any: some,\r\n    anyLimit: someLimit,\r\n    anySeries: someSeries,\r\n    find: detect,\r\n    findLimit: detectLimit,\r\n    findSeries: detectSeries,\r\n    forEach: eachLimit,\r\n    forEachSeries: eachSeries,\r\n    forEachLimit: eachLimit$1,\r\n    forEachOf: eachOf,\r\n    forEachOfSeries: eachOfSeries,\r\n    forEachOfLimit: eachOfLimit,\r\n    inject: reduce,\r\n    foldl: reduce,\r\n    foldr: reduceRight,\r\n    select: filter,\r\n    selectLimit: filterLimit,\r\n    selectSeries: filterSeries,\r\n    wrapSync: asyncify\r\n};\r\n\r\nexports['default'] = index;\r\nexports.apply = apply;\r\nexports.applyEach = applyEach;\r\nexports.applyEachSeries = applyEachSeries;\r\nexports.asyncify = asyncify;\r\nexports.auto = auto;\r\nexports.autoInject = autoInject;\r\nexports.cargo = cargo;\r\nexports.compose = compose;\r\nexports.concat = concat;\r\nexports.concatLimit = concatLimit;\r\nexports.concatSeries = concatSeries;\r\nexports.constant = constant;\r\nexports.detect = detect;\r\nexports.detectLimit = detectLimit;\r\nexports.detectSeries = detectSeries;\r\nexports.dir = dir;\r\nexports.doDuring = doDuring;\r\nexports.doUntil = doUntil;\r\nexports.doWhilst = doWhilst;\r\nexports.during = during;\r\nexports.each = eachLimit;\r\nexports.eachLimit = eachLimit$1;\r\nexports.eachOf = eachOf;\r\nexports.eachOfLimit = eachOfLimit;\r\nexports.eachOfSeries = eachOfSeries;\r\nexports.eachSeries = eachSeries;\r\nexports.ensureAsync = ensureAsync;\r\nexports.every = every;\r\nexports.everyLimit = everyLimit;\r\nexports.everySeries = everySeries;\r\nexports.filter = filter;\r\nexports.filterLimit = filterLimit;\r\nexports.filterSeries = filterSeries;\r\nexports.forever = forever;\r\nexports.groupBy = groupBy;\r\nexports.groupByLimit = groupByLimit;\r\nexports.groupBySeries = groupBySeries;\r\nexports.log = log;\r\nexports.map = map;\r\nexports.mapLimit = mapLimit;\r\nexports.mapSeries = mapSeries;\r\nexports.mapValues = mapValues;\r\nexports.mapValuesLimit = mapValuesLimit;\r\nexports.mapValuesSeries = mapValuesSeries;\r\nexports.memoize = memoize;\r\nexports.nextTick = nextTick;\r\nexports.parallel = parallelLimit;\r\nexports.parallelLimit = parallelLimit$1;\r\nexports.priorityQueue = priorityQueue;\r\nexports.queue = queue$1;\r\nexports.race = race;\r\nexports.reduce = reduce;\r\nexports.reduceRight = reduceRight;\r\nexports.reflect = reflect;\r\nexports.reflectAll = reflectAll;\r\nexports.reject = reject;\r\nexports.rejectLimit = rejectLimit;\r\nexports.rejectSeries = rejectSeries;\r\nexports.retry = retry;\r\nexports.retryable = retryable;\r\nexports.seq = seq;\r\nexports.series = series;\r\nexports.setImmediate = setImmediate$1;\r\nexports.some = some;\r\nexports.someLimit = someLimit;\r\nexports.someSeries = someSeries;\r\nexports.sortBy = sortBy;\r\nexports.timeout = timeout;\r\nexports.times = times;\r\nexports.timesLimit = timeLimit;\r\nexports.timesSeries = timesSeries;\r\nexports.transform = transform;\r\nexports.tryEach = tryEach;\r\nexports.unmemoize = unmemoize;\r\nexports.until = until;\r\nexports.waterfall = waterfall;\r\nexports.whilst = whilst;\r\nexports.all = every;\r\nexports.allLimit = everyLimit;\r\nexports.allSeries = everySeries;\r\nexports.any = some;\r\nexports.anyLimit = someLimit;\r\nexports.anySeries = someSeries;\r\nexports.find = detect;\r\nexports.findLimit = detectLimit;\r\nexports.findSeries = detectSeries;\r\nexports.forEach = eachLimit;\r\nexports.forEachSeries = eachSeries;\r\nexports.forEachLimit = eachLimit$1;\r\nexports.forEachOf = eachOf;\r\nexports.forEachOfSeries = eachOfSeries;\r\nexports.forEachOfLimit = eachOfLimit;\r\nexports.inject = reduce;\r\nexports.foldl = reduce;\r\nexports.foldr = reduceRight;\r\nexports.select = filter;\r\nexports.selectLimit = filterLimit;\r\nexports.selectSeries = filterSeries;\r\nexports.wrapSync = asyncify;\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n})));\r\n"],"mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIQ,SAAS,GAAG5K,WAAW,CAAC2K,GAAG,CAAC;EAEhC,SAASE,eAAeA,CAACrN,EAAE,EAAE;IACzB,OAAO,UAAUsL,GAAG,EAAEI,KAAK,EAAEjG,QAAQ,EAAEnF,QAAQ,EAAE;MAC7C,OAAON,EAAE,CAACyL,YAAY,CAACC,KAAK,CAAC,EAAEJ,GAAG,EAAEhJ,SAAS,CAACmD,QAAQ,CAAC,EAAEnF,QAAQ,CAAC;IACtE,CAAC;EACL;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIgN,QAAQ,GAAGD,eAAe,CAACT,SAAS,CAAC;;EAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIW,SAAS,GAAGrB,OAAO,CAACoB,QAAQ,EAAE,CAAC,CAAC;;EAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIE,eAAe,GAAGhL,WAAW,CAAC+K,SAAS,CAAC;;EAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASE,SAASA,CAACC,KAAK,EAAEjI,QAAQ,EAAE;IAClC,IAAIC,KAAK,GAAG,CAAC,CAAC;MACV/F,MAAM,GAAG+N,KAAK,IAAI,IAAI,GAAG,CAAC,GAAGA,KAAK,CAAC/N,MAAM;IAE7C,OAAO,EAAE+F,KAAK,GAAG/F,MAAM,EAAE;MACvB,IAAI8F,QAAQ,CAACiI,KAAK,CAAChI,KAAK,CAAC,EAAEA,KAAK,EAAEgI,KAAK,CAAC,KAAK,KAAK,EAAE;QAClD;MACF;IACF;IACA,OAAOA,KAAK;EACd;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASC,aAAaA,CAACC,SAAS,EAAE;IAChC,OAAO,UAAS/C,MAAM,EAAEpF,QAAQ,EAAEoI,QAAQ,EAAE;MAC1C,IAAInI,KAAK,GAAG,CAAC,CAAC;QACVyG,QAAQ,GAAGpJ,MAAM,CAAC8H,MAAM,CAAC;QACzBiD,KAAK,GAAGD,QAAQ,CAAChD,MAAM,CAAC;QACxBlL,MAAM,GAAGmO,KAAK,CAACnO,MAAM;MAEzB,OAAOA,MAAM,EAAE,EAAE;QACf,IAAImK,GAAG,GAAGgE,KAAK,CAACF,SAAS,GAAGjO,MAAM,GAAG,EAAE+F,KAAK,CAAC;QAC7C,IAAID,QAAQ,CAAC0G,QAAQ,CAACrC,GAAG,CAAC,EAAEA,GAAG,EAAEqC,QAAQ,CAAC,KAAK,KAAK,EAAE;UACpD;QACF;MACF;MACA,OAAOtB,MAAM;IACf,CAAC;EACH;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIkD,OAAO,GAAGJ,aAAa,CAAC,CAAC;;EAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASK,UAAUA,CAACnD,MAAM,EAAEpF,QAAQ,EAAE;IACpC,OAAOoF,MAAM,IAAIkD,OAAO,CAAClD,MAAM,EAAEpF,QAAQ,EAAEgF,IAAI,CAAC;EAClD;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASwD,aAAaA,CAACP,KAAK,EAAEQ,SAAS,EAAEC,SAAS,EAAEP,SAAS,EAAE;IAC7D,IAAIjO,MAAM,GAAG+N,KAAK,CAAC/N,MAAM;MACrB+F,KAAK,GAAGyI,SAAS,IAAIP,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAE5C,OAAQA,SAAS,GAAGlI,KAAK,EAAE,GAAG,EAAEA,KAAK,GAAG/F,MAAM,EAAG;MAC/C,IAAIuO,SAAS,CAACR,KAAK,CAAChI,KAAK,CAAC,EAAEA,KAAK,EAAEgI,KAAK,CAAC,EAAE;QACzC,OAAOhI,KAAK;MACd;IACF;IACA,OAAO,CAAC,CAAC;EACX;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAAS0I,SAASA,CAAC1N,KAAK,EAAE;IACxB,OAAOA,KAAK,KAAKA,KAAK;EACxB;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAAS2N,aAAaA,CAACX,KAAK,EAAEhN,KAAK,EAAEyN,SAAS,EAAE;IAC9C,IAAIzI,KAAK,GAAGyI,SAAS,GAAG,CAAC;MACrBxO,MAAM,GAAG+N,KAAK,CAAC/N,MAAM;IAEzB,OAAO,EAAE+F,KAAK,GAAG/F,MAAM,EAAE;MACvB,IAAI+N,KAAK,CAAChI,KAAK,CAAC,KAAKhF,KAAK,EAAE;QAC1B,OAAOgF,KAAK;MACd;IACF;IACA,OAAO,CAAC,CAAC;EACX;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAAS4I,WAAWA,CAACZ,KAAK,EAAEhN,KAAK,EAAEyN,SAAS,EAAE;IAC5C,OAAOzN,KAAK,KAAKA,KAAK,GAClB2N,aAAa,CAACX,KAAK,EAAEhN,KAAK,EAAEyN,SAAS,CAAC,GACtCF,aAAa,CAACP,KAAK,EAAEU,SAAS,EAAED,SAAS,CAAC;EAChD;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAII,IAAI,GAAG,SAAAA,CAAUC,KAAK,EAAEC,WAAW,EAAEnO,QAAQ,EAAE;IAC/C,IAAI,OAAOmO,WAAW,KAAK,UAAU,EAAE;MACnC;MACAnO,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B,CAAC;MACDiM,OAAO,EAAE,SAAAA,CAAA,EAAY;QACjB,OAAOyK,UAAU;MACrB,CAAC;MACDC,WAAW,EAAE,SAAAA,CAAA,EAAY;QACrB,OAAOA,WAAW;MACtB,CAAC;MACDM,IAAI,EAAE,SAAAA,CAAA,EAAW;QACb,OAAOF,CAAC,CAACK,MAAM,CAACpX,MAAM,GAAG0W,UAAU,KAAK,CAAC;MAC7C,CAAC;MACDoB,KAAK,EAAE,SAAAA,CAAA,EAAY;QACff,CAAC,CAACY,MAAM,GAAG,IAAI;MACnB,CAAC;MACDI,MAAM,EAAE,SAAAA,CAAA,EAAY;QAChB,IAAIhB,CAAC,CAACY,MAAM,KAAK,KAAK,EAAE;UAAE;QAAQ;QAClCZ,CAAC,CAACY,MAAM,GAAG,KAAK;QAChBhW,cAAc,CAACoV,CAAC,CAAC3V,OAAO,CAAC;MAC7B;IACJ,CAAC;IACD,OAAO2V,CAAC;EACZ;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASiB,KAAKA,CAACzB,MAAM,EAAEC,OAAO,EAAE;IAC5B,OAAOF,KAAK,CAACC,MAAM,EAAE,CAAC,EAAEC,OAAO,CAAC;EACpC;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIyB,YAAY,GAAG1L,OAAO,CAACD,WAAW,EAAE,CAAC,CAAC;;EAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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,CAACgO,WAAW,EAAE,CAAC,CAAC;;EAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASE,WAAWA,CAACpa,EAAE,EAAE;IACrB,IAAIoC,OAAO,CAACpC,EAAE,CAAC,EAAE,OAAOA,EAAE;IAC1B,OAAOK,aAAa,CAAC,UAAUJ,IAAI,EAAEK,QAAQ,EAAE;MAC3C,IAAI+Z,IAAI,GAAG,IAAI;MACfpa,IAAI,CAAC8J,IAAI,CAAC,YAAY;QAClB,IAAIuQ,SAAS,GAAGpa,SAAS;QACzB,IAAIma,IAAI,EAAE;UACN/Y,cAAc,CAAC,YAAY;YACvBhB,QAAQ,CAACP,KAAK,CAAC,IAAI,EAAEua,SAAS,CAAC;UACnC,CAAC,CAAC;QACN,CAAC,MAAM;UACHha,QAAQ,CAACP,KAAK,CAAC,IAAI,EAAEua,SAAS,CAAC;QACnC;MACJ,CAAC,CAAC;MACFta,EAAE,CAACD,KAAK,CAAC,IAAI,EAAEE,IAAI,CAAC;MACpBoa,IAAI,GAAG,KAAK;IAChB,CAAC,CAAC;EACN;EAEA,SAASE,KAAKA,CAACrN,CAAC,EAAE;IACd,OAAO,CAACA,CAAC;EACb;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIsN,KAAK,GAAG7N,UAAU,CAACkM,aAAa,CAAC0B,KAAK,EAAEA,KAAK,CAAC,CAAC;;EAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIE,UAAU,GAAGpN,eAAe,CAACwL,aAAa,CAAC0B,KAAK,EAAEA,KAAK,CAAC,CAAC;;EAE7D;AACA;AACA;AACA;AACA;A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8B,cAAc,GAAGR,MAAM,CAACO,SAAS,CAACC,cAAc;MAEpD,KAAK,IAAIwH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyN,UAAU,CAAC7Y,MAAM,EAAEoL,CAAC,EAAE,EAAE;QACxC,IAAIyN,UAAU,CAACzN,CAAC,CAAC,EAAE;UACf,IAAIjB,GAAG,GAAG0O,UAAU,CAACzN,CAAC,CAAC,CAACjB,GAAG;UAC3B,IAAIsG,GAAG,GAAGoI,UAAU,CAACzN,CAAC,CAAC,CAACqF,GAAG;UAE3B,IAAI7M,cAAc,CAAC/C,IAAI,CAACiB,MAAM,EAAEqI,GAAG,CAAC,EAAE;YAClCrI,MAAM,CAACqI,GAAG,CAAC,CAACC,IAAI,CAACqG,GAAG,CAAC;UACzB,CAAC,MAAM;YACH3O,MAAM,CAACqI,GAAG,CAAC,GAAG,CAACsG,GAAG,CAAC;UACvB;QACJ;MACJ;MAEA,OAAO9P,QAAQ,CAACuB,GAAG,EAAEJ,MAAM,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIga,OAAO,GAAGvP,OAAO,CAACsP,YAAY,EAAEhP,QAAQ,CAAC;;EAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIkP,aAAa,GAAGxP,OAAO,CAACsP,YAAY,EAAE,CAAC,CAAC;;EAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIG,GAAG,GAAGrC,WAAW,CAAC,KAAK,CAAC;;EAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAAS0P,aAAaA,CAAChO,KAAK,EAAElO,QAAQ,EAAE;IACpCic,SAAS,CAAC9P,MAAM,EAAE+B,KAAK,EAAElO,QAAQ,CAAC;EACtC;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASmc,eAAeA,CAACjO,KAAK,EAAE9C,KAAK,EAAEpL,QAAQ,EAAE;IAC7Cic,SAAS,CAAC9Q,YAAY,CAACC,KAAK,CAAC,EAAE8C,KAAK,EAAElO,QAAQ,CAAC;EACnoc,OAAO,GAAG,SAAAA,CAAUxG,MAAM,EAAEzH,WAAW,EAAE;IACzC,IAAI2H,OAAO,GAAG9T,SAAS,CAAC4T,MAAM,CAAC;IAC/B,OAAOD,KAAK,CAAC,UAAU0G,KAAK,EAAE9Z,EAAE,EAAE;MAC9BuT,OAAO,CAACuG,KAAK,CAAC,CAAC,CAAC,EAAE9Z,EAAE,CAAC;IACzB,CAAC,EAAE4L,WAAW,EAAE,CAAC,CAAC;EACtB,CAAC;;EAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAImO,aAAa,GAAG,SAAAA,CAAS1G,MAAM,EAAEzH,WAAW,EAAE;IAC9C;IACA,IAAIiI,CAAC,GAAGgG,OAAO,CAACxG,MAAM,EAAEzH,WAAW,CAAC;;IAEpC;IACAiI,CAAC,CAAC3M,IAAI,GAAG,UAAS+L,IAAI,EAAE+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AM,EAAEoK,GAAG,EAAEpH,QAAQ,EAAEnF,QAAQ,EAAE;IAC/C4a,OAAO,CAACzY,MAAM,EAAEoK,GAAG,EAAE,UAASnM,KAAK,EAAEmC,EAAE,EAAE;MACrC4C,QAAQ,CAAC/E,KAAK,EAAE,UAASmB,GAAG,EAAEqL,CAAC,EAAE;QAC7BrK,EAAE,CAAChB,GAAG,EAAE,CAACqL,CAAC,CAAC;MACf,CAAC,CAAC;IACN,CAAC,EAAE5M,QAAQ,CAAC;EAChB;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAImd,MAAM,GAAG9Q,UAAU,CAAC6Q,QAAQ,CAAC;;EAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIE,WAAW,GAAGrQ,eAAe,CAACmQ,QAAQ,CAAC;;EAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIG,YAAY,GAAGzR,OAAO,CAACwR,WAAW,EAAE,CAAC,CAAC;;EAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASE,UAAUA,CAACld,KAAK,EAAE;IACzB,OAAO,YAAW;MAChB,OAAOA,KAAK;IACd,CAAC;EACH;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASue,MAAMA,CAACrQ,KAAK,EAAElO,QAAQ,EAAE;IAC7Bic,SAAS,CAAC3E,YAAY,EAAEpJ,KAAK,EAAElO,QAAQ,CAAC;EAC5C;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIwe,IAAI,GAAGnS,UAAU,CAACkM,aAAa,CAACkG,OAAO,EAAEnG,QAAQ,CAAC,CAAC;;EAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIoG,SAAS,GAAG3R,eAAe,CAACwL,aAAa,CAACkG,OAAO,EAAEnG,QAAQ,CAAC,CAAC;;EAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAIqG,UAAU,GAAG/S,OAAO,CAAC8S,SAAS,EAAE,CAAC,CAAC;;EAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASE,MAAMA,CAAE5Z,IAAI,EAAEG,QAAQ,EAAEnF,QAAQ,EAAE;IACvC,IAAI0M,SAAS,GAAG1K,SAAS,CAACmD,QAAQ,CAAC;IACnC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"},"metadata":{},"sourceType":"script","externalDependencies":[]}