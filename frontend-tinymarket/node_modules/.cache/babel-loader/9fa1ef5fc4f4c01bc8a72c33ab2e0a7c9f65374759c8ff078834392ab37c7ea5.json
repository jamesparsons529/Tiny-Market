{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\Mint.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useConnect } from \"@stacks/connect-react\";\nimport { StacksMocknet } from \"@stacks/network\";\nimport { AnchorMode, uintCV, callReadOnlyFunction, makeStandardSTXPostCondition, FungibleConditionCode } from \"@stacks/transactions\";\nimport { userSession } from \"./ConnectWallet\";\n// import fleekStorage from '@fleekhq/fleek-storage-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Mint = () => {\n  _s();\n  const {\n    doContractCall\n  } = useConnect();\n  const [minted, setMinted] = useState(false);\n  const [src, setSrc] = useState('');\n  function mint() {\n    const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;\n    const postConditionCode = FungibleConditionCode.LessEqual;\n    const postConditionAmount = 50 * 1000000;\n    doContractCall({\n      network: new StacksMocknet(),\n      anchorMode: AnchorMode.Any,\n      contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\n      contractName: \"sip009-nft\",\n      functionName: \"mint\",\n      functionArgs: [],\n      postConditions: [makeStandardSTXPostCondition(postConditionAddress, postConditionCode, postConditionAmount)],\n      onFinish: data => {\n        window.alert(\"NFT Successful\");\n        console.log(\"onFinish:\", data);\n        console.log(\"Explorer:\", `localhost:8000/txid/${data.txId}?chain=testnet`);\n        setMinted(true);\n      },\n      onCancel: () => {\n        console.log(\"onCancel:\", \"Transaction was canceled\");\n        window.alert(\"NFT mint failed\");\n      }\n    });\n  }\n  const getNft = useCallback(async () => {\n    if (minted) {\n      try {\n        const options = {\n          contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\n          contractName: \"sip009-nft\",\n          functionName: \"get-token-uri\",\n          network: new StacksMocknet(),\n          functionArgs: [uintCV(1)],\n          senderAddress: userSession.loadUserData().profile.stxAddress.testnet\n        };\n        const result = await callReadOnlyFunction(options);\n        console.log(result);\n        if (result.value) {\n          // using fetch to retrieve data\n          fetch(`https://${result.value.value.data}`).then(res => res.json()).then(output => {\n            console.log(\"Metadata:\", output);\n            setSrc(output.image);\n          });\n\n          // using fleek helper to retrieve data\n          // const myFile = await fleekStorage.getFileFromHash({\n          // hash: 'bafybeigi4zxlzz6wmqrgazeccbenctvhdn5bw7o7qlwfvqo7g5alij4bda'\n          // });\n\n          console.log(\"MY FILE\", myFile);\n          setSrc(myFile.image);\n        }\n      } catch (error) {\n        window.alert(\"Error fetching NFT:\", error);\n      }\n    }\n  });\n  console.log(src);\n  useEffect(() => {\n    getNft();\n  }, [minted]);\n  if (!userSession.isUserSignedIn()) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!minted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Mint Another Ape!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"MintButton\",\n        onClick: () => mint(),\n        children: \"Mint Ape NFT \\uD83D\\uDC35\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), minted && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: src,\n        alt: \"another ape\",\n        height: \"500px\",\n        width: \"500px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(Mint, \"eQTkZKWoY+yUXt/uA0R5Ki+BBI0=\", false, function () {\n  return [useConnect];\n});\n_c = Mint;\nexport default Mint;\nvar _c;\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"names":["useCallback","useEffect","useState","useConnect","StacksMocknet","AnchorMode","uintCV","callReadOnlyFunction","makeStandardSTXPostCondition","FungibleConditionCode","userSession","jsxDEV","_jsxDEV","Mint","_s","doContractCall","minted","setMinted","src","setSrc","mint","postConditionAddress","loadUserData","profile","stxAddress","testnet","postConditionCode","LessEqual","postConditionAmount","network","anchorMode","Any","contractAddress","contractName","functionName","functionArgs","postConditions","onFinish","data","window","alert","console","log","txId","onCancel","getNft","options","senderAddress","result","value","fetch","then","res","json","output","image","myFile","error","isUserSignedIn","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","alt","height","width","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/Mint.js"],"sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\r\nimport { useConnect } from \"@stacks/connect-react\";\r\nimport { StacksMocknet } from \"@stacks/network\";\r\nimport {\r\n  AnchorMode,\r\n  uintCV,\r\n  callReadOnlyFunction,\r\n  makeStandardSTXPostCondition,\r\n  FungibleConditionCode\r\n} from \"@stacks/transactions\";\r\nimport { userSession } from \"./ConnectWallet\";\r\n// import fleekStorage from '@fleekhq/fleek-storage-js';\r\n\r\nconst Mint = () => {\r\n  const { doContractCall } = useConnect();\r\n  const [minted, setMinted] = useState(false);\r\n  const [src, setSrc] = useState('');\r\n\r\n  function mint() {\r\n    const postConditionAddress = userSession.loadUserData().profile.stxAddress.testnet;\r\n    const postConditionCode = FungibleConditionCode.LessEqual;\r\n    const postConditionAmount = 50 * 1000000;\r\n\r\n    doContractCall({\r\n      network: new StacksMocknet(),\r\n      anchorMode: AnchorMode.Any,\r\n      contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\r\n      contractName: \"sip009-nft\",\r\n      functionName: \"mint\",\r\n      functionArgs: [],\r\n      postConditions: [\r\n        makeStandardSTXPostCondition(\r\n          postConditionAddress,\r\n          postConditionCode,\r\n          postConditionAmount\r\n        )\r\n      ],\r\n      onFinish: (data) => {\r\n        window.alert(\"NFT Successful\");\r\n        console.log(\"onFinish:\", data);\r\n        console.log(\"Explorer:\", `localhost:8000/txid/${data.txId}?chain=testnet`)\r\n        setMinted(true);\r\n      },\r\n      onCancel: () => {\r\n        console.log(\"onCancel:\", \"Transaction was canceled\");\r\n        window.alert(\"NFT mint failed\");\r\n      },\r\n    });\r\n  }\r\n\r\n  const getNft = useCallback(async () => {\r\n    if (minted) {\r\n      try {\r\n        const options = {\r\n          contractAddress: \"ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM\",\r\n          contractName: \"sip009-nft\",\r\n          functionName: \"get-token-uri\",\r\n          network: new StacksMocknet(),\r\n          functionArgs: [uintCV(1)],\r\n          senderAddress: userSession.loadUserData().profile.stxAddress.testnet\r\n        };\r\n  \r\n        const result = await callReadOnlyFunction(options);\r\n        console.log(result);\r\n        \r\n        if (result.value) {\r\n\r\n          // using fetch to retrieve data\r\n          fetch(`https://${result.value.value.data}`)\r\n          .then(res => res.json())\r\n          .then ((output) => {\r\n          console.log(\"Metadata:\", output)\r\n          setSrc(output.image);\r\n          })\r\n\r\n          // using fleek helper to retrieve data\r\n          // const myFile = await fleekStorage.getFileFromHash({\r\n            // hash: 'bafybeigi4zxlzz6wmqrgazeccbenctvhdn5bw7o7qlwfvqo7g5alij4bda'\r\n          // });\r\n\r\n          console.log(\"MY FILE\", myFile);\r\n          setSrc(myFile.image);\r\n        }\r\n      } catch (error) {\r\n        window.alert(\"Error fetching NFT:\", error);\r\n\r\n      }\r\n    }\r\n  });\r\n\r\n  console.log(src);\r\n\r\n  useEffect(() => {\r\n    getNft();\r\n  }, [minted])\r\n\r\n  if (!userSession.isUserSignedIn()) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      {!minted &&\r\n        <div>\r\n          <p>Mint Another Ape!</p>\r\n          <button className=\"MintButton\" onClick={() => mint()}>\r\n            Mint Ape NFT üêµ\r\n          </button>\r\n        </div>  \r\n      }\r\n      {minted && \r\n        <div>\r\n          <img src={src} alt=\"another ape\" height=\"500px\" width=\"500px\" />\r\n        </div>\r\n      }\r\n    </div>\r\n  ); \r\n};\r\n\r\nexport default Mint;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}