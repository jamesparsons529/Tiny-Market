{"ast":null,"code":"import { InvalidStateError } from '@stacks/common';\nconst SESSION_VERSION = '1.0.0';\nexport class SessionData {\n  constructor(options) {\n    this.version = SESSION_VERSION;\n    this.userData = options.userData;\n    this.transitKey = options.transitKey;\n    this.etags = options.etags ? options.etags : {};\n  }\n  static fromJSON(json) {\n    if (json.version !== SESSION_VERSION) {\n      throw new InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\n    }\n    const options = {\n      coreNode: json.coreNode,\n      userData: json.userData,\n      transitKey: json.transitKey,\n      etags: json.etags\n    };\n    return new SessionData(options);\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n}","map":{"version":3,"names":["InvalidStateError","SESSION_VERSION","SessionData","constructor","options","version","userData","transitKey","etags","fromJSON","json","coreNode","toString","JSON","stringify"],"sources":["C:\\Users\\Elliott\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\auth\\src\\sessionData.ts"],"sourcesContent":["import { InvalidStateError } from '@stacks/common';\r\nimport { UserData } from './userData';\r\n\r\nconst SESSION_VERSION = '1.0.0';\r\n\r\ntype EtagMap = { [key: string]: string };\r\n\r\nexport interface SessionOptions {\r\n  coreNode?: string;\r\n  userData?: UserData;\r\n  transitKey?: string;\r\n  etags?: EtagMap;\r\n  localStorageKey?: string;\r\n  storeOptions?: {\r\n    localStorageKey?: string;\r\n  };\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class SessionData {\r\n  version: string;\r\n\r\n  transitKey?: string;\r\n\r\n  // using this in place of\r\n  // window.localStorage.setItem(BLOCKSTACK_STORAGE_LABEL, JSON.stringify(userData))\r\n  userData?: UserData;\r\n\r\n  etags?: EtagMap;\r\n\r\n  constructor(options: SessionOptions) {\r\n    this.version = SESSION_VERSION;\r\n    this.userData = options.userData;\r\n    this.transitKey = options.transitKey;\r\n    this.etags = options.etags ? options.etags : {};\r\n  }\r\n\r\n  // getGaiaHubConfig(): GaiaHubConfig {\r\n  //   return this.userData && this.userData.gaiaHubConfig\r\n  // }\r\n\r\n  // setGaiaHubConfig(config: GaiaHubConfig): void {\r\n  //   this.userData.gaiaHubConfig = config\r\n  // }\r\n\r\n  static fromJSON(json: any): SessionData {\r\n    if (json.version !== SESSION_VERSION) {\r\n      throw new InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\r\n    }\r\n    const options: SessionOptions = {\r\n      coreNode: json.coreNode,\r\n      userData: json.userData,\r\n      transitKey: json.transitKey,\r\n      etags: json.etags,\r\n    };\r\n    return new SessionData(options);\r\n  }\r\n\r\n  toString(): string {\r\n    return JSON.stringify(this);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,gBAAgB;AAGlD,MAAMC,eAAe,GAAG,OAAO;AAkB/B,OAAM,MAAOC,WAAW;EAWtBC,YAAYC,OAAuB;IACjC,IAAI,CAACC,OAAO,GAAGJ,eAAe;IAC9B,IAAI,CAACK,QAAQ,GAAGF,OAAO,CAACE,QAAQ;IAChC,IAAI,CAACC,UAAU,GAAGH,OAAO,CAACG,UAAU;IACpC,IAAI,CAACC,KAAK,GAAGJ,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAACI,KAAK,GAAG,EAAE;EACjD;EAUA,OAAOC,QAAQA,CAACC,IAAS;IACvB,IAAIA,IAAI,CAACL,OAAO,KAAKJ,eAAe,EAAE;MACpC,MAAM,IAAID,iBAAiB,CAAC,qBAAqBU,IAAI,CAACL,OAAO,+BAA+B,CAAC;;IAE/F,MAAMD,OAAO,GAAmB;MAC9BO,QAAQ,EAAED,IAAI,CAACC,QAAQ;MACvBL,QAAQ,EAAEI,IAAI,CAACJ,QAAQ;MACvBC,UAAU,EAAEG,IAAI,CAACH,UAAU;MAC3BC,KAAK,EAAEE,IAAI,CAACF;KACb;IACD,OAAO,IAAIN,WAAW,CAACE,OAAO,CAAC;EACjC;EAEAQ,QAAQA,CAAA;IACN,OAAOC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC;EAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}