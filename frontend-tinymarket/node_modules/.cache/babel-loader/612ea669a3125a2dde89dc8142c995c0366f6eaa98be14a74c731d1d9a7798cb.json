{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\CurrentListings.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { callReadOnlyFunction } from '@stacks/transactions'; // Import the necessary library functions\nimport { StacksTestnet } from \"@stacks/network\";\nimport { uintCV } from \"@stacks/transactions\";\nimport { userSession } from \"./ConnectWallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrentListings = ({\n  contractAddress,\n  contractName\n}) => {\n  _s();\n  const [listings, setListings] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const stxAddress = userSession.loadUserData().profile.stxAddress.mainnet;\n\n  // Function to get the last listing ID\n  const fetchLastListingId = async () => {\n    const options = {\n      network: new StacksTestnet(),\n      contractAddress: \"ST1NWPSRC02Z9A20RHSBGDEDG9H8CHS6ENJ2N3TTH\",\n      contractName: \"sip009-nft\",\n      functionName: 'get-last-token-id',\n      functionArgs: [],\n      senderAddress: stxAddress\n    };\n    const result = await callReadOnlyFunction(options);\n    return Number(result.value.value); // Get the number from the result\n  };\n\n  // Function to fetch individual listing by ID\n  const fetchListing = async listingId => {\n    const options = {\n      network: new StacksTestnet(),\n      contractAddress: \"ST1NWPSRC02Z9A20RHSBGDEDG9H8CHS6ENJ2N3TTH\",\n      contractName: \"tiny-market\",\n      functionName: 'get-listing',\n      functionArgs: [uintCV(listingId)],\n      senderAddress: stxAddress\n    };\n    const result = await callReadOnlyFunction(options);\n    return result.value ? result.value : null;\n  };\n\n  // Fetch all active listings\n  const fetchAllListings = async () => {\n    setLoading(true);\n    try {\n      const lastListingId = await fetchLastListingId();\n      console.log('Last listing ID:', lastListingId);\n      const fetchedListings = [];\n      for (let id = 0; id < lastListingId; id++) {\n        const listing = await fetchListing(id);\n        if (listing) {\n          fetchedListings.push(listing);\n        }\n      }\n      setListings(fetchedListings);\n    } catch (error) {\n      console.error('Error fetching listings:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchAllListings(); // Fetch listings on component mount\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading listings...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Current NFT Listings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), listings.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No listings available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: listings.map((listing, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Token ID: \", listing.tokenId, \" - Price: \", listing.price, \" STX\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(CurrentListings, \"XSpFPRublOedJQvrhfNls4lrL/8=\");\n_c = CurrentListings;\nexport default CurrentListings;\nvar _c;\n$RefreshReg$(_c, \"CurrentListings\");","map":{"version":3,"names":["React","useState","useEffect","callReadOnlyFunction","StacksTestnet","uintCV","userSession","jsxDEV","_jsxDEV","CurrentListings","contractAddress","contractName","_s","listings","setListings","loading","setLoading","stxAddress","loadUserData","profile","mainnet","fetchLastListingId","options","network","functionName","functionArgs","senderAddress","result","Number","value","fetchListing","listingId","fetchAllListings","lastListingId","console","log","fetchedListings","id","listing","push","error","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","tokenId","price","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/CurrentListings.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { callReadOnlyFunction } from '@stacks/transactions'; // Import the necessary library functions\r\nimport { StacksTestnet } from \"@stacks/network\";\r\nimport { \r\n    uintCV, \r\n} from \"@stacks/transactions\";\r\nimport { userSession } from \"./ConnectWallet\";\r\n\r\nconst CurrentListings = ({ contractAddress, contractName }) => {\r\n  const [listings, setListings] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const stxAddress = userSession.loadUserData().profile.stxAddress.mainnet;\r\n\r\n  // Function to get the last listing ID\r\n  const fetchLastListingId = async () => {\r\n    const options = {\r\n      network: new StacksTestnet(),\r\n      contractAddress: \"ST1NWPSRC02Z9A20RHSBGDEDG9H8CHS6ENJ2N3TTH\",\r\n      contractName: \"sip009-nft\",\r\n      functionName: 'get-last-token-id',\r\n      functionArgs: [],\r\n      senderAddress: stxAddress,\r\n    };\r\n    \r\n    const result = await callReadOnlyFunction(options);\r\n    return Number(result.value.value); // Get the number from the result\r\n  };\r\n\r\n  // Function to fetch individual listing by ID\r\n  const fetchListing = async (listingId) => {\r\n    const options = {\r\n      network: new StacksTestnet(),\r\n      contractAddress: \"ST1NWPSRC02Z9A20RHSBGDEDG9H8CHS6ENJ2N3TTH\",\r\n      contractName: \"tiny-market\",\r\n      functionName: 'get-listing',\r\n      functionArgs: [uintCV(listingId)],\r\n      senderAddress: stxAddress,\r\n    };\r\n    \r\n    const result = await callReadOnlyFunction(options);\r\n    return result.value ? result.value : null;\r\n  };\r\n\r\n  // Fetch all active listings\r\n  const fetchAllListings = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const lastListingId = await fetchLastListingId();\r\n      console.log('Last listing ID:', lastListingId);\r\n      const fetchedListings = [];\r\n      \r\n      for (let id = 0; id < lastListingId; id++) {\r\n        const listing = await fetchListing(id);\r\n        if (listing) {\r\n          fetchedListings.push(listing);\r\n        }\r\n      }\r\n      setListings(fetchedListings);\r\n    } catch (error) {\r\n      console.error('Error fetching listings:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAllListings(); // Fetch listings on component mount\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading listings...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Current NFT Listings</h2>\r\n      {listings.length === 0 ? (\r\n        <p>No listings available</p>\r\n      ) : (\r\n        <ul>\r\n          {listings.map((listing, index) => (\r\n            <li key={index}>\r\n              Token ID: {listing.tokenId} - Price: {listing.price} STX\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentListings;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}