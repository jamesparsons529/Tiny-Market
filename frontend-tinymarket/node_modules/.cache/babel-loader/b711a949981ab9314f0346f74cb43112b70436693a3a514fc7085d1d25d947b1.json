{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\AssetCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { UserSession } from \"@stacks/connect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const userSession = new UserSession();\nfunction AssetCard() {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Retrieve the STX address from the user session\n  const stxAddress = userSession.loadUserData().profile.stxAddress.mainnet;\n\n  // Function to extract principal and contract name from asset identifier\n  const extractPrincipalAndContract = assetIdentifier => {\n    const [fullContractName] = assetIdentifier.split('::');\n    const [principal, contractName] = fullContractName.split('.');\n    return {\n      principal,\n      contractName\n    };\n  };\n\n  // Fetch NFTs for the user's Stacks address\n  useEffect(() => {\n    async function fetchNFTs() {\n      try {\n        setLoading(true);\n\n        // Fetch NFTs from the Hiro Stacks API\n        const response = await fetch(`https://stacks-node-api.mainnet.stacks.co/extended/v1/tokens/nft/holdings?principal=${stxAddress}`);\n        const data = await response.json();\n        console.log(data);\n\n        // Check if data exists and set it to state\n        if (data.results && data.results.length > 0) {\n          const nftsWithDetails = data.results.map(nft => {\n            const {\n              principal,\n              contractName\n            } = extractPrincipalAndContract(nft.asset_identifier);\n            console.log(`Principal: ${principal}`);\n            console.log(`Contract Name: ${contractName}`);\n            return {\n              ...nft,\n              principal,\n              contractName,\n              imageUrl: nft.value.repr.replace('u', '') // Assuming this is the image URL\n            };\n          });\n\n          setNfts(nftsWithDetails);\n        } else {\n          console.log('No NFTs found for this address.');\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setLoading(false);\n      }\n    }\n    fetchNFTs();\n  }, [stxAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"home-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"NFTCard\",\n        children: /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"browse-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nft-grid\",\n            children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading NFTs...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this) : nfts.length > 0 ? nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"nft-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: nft.imageUrl,\n                alt: nft.asset_identifier\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: nft.asset_identifier\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"NFT Contract: \", nft.principal, \".\", nft.contractName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Token ID: \", nft.value.repr.replace('u', '')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"nft-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"buy-now\",\n                  children: \"Buy Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"swap\",\n                  children: \"Swap\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No NFTs found for this address.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(AssetCard, \"Xu7ThsH35mRfDOV8Y1kg1IE53o0=\");\n_c = AssetCard;\nexport default AssetCard;\nvar _c;\n$RefreshReg$(_c, \"AssetCard\");","map":{"version":3,"names":["React","useState","useEffect","UserSession","jsxDEV","_jsxDEV","userSession","AssetCard","_s","nfts","setNfts","loading","setLoading","stxAddress","loadUserData","profile","mainnet","extractPrincipalAndContract","assetIdentifier","fullContractName","split","principal","contractName","fetchNFTs","response","fetch","data","json","console","log","results","length","nftsWithDetails","map","nft","asset_identifier","imageUrl","value","repr","replace","error","children","id","className","fileName","_jsxFileName","lineNumber","columnNumber","index","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/AssetCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { UserSession } from \"@stacks/connect\"; \r\nexport const userSession = new UserSession();\r\n\r\nfunction AssetCard() {\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Retrieve the STX address from the user session\r\n  const stxAddress = userSession.loadUserData().profile.stxAddress.mainnet;\r\n\r\n  // Function to extract principal and contract name from asset identifier\r\n  const extractPrincipalAndContract = (assetIdentifier) => {\r\n    const [fullContractName] = assetIdentifier.split('::');\r\n    const [principal, contractName] = fullContractName.split('.');\r\n    return { principal, contractName };\r\n  };\r\n\r\n  // Fetch NFTs for the user's Stacks address\r\n  useEffect(() => {\r\n    async function fetchNFTs() {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Fetch NFTs from the Hiro Stacks API\r\n        const response = await fetch(\r\n          `https://stacks-node-api.mainnet.stacks.co/extended/v1/tokens/nft/holdings?principal=${stxAddress}`\r\n        );\r\n        const data = await response.json();\r\n\r\n        console.log(data);\r\n        \r\n        // Check if data exists and set it to state\r\n        if (data.results && data.results.length > 0) {\r\n          const nftsWithDetails = data.results.map(nft => {\r\n            const { principal, contractName } = extractPrincipalAndContract(nft.asset_identifier);\r\n            console.log(`Principal: ${principal}`);\r\n            console.log(`Contract Name: ${contractName}`);\r\n            \r\n            return {\r\n              ...nft,\r\n              principal,\r\n              contractName,\r\n              imageUrl: nft.value.repr.replace('u', '') // Assuming this is the image URL\r\n            };\r\n          });\r\n          setNfts(nftsWithDetails);\r\n        } else {\r\n          console.log('No NFTs found for this address.');\r\n        }\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching NFTs:', error);\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchNFTs();\r\n  }, [stxAddress]); \r\n\r\n  return (\r\n    <div>\r\n      <main id=\"home-container\">\r\n        <div className=\"NFTCard\">\r\n          <main className=\"browse-container\">\r\n            <div className=\"nft-grid\">\r\n              {loading ? (\r\n                <p>Loading NFTs...</p>\r\n              ) : nfts.length > 0 ? (\r\n                nfts.map((nft, index) => (\r\n                  <div className=\"nft-item\" key={index}>\r\n                    <img src={nft.imageUrl} alt={nft.asset_identifier} />\r\n                    <h2>{nft.asset_identifier}</h2>\r\n                    <p>NFT Contract: {nft.principal}.{nft.contractName}</p>\r\n                    <p>Token ID: {nft.value.repr.replace('u', '')}</p>\r\n                    <div className=\"nft-buttons\">\r\n                      <button className=\"buy-now\">Buy Now</button>\r\n                      <button className=\"swap\">Swap</button>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <p>No NFTs found for this address.</p>\r\n              )}\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AssetCard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}