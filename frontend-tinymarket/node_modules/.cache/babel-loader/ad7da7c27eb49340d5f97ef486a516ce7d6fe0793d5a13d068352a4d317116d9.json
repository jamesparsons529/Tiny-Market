{"ast":null,"code":"import { ClarityType } from '../constants';\nconst stringAsciiCV = data => {\n  return {\n    type: ClarityType.StringASCII,\n    data\n  };\n};\nconst stringUtf8CV = data => {\n  return {\n    type: ClarityType.StringUTF8,\n    data\n  };\n};\nconst stringCV = (data, encoding) => {\n  switch (encoding) {\n    case 'ascii':\n      return stringAsciiCV(data);\n    case 'utf8':\n      return stringUtf8CV(data);\n  }\n};\nexport { stringAsciiCV, stringUtf8CV, stringCV };","map":{"version":3,"names":["ClarityType","stringAsciiCV","data","type","StringASCII","stringUtf8CV","StringUTF8","stringCV","encoding"],"sources":["C:\\Users\\Elliott\\Tiny-Market\\frontend-tinymarket\\node_modules\\@stacks\\transactions\\src\\clarity\\types\\stringCV.ts"],"sourcesContent":["import { ClarityType } from '../constants';\r\n\r\ninterface StringAsciiCV {\r\n  readonly type: ClarityType.StringASCII;\r\n  readonly data: string;\r\n}\r\n\r\ninterface StringUtf8CV {\r\n  readonly type: ClarityType.StringUTF8;\r\n  readonly data: string;\r\n}\r\n\r\n/**\r\n * Converts ClarityValue to stringAsciiCV\r\n *\r\n * @param {data} ClarityValue value to be converted to stringAsciiCV clarity type\r\n *\r\n * @returns {StringAsciiCV} returns instance of type StringAsciiCV\r\n *\r\n * @example\r\n * ```\r\n *  import { stringAsciiCV } from '@stacks/transactions';\r\n *\r\n *  const stringAscii = stringAsciiCV('test');\r\n *\r\n *  // { type: 13, data: 'hello' }\r\n * ```\r\n *\r\n * @see\r\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\r\n */\r\nconst stringAsciiCV = (data: string): StringAsciiCV => {\r\n  return { type: ClarityType.StringASCII, data };\r\n};\r\n\r\n/**\r\n * Converts ClarityValue to stringUtf8CV\r\n *\r\n * @param {data} ClarityValue value to be converted to stringUtf8CV clarity type\r\n *\r\n * @returns {stringUtf8CV} returns instance of type stringUtf8CV\r\n *\r\n * @example\r\n * ```\r\n *  import { stringUtf8CV } from '@stacks/transactions';\r\n *\r\n *  const stringUTF8 = stringUtf8CV('test');\r\n *\r\n *  // { type: 13, data: 'hello' }\r\n * ```\r\n *\r\n * @see\r\n * {@link https://github.com/hirosystems/stacks.js/blob/main/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\r\n */\r\nconst stringUtf8CV = (data: string): StringUtf8CV => {\r\n  return { type: ClarityType.StringUTF8, data };\r\n};\r\n\r\n/**\r\n * @ignore\r\n */\r\nconst stringCV = (data: string, encoding: 'ascii' | 'utf8'): StringAsciiCV | StringUtf8CV => {\r\n  switch (encoding) {\r\n    case 'ascii':\r\n      return stringAsciiCV(data);\r\n    case 'utf8':\r\n      return stringUtf8CV(data);\r\n  }\r\n};\r\n\r\nexport { StringAsciiCV, StringUtf8CV, stringAsciiCV, stringUtf8CV, stringCV };\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AA+B1C,MAAMC,aAAa,GAAIC,IAAY,IAAmB;EACpD,OAAO;IAAEC,IAAI,EAAEH,WAAW,CAACI,WAAW;IAAEF;EAAI,CAAE;AAChD,CAAC;AAqBD,MAAMG,YAAY,GAAIH,IAAY,IAAkB;EAClD,OAAO;IAAEC,IAAI,EAAEH,WAAW,CAACM,UAAU;IAAEJ;EAAI,CAAE;AAC/C,CAAC;AAKD,MAAMK,QAAQ,GAAGA,CAACL,IAAY,EAAEM,QAA0B,KAAkC;EAC1F,QAAQA,QAAQ;IACd,KAAK,OAAO;MACV,OAAOP,aAAa,CAACC,IAAI,CAAC;IAC5B,KAAK,MAAM;MACT,OAAOG,YAAY,CAACH,IAAI,CAAC;;AAE/B,CAAC;AAED,SAAsCD,aAAa,EAAEI,YAAY,EAAEE,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}