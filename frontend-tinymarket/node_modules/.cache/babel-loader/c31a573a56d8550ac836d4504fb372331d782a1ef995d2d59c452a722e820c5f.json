{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\AssetCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { UserSession } from \"@stacks/connect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const userSession = new UserSession();\nfunction AssetCard() {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const stxAddress = userSession.loadUserData().profile.stxAddress.mainnet;\n  useEffect(() => {\n    async function fetchNFTs() {\n      try {\n        setLoading(true);\n\n        // Fetch NFTs from the Hiro Stacks API\n        const response = await fetch(`https://stacks-node-api.mainnet.stacks.co/extended/v1/tokens/nft/holdings?principal=${stxAddress}`);\n        const data = await response.json();\n        console.log(data);\n        if (data.results && data.results.length > 0) {\n          // Check if metadata needs to be fetched\n          const nftsWithMetadata = await Promise.all(data.results.map(async nft => {\n            if (nft.token_uri) {\n              const metadataResponse = await fetch(nft.token_uri);\n              const metadata = await metadataResponse.json();\n              return {\n                ...nft,\n                metadata\n              };\n            }\n            return nft;\n          }));\n          setNfts(nftsWithMetadata);\n        } else {\n          console.log('No NFTs found for this address.');\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setLoading(false);\n      }\n    }\n    fetchNFTs();\n  }, [stxAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      id: \"home-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"NFTCard\",\n        children: /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"browse-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nft-grid\",\n            children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading NFTs...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this) : nfts.length > 0 ? nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"nft-item\",\n              children: [nft.metadata && nft.metadata.image ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: nft.metadata.image,\n                alt: nft.asset_identifier\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 23\n              }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No image available\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n                children: nft.asset_identifier\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"NFT Contract: \", nft.contract_address]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Token ID: \", nft.value.repr.replace('u', '')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"nft-buttons\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"buy-now\",\n                  children: \"Buy Now\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"swap\",\n                  children: \"Swap\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No NFTs found for this address.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(AssetCard, \"Xu7ThsH35mRfDOV8Y1kg1IE53o0=\");\n_c = AssetCard;\nexport default AssetCard;\n\n// import React from 'react';\n\n// function AssetCard() {\n//     return (\n//       <div>\n\n//       <main id=\"home-container\">\n//         <div class=\"NFTCard\">\n//           <main class=\"browse-container\">\n//             <div class=\"nft-grid\">\n//               <div class=\"nft-item\">\n//                 <img src=\"future.jpg\" alt=\"Future\"/>\n//                 <h2>Future</h2>\n//                 <p>Artist and Blurb</p>\n//                 <div class=\"nft-price\">0.22BTC</div>\n//                 <div class=\"nft-price-usd\">US$13,382.11</div>\n//                 <div class=\"nft-floor-price\">Floor price for this collection is 0.1991 BTC</div>\n//                 <div class=\"nft-buttons\">\n//                   <button class=\"buy-now\">Buy Now</button>\n//                   <button class=\"swap\">Swap</button>\n//                 </div>\n//               </div>\n//             </div>\n//           </main>\n//         </div>\n//       </main> \n//       </div>\n//     );\n//   }\n\n//   export default AssetCard;\nvar _c;\n$RefreshReg$(_c, \"AssetCard\");","map":{"version":3,"names":["React","useState","useEffect","UserSession","jsxDEV","_jsxDEV","userSession","AssetCard","_s","nfts","setNfts","loading","setLoading","stxAddress","loadUserData","profile","mainnet","fetchNFTs","response","fetch","data","json","console","log","results","length","nftsWithMetadata","Promise","all","map","nft","token_uri","metadataResponse","metadata","error","children","id","className","fileName","_jsxFileName","lineNumber","columnNumber","index","image","src","alt","asset_identifier","contract_address","value","repr","replace","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/AssetCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { UserSession } from \"@stacks/connect\"; \r\nexport const userSession = new UserSession();\r\n\r\nfunction AssetCard() {\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const stxAddress = userSession.loadUserData().profile.stxAddress.mainnet;\r\n\r\n  useEffect(() => {\r\n    async function fetchNFTs() {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Fetch NFTs from the Hiro Stacks API\r\n        const response = await fetch(\r\n          `https://stacks-node-api.mainnet.stacks.co/extended/v1/tokens/nft/holdings?principal=${stxAddress}`\r\n        );\r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        if (data.results && data.results.length > 0) {\r\n          // Check if metadata needs to be fetched\r\n          const nftsWithMetadata = await Promise.all(\r\n            data.results.map(async (nft) => {\r\n              if (nft.token_uri) {\r\n                const metadataResponse = await fetch(nft.token_uri);\r\n                const metadata = await metadataResponse.json();\r\n                return { ...nft, metadata };\r\n              }\r\n              return nft;\r\n            })\r\n          );\r\n          setNfts(nftsWithMetadata);\r\n        } else {\r\n          console.log('No NFTs found for this address.');\r\n        }\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching NFTs:', error);\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchNFTs();\r\n  }, [stxAddress]);\r\n\r\n  return (\r\n    <div>\r\n      <main id=\"home-container\">\r\n        <div className=\"NFTCard\">\r\n          <main className=\"browse-container\">\r\n            <div className=\"nft-grid\">\r\n              {loading ? (\r\n                <p>Loading NFTs...</p>\r\n              ) : nfts.length > 0 ? (\r\n                nfts.map((nft, index) => (\r\n                  <div className=\"nft-item\" key={index}>\r\n                    {/* Use the image from the metadata, if available */}\r\n                    {nft.metadata && nft.metadata.image ? (\r\n                      <img src={nft.metadata.image} alt={nft.asset_identifier} />\r\n                    ) : (\r\n                      <p>No image available</p>\r\n                    )}\r\n                    <h2>{nft.asset_identifier}</h2>\r\n                    <p>NFT Contract: {nft.contract_address}</p>\r\n                    <p>Token ID: {nft.value.repr.replace('u', '')}</p>\r\n                    <div className=\"nft-buttons\">\r\n                      <button className=\"buy-now\">Buy Now</button>\r\n                      <button className=\"swap\">Swap</button>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <p>No NFTs found for this address.</p>\r\n              )}\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AssetCard;\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n \r\n\r\n// function AssetCard() {\r\n//     return (\r\n//       <div>\r\n\r\n//       <main id=\"home-container\">\r\n//         <div class=\"NFTCard\">\r\n//           <main class=\"browse-container\">\r\n//             <div class=\"nft-grid\">\r\n//               <div class=\"nft-item\">\r\n//                 <img src=\"future.jpg\" alt=\"Future\"/>\r\n//                 <h2>Future</h2>\r\n//                 <p>Artist and Blurb</p>\r\n//                 <div class=\"nft-price\">0.22BTC</div>\r\n//                 <div class=\"nft-price-usd\">US$13,382.11</div>\r\n//                 <div class=\"nft-floor-price\">Floor price for this collection is 0.1991 BTC</div>\r\n//                 <div class=\"nft-buttons\">\r\n//                   <button class=\"buy-now\">Buy Now</button>\r\n//                   <button class=\"swap\">Swap</button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </main>\r\n//         </div>\r\n//       </main> \r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   export default AssetCard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}