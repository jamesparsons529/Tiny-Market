{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elliott\\\\Tiny-Market\\\\frontend-tinymarket\\\\src\\\\components\\\\TestNetNFTSList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { UserSession } from \"@stacks/connect\";\nimport './TestNetNFTSList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const userSession = new UserSession();\nfunction TestNetNFTSList() {\n  _s();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Retrieve the STX address from the user session\n  const stxAddress = userSession.loadUserData().profile.stxAddress.testnet;\n\n  // Fetch NFTs for the user's Stacks Testnet address\n  useEffect(() => {\n    async function fetchNFTs() {\n      try {\n        setLoading(true);\n\n        // Fetch NFTs from the Hiro Stacks Testnet API\n        const response = await fetch(`https://stacks-node-api.testnet.stacks.co/extended/v1/tokens/nft/holdings?principal=${stxAddress}`);\n        const data = await response.json();\n        if (data.results && data.results.length > 0) {\n          setNfts(data.results);\n        } else {\n          console.log('No NFTs found for this address.');\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching NFTs:', error);\n        setLoading(false);\n      }\n    }\n    fetchNFTs();\n  }, [stxAddress]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"listings-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Current Testnet NFTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading NFTs...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) : nfts.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"listing-cards\",\n      children: nfts.map((nft, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: nft.value.repr.replace('u', '') // Assuming repr has image URL, replace logic based on your API response\n          ,\n          alt: nft.asset_identifier,\n          className: \"nft-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"nft-contract\",\n            children: nft.contract_address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"nft-description\",\n            children: \"NFT Contract:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"nft-contract-small\",\n            children: nft.contract_address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"token-id\",\n            children: [\"Token ID: \", nft.value.repr.replace('u', '')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"buy-button\",\n              children: \"Buy Now\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"swap-button\",\n              children: \"Swap\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No NFTs found for this address.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(TestNetNFTSList, \"Xu7ThsH35mRfDOV8Y1kg1IE53o0=\");\n_c = TestNetNFTSList;\nexport default TestNetNFTSList;\nvar _c;\n$RefreshReg$(_c, \"TestNetNFTSList\");","map":{"version":3,"names":["React","useState","useEffect","UserSession","jsxDEV","_jsxDEV","userSession","TestNetNFTSList","_s","nfts","setNfts","loading","setLoading","stxAddress","loadUserData","profile","testnet","fetchNFTs","response","fetch","data","json","results","length","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","nft","index","src","value","repr","replace","alt","asset_identifier","contract_address","_c","$RefreshReg$"],"sources":["C:/Users/Elliott/Tiny-Market/frontend-tinymarket/src/components/TestNetNFTSList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { UserSession } from \"@stacks/connect\";\r\nimport './TestNetNFTSList.css'; \r\n\r\nexport const userSession = new UserSession();\r\n\r\nfunction TestNetNFTSList() {\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Retrieve the STX address from the user session\r\n  const stxAddress = userSession.loadUserData().profile.stxAddress.testnet;\r\n\r\n  // Fetch NFTs for the user's Stacks Testnet address\r\n  useEffect(() => {\r\n    async function fetchNFTs() {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Fetch NFTs from the Hiro Stacks Testnet API\r\n        const response = await fetch(\r\n          `https://stacks-node-api.testnet.stacks.co/extended/v1/tokens/nft/holdings?principal=${stxAddress}`\r\n        );\r\n        const data = await response.json();\r\n\r\n        if (data.results && data.results.length > 0) {\r\n          setNfts(data.results);\r\n        } else {\r\n          console.log('No NFTs found for this address.');\r\n        }\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching NFTs:', error);\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchNFTs();\r\n  }, [stxAddress]);\r\n\r\n  return (\r\n    <div className=\"listings-container\">\r\n      <h2>Current Testnet NFTs</h2>\r\n      {loading ? (\r\n        <p>Loading NFTs...</p>\r\n      ) : nfts.length > 0 ? (\r\n        <div className=\"listing-cards\">\r\n          {nfts.map((nft, index) => (\r\n            <div className=\"card\" key={index}>\r\n              <img\r\n                src={nft.value.repr.replace('u', '')} // Assuming repr has image URL, replace logic based on your API response\r\n                alt={nft.asset_identifier}\r\n                className=\"nft-image\"\r\n              />\r\n              <div className=\"card-details\">\r\n                <p className=\"nft-contract\">{nft.contract_address}</p>\r\n                <p className=\"nft-description\">NFT Contract:</p>\r\n                <p className=\"nft-contract-small\">{nft.contract_address}</p>\r\n                <p className=\"token-id\">Token ID: {nft.value.repr.replace('u', '')}</p>\r\n                <div className=\"actions\">\r\n                  <button className=\"buy-button\">Buy Now</button>\r\n                  <button className=\"swap-button\">Swap</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>No NFTs found for this address.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestNetNFTSList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}